.\"@ nail.1 - S-nail(1) reference manual.
.\"
.\" Copyright (c) 2012 - 2023 Steffen Nurpmeso <steffen@sdaoden.eu>.
.\" SPDX-License-Identifier: ISC
.\"
.\" Permission to use, copy, modify, and/or distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\"--MKREL-START--
.\"@ S-nail v14.9.25 / 2024-06-27
.Dd June 27, 2024
.ds VV \\%v14.9.25
.\"--MKREL-END--
.\"--MKMAN-START--
.ds XX \\%S-NAIL
.ds Xx \\%S-nail
.ds xX \\%s-nail
.ds UR \\%s-nail.rc
.ds ur \\%~/.mailrc
.ds VD \\%~/dead.letter
.ds VM \\%~/mbox
.ds VN \\%~/.netrc
.ds VT \\%/tmp
.ds vS /etc/mime.types
.ds vU ~/.mime.types
.\"--MKMAN-END--
.\" --BEGINSTRIP--
.\"
.ds BO (Boolean)
.ds CM (Compose mode)
.ds ID [v15 behaviour may differ]
.ds NQ [Only new quoting rules]
.ds OB [Obsolete]
.ds OP [Option]
.ds oP [option]
.ds PO POSIX.1-202x \" FIXME
.ds PO POSIX.1-2017
.ds RO (Read-only)
.ds SM (Send mode)
.ds OU #-> \:
.ds IN #<- \:
.ds IX #..
.\"
.if !d str-Lb-libterminfo \
  .ds str-Lb-libterminfo Terminal Information Library (libterminfo, \-lterminfo)
.
.Dt "\*(XX" 1
.Os
.Mx -enable
.
.
.Sh NAME
.Nm \*(Xx \%[\*(VV]
.Nd send and receive Internet mail
.
.
.\" .Sh SYNOPSIS {{{
.Sh SYNOPSIS
.
.Nm \*(xX
.Bk -words
.Op Fl DdEFinv~#
.Op Fl \&: Ar spec
.Op Fl A Ar account
.Op : Ns Fl a Ar attachment Ns \&:
.Op : Ns Fl b Ar bcc-addr Ns \&:
.Op : Ns Fl C Ar """field:\0body""" Ns \&:
.Op : Ns Fl c Ar cc-addr Ns \&:
.Op Fl M Ar type | Fl m Ar file | Fl q Ar file | Fl t
.Op Fl r Ar from-addr
.Oo : Ns Fl S\0 Ns Ar var Ns Oo Ns = Ns Ar value Ns Oc Ns : Ns Oc
.Op Fl s Ar subject
.Op : Ns Fl T Ar """field:\0addr""" Ns \&:
.Op : Ns Fl X Ar cmd Ns \&:
.Op : Ns Fl Y Ar cmd Ns \&:
.Op Fl \&.
.Pf : Ar to-addr Ns \&:
.Op Fl Fl \~ Ns : Ns Ar mta-option Ns \&:
.Ek
.Pp
.Nm \*(xX
.Bk -words
.Op Fl DdEeHiNnRv~#
.Op Fl \&: Ar spec
.Op Fl A Ar account
.Op : Ns Fl C Ar """field:\0body""" Ns \&:
.Op Fl L Ar spec
.Op Fl r Ar from-addr
.Oo : Ns Fl S\0 Ns Ar var Ns Oo Ns = Ns Ar value Ns Oc Ns : Ns Oc
.Op Fl u Ar user
.Op : Ns Fl X Ar cmd Ns \&:
.Op : Ns Fl Y Ar cmd Ns \&:
.Op Fl Fl \~ Ns : Ns Ar mta-option Ns \&:
.Ek
.Nm \*(xX
.Bk -words
.Op Fl DdEeHiNnRv~#
.Op Fl \&: Ar spec
.Op Fl A Ar account
.Op : Ns Fl C Ar """field:\0body""" Ns \&:
.Fl f
.Op Fl L Ar spec
.Op Fl r Ar from-addr
.Oo : Ns Fl S\0 Ns Ar var Ns Oo Ns = Ns Ar value Ns Oc Ns : Ns Oc
.Op : Ns Fl X Ar cmd Ns \&:
.Op : Ns Fl Y Ar cmd Ns \&:
.Op Ar file
.Op Fl Fl \~ Ns : Ns Ar mta-option Ns \&:
.Ek
.Pp
.Nm \*(xX
.Fl h | Fl Fl help
.Nm \*(xX
.Fl V | Fl Fl version
.
.\" }}}
.
.
.Mx -toc -tree html pdf ps xhtml
.
.
.\" .Sh DESCRIPTION {{{
.Sh DESCRIPTION
.
.Bd -filled -compact -offset indent
.Sy Warning!
.Va v15-compat
(with value) is default since v14.10.0, and the manual
expects this context;
Most old (other context) documentation has been removed.
S-nail (\*(Xx) will see major changes until v15.0 (circa 2023).
Some backward incompatibilities cannot be avoided, for example
.Sx COMMANDS
will change to
.Sx "Shell-style argument quoting" .
.Ed
.
.Pp
\*(Xx provides a simple and friendly environment for sending and
receiving mail.
It is intended to provide the functionality of the \*(PO
.Xr mailx 1
command, is MIME capable, and optionally offers extensions for
line editing, S/MIME, SMTP and POP3, among others.
Through many
.Sx COMMANDS
and
.Sx "INTERNAL VARIABLES"
users are given tools for email appraisal and management, as well
as increasingly powerful, reliable scripting capabilities.
.
.\" .Ss "Options" {{{
.Ss "Options"
.
.Bl -tag -width ".It Fl BaNg"
.Mx
.It Fl \&: Ar spec , Fl Fl resource-files Ns =..
Controls loading (as via
.Ic source )
of
.Sx "Resource files" .
.Ar spec
consists of case-insensitive letters:
.Ql s
for the system-wide
.Pa \*(UR ,
.Ql u
for the personal file
.Ev MAILRC
.Pf ( Pa \*(ur ) ,
and
.Ql x
for a compiled-in copy of the (upstream) system-wide file.
The letters
.Ql -
or
.Ql /
clear the list of files to be loaded.
The default is
.Ql su .
This option overrides
.Fl n .
.
.Mx
.It Fl A Ar name , Fl Fl account Ns =..
Activate user
.Ic account
.Ar name
after program startup (resource files loaded,
.Fl X
commands etc to follow), and switch to its
.Mx -sx
.Sx "primary system mailbox"
.Pf ( Va inbox )
once startup is completed.
The variable
.Va account
flags the account request immediately.
Upon failure the program
.Pf e Ic xit Ns
s if used non-interactively, or if any of
.Va errexit
or
.Va posix
are set.
.
.Mx
.It Fl a Ar file Ns Oo Ar = Ns Oo ! Oc Ns input-charset Ns \
    Oo Ar # Ns Oo ! Oc Ns output-charset Oc Oc , \
  Fl Fl attach Ns =..
\*(SM Attach
.Ar file ,
subject to tilde expansion (see
.Sx "Filename transformations"
and
.Ic folder ) .
In
.Sx "Compose mode"
the
.Sx "COMMAND ESCAPES"
.Ic ~@
and especially the scriptable
.Ic ~^
provide alternatives for attaching files.
.Pp
If
.Ar file
is not accessible but contains an equal-sign
.Ql =
a character set specification is split off.
If only an input one is given it is fixated and no conversion is applied;
an empty, or the special string hyphen-minus
.Ql -
means
.Va ttycharset .
If an output one is given the conversion is performed on-the-fly, not
considering file type nor content; however, empty string or hyphen-minus
.Ql -
enforce the default
.Sx "Character sets"
conversion
.Pf ( Ql -a file ,
.Ql -a file=# ,
and
.Ql -a file=-#-
are identical),
later applied after MIME-classifying
.Ar file
.Pf ( Sx "HTML mail and MIME attachments" , "The mime.types files") .
This is the only available mode without
.Ql ,+iconv,
in
.Va features ,
or with
.Va iconv-disable
set.
The character set names may be prefixed with exclamation mark
.Ql \&!
to enforce base64
.Va mime-encoding
of the attachment.
.
.Mx
.It Fl b Ar addr , Fl Fl bcc Ns =..
\*(SM Send a blind carbon copy of the message to
.Ar addr ,
invisible for other recipients.
May be used multiple times.
See also
.Sx "On sending mail, and non-interactive mode" .
.
.Mx
.It Fl C Ar """name: content""" , Fl Fl custom-header Ns =..
Create a custom header
.Ar name
that lasts for the entire session.
Content follows after a colon
.Ql \&: ,
for example
.Ql -C """Blah: Neminem laede; imo omnes, quantum potes, juva""" .
May be used multiple times;
.Ar name
may not be a standard header.
Adjustable custom headers can be created via
.Va customhdr ;
in
.Sx "Compose mode"
.Ic ~^
.Pf ( Sx "COMMAND ESCAPES" )
and
.Ic digmsg
are the most powerful options.
.
.Mx
.It Fl c Ar addr , Fl Fl cc Ns =..
\*(SM Like
.Fl b ,
but adds carbon copies (visible recipients).
.
.Mx
.It Fl D , Fl Fl disconnected
\*(OP Startup with
.Va disconnected
.Ic set .
.
.Mx
.It Fl d , Fl Fl debug
Enter a debug-only sandbox mode by setting
.Va debug ,
as via
.Ql Fl S Va \&\&debug
or
.Ql Ic set Va \&\&debug .
Also see
.Fl v .
.
.Mx
.It Fl E , Fl Fl discard-empty-messages
\*(SM
.Ic set
.Va skipemptybody
and discard messages with an empty message part body, successfully.
.
.Mx
.It Fl e , Fl Fl check-and-exit
If any messages (matching
.Fl L )
exist in
.Ic folder
(dependent on
.Fl u ,
.Va inbox
or
.Ev MAIL ,
or as specified via
.Fl f ) ,
then exit with status 0, with non-zero otherwise.
.
.Mx
.It Fl F
\*(SM Save the message in a file named after the local part of the first
recipient's address,
overwriting
.Va record ,
but honouring
.Va outfolder .
.
.Mx
.It Fl f , Fl Fl file
Open the user's
.Mx -sx
.Sx "secondary mailbox"
.Ev MBOX ,
or a given argument
.Ar file ,
instead of the
.Mx -sx
.Sx "primary system mailbox"
(note
.Va hold , keepsave ) .
.Ar file
is not an option argument, but taken from the command line after
command line option processing.
It is inspected for protocol specifications and undergoes
.Sx "Filename transformations" ,
as if given to
.Ic folder .
As a special case that requires read-only mode
.Pf ( Fl R )
hyphen-minus
.Ql -
denotes standard input (in MBOX or EML format) that can also be
a pipe instead of a regular file.
.
.Mx
.It Fl H , Fl Fl header-summary
Display a
.Pf ( Fl L :
configurable) summary of message
.Ic headers
in
.Ic folder
(dependent on
.Fl u ,
.Va inbox
or
.Ev MAIL ,
or as specified via
.Fl f ) ,
then exit.
.Va showlast
is ignored.
Quickrun: does not open an interactive session.
Tip:
.Ev COLUMNS
are honoured in batch mode
.Pf ( Fl # ) .
.
.Mx
.It Fl h , Fl Fl help
Show a brief usage summary; use
.Fl Fl long-help
to list long options.
.
.Mx
.It Fl i
.Ic set
.Va ignore
to ignore tty interrupt signals.
.
.Mx
.It Fl L Ar spec , Fl Fl search Ns =..
Display a summary of message
.Ic headers
matching
.Ar spec
.Pf ( Sx "Specifying messages" )
in
.Ic folder
(dependent on
.Fl u ,
.Va inbox
or
.Ev MAIL ,
or as specified via
.Fl f ) ,
then exit.
.Va showlast
is ignored.
In conjunction with
.Fl e
display is suppressed.
Quickrun: does not open an interactive session.
Tip:
.Ev COLUMNS
can be honoured in batch mode
.Pf ( Fl # ) .
.
.Mx
.It Fl M Ar type
\*(SM Will flag standard input with MIME
.Ql Content-Type:
.Ar type
.Pf ( Sx "HTML mail and MIME attachments" , "The mime.types files" ) ,
and use it as the main message body.
\*(ID Using this option will bypass processing of
.Va message-inject-head
and
.Va message-inject-tail .
Also see
.Fl m , q , t .
.
.Mx
.It Fl m Ar file
\*(SM Initialize the message body from MIME classified
.Ar file .
\*(ID Using this option will bypass processing of
.Va message-inject-head
and
.Va message-inject-tail .
Also see
.Fl q , M , t .
.
.Mx
.It Fl N , Fl Fl no-header-summary
.Ic unset
.Va header
to inhibit displaying the summary of
.Ic headers
when opening a
.Ic folder .
.
.Mx
.It Fl n
Inhibit reading the system-wide
.Pa \*(UR .
.
.Mx
.It Fl q Ar file , Fl Fl quote-file Ns =..
\*(SM Initialize the message body from
.Ar file ;
only non-interactively this may denote standard input (hyphen-minus
.Ql - ) .
Also see
.Fl M , m , t .
.
.Mx
.It Fl R , Fl Fl read-only
Any mailbox will be opened read-only as via
.Ic Folder .
.
.Mx
.It Fl r Ar from-addr , Fl Fl from-address Ns =..
The RFC 5321 reverse-path used for relaying and delegating messages,
for example to report back delivery errors, is derived from
.Va from
(or
.Va sender ) .
However, a file-based (local)
.Va mta
(Message-Transfer-Agent) will instead use
.Ev LOGNAME .
With this option
.Ar from-addr
is assigned to
.Va from ,
and in addition file-based
.Va mta Ns s
are invoked with
.Fl \&\&f Ar from-addr .
If
.Ar from-addr
includes non-address components
.Pf ( Va fullnames ) ,
these are instead passed via
.Fl \&\&F Ar name .
If
.Ar from-addr
is an empty string
.Va from
(or
.Va sender )
is evaluated whenever
.Va mta
is invoked; also see
.Va r-option-implicit .
Even though not a recipient the
.Ql shquote
.Va expandaddr
flag is supported.
.Pp
Remarks: many MTA installations and sites disallow setting an explicit
reverse-path, but for members of dedicated user groups, or after MTA
reconfiguration.
.
.Mx
.It Fl S Ar var Ns Oo = Ns value Oc , Fl Fl set Ns =..
.Ic set
(or, with a
.Ql no
prefix as documented in
.Sx "INTERNAL VARIABLES" ,
.Ic unset )
.Ar var Ns
iable and optionally assign
.Ar value ,
if supported, evaluated as if specified within dollar-single-quotes
.Pf ( Sx "Shell-style argument quoting" ) .
Upon failure the program will exit if any of
.Va errexit
or
.Va posix
is set.
Settings established via
.Fl \&\&S
cannot be changed from within
.Sx "Resource files" ,
or an
.Fl A Ns
ccount switch; they become mutable again for
.Fl X
commands.
.
.Mx
.It Fl s Ar subject , Fl Fl subject Ns =..
\*(SM Specify a message subject.
Newline (NL) and carriage-return (CR) are normalized to space (SP).
.
.Mx
.It Fl T Ar """field: addr""" , Fl Fl target Ns =..
\*(SM Add
.Ar addr ,
parsed like a message header address line (see
.Fl t ) ,
and supporting the same modifiers,
to the list of recipients targeted by
.Ar field :
supported are
.Ql bcc ,
.Ql cc ,
.Ql fcc ,
and
.Ql to .
Field and body (address) are separated by a colon
.Ql \&:
and optionally blank (space, tabulator) characters.
The
.Ql shquote
.Va expandaddr
flag is supported.
This option may be used multiple times.
.
.
.Mx
.It Fl t , Fl Fl template
\*(SM Standard input is expected to contain one or multiple plain text
message headers, an empty line, and the message body.
\*(ID Readily prepared MIME mail messages cannot be passed.
Header lines are parsed as follows.
A line starting with number sign
.Ql #
in the first column is ignored.
A header can span multiple consecutive lines if follow lines start with
(ignored) whitespace.
.
.Pp
Recipients will be
.Va expandaddr
checked, and added onto the command line ones:
.Ql To: ,
.Ql Cc: ,
.Ql Bcc: ;
the line is parsed as a single recipient with the modifier
.Ql ?single ,
for example
.Ql To?single: exa, <m@ple> .
.Ql Fcc:
is supported (see
.Sx "Compose mode" ) .
A subject specified via
.Ql Subject:
is used in favour of the command line option
.Fl s .
.
.Pp
More optional headers are
.Ql Reply-To:
(possibly overriding
.Va reply-to ) ,
.Ql Sender:
.Pf ( Va sender ) ,
.Ql From:
.Pf ( Va from
and / or option
.Fl r ) .
Normally created automatically, but used if specified are
.Ql Message-ID: ,
.Ql In-Reply-To: ,
.Ql References:
and
.Ql Mail-Followup-To: .
All other (custom) header fields (see
.Fl C ,
.Va customhdr ,
.Ic ~^ )
are passed through as-is, and in conjunction with the options
.Fl ~
or
.Fl #
.Sx "COMMAND ESCAPES"
are evaluated.
Also see
.Fl M , m , q .
.
.
.Mx
.It Fl u Ar user , Fl Fl inbox-of Ns =..
Open the
.Mx -sx
.Sx "primary system mailbox"
of
.Ar user ,
appropriate privileges presumed; identical to
.Ql Fl \&\&f Ns \0%user .
.
.Mx
.It Fl V , Fl Fl version
Print
.Va version
and exit.
The command
.Ic version
will also show
.Va features :
.Ql $ \*(xX -:/ -#v -Xversion -Xx .
.
.Mx
.It Fl v , Fl Fl verbose
.Ic set
.Va verbose .
(Multiple levels.)
Also see
.Fl d .
.
.Mx
.It Fl X Ar cmd , Fl Fl startup-cmd Ns =..
Add (the multiline)
.Ar cmd
(block) to a list evaluated before normal operation starts, as via
.Ic source .
Correlates with
.Fl #
and
.Va errexit .
.
.Mx
.It Fl Y Ar cmd , Fl Fl cmd Ns =..
Add (the multiline)
.Ar cmd
(block) to a list evaluated after normal operation has started.
It is evaluated successively in the given order, and as if given on
the program's standard input \(em before interactive prompting begins in
interactive mode, after standard input has been consumed otherwise.
.
.Mx
.It Fl ~ , Fl Fl enable-cmd-escapes
Enable
.Sx "COMMAND ESCAPES"
in
.Sx "Compose mode" ,
even in non-interactive use cases.
This can for example be used to format the composed message text:
.Bd -literal -offset indent
$ ( echo 'line    one. Word.     Word2.';
    echo '~| /usr/bin/fmt -tuw11' ) |
  LC_ALL=C \*(xX -d~:/ -Sttycharset-detect ex@am.ple
.Ed
.
.Mx
.It Fl # , Fl Fl batch-mode
Enable batch mode: standard input is made line buffered,
all (interactive) commands are made available, processing of
.Sx "COMMAND ESCAPES"
is enabled in
.Sx "Compose mode" ,
and diverse
.Sx "INTERNAL VARIABLES"
are adjusted for batch necessities, exactly as via
.Fl S :
.Va emptystart ,
.Pf no Va errexit ,
.Pf no Va header ,
.Pf no Va posix ,
.Va quiet ,
.Va sendwait ,
.Va typescript-mode .
The following are instead
.Ic set
to
.Pa /dev/null :
.Ev MAIL ,
.Ev MBOX
and
.Va inbox .
(Without an
.Fl A Ns
ccount switch a later
.Fl f
will avoid
.Dq opening
.Pa /dev/null
in receive mode.)
The values of
.Ev COLUMNS
and
.Ev LINES
are acted upon.
For example :
.Bd -literal -offset indent
$ for name in bob alice@exam.ple lisa@exam.ple; do
    printf 'mail %s\en~s ubject\enText\en~.\en' "${name}"
  done |
  LC_ALL=C \*(xX -#:x -Smta=test \e
    -X'alias bob bob@exam.ple'
.Ed
.
.Mx
.It Fl \&. , Fl Fl end-options
Force termination of option processing (prevent
.Dq option injection
attacks), and forcefully enter send mode.
.El
.
.Pp
In difference to
.Va mta-arguments
the setting of
.Va expandargv
is checked before
.Ar mta-option
arguments given after a
.Ql --
command line separator will be passed to file-based
.Va mta Ns s
(Message-Transfer-Agent) during the session.
The
.Ql shquote
constraint of
.Va expandaddr
applies to recipient addresses on the command line.
For more see
.Sx "On sending mail, and non-interactive mode" .
.
.Bd -literal -offset indent
$ \*(xX -#:/ -X 'addrcodec enc <silver@go> Hey, ho' -Xx
.Ed
.\" }}}
.
.\" .Ss "A starter" {{{
.Ss "A starter"
.
\*(Xx is a direct descendant of
.Bx
Mail, itself a successor to the Research
.Ux
mail which
.Dq was there from the start
according to
.Sx HISTORY .
As a message user agent (MUA) it represents the user side of the
.Ux
mail system, the traditional server Message-Transfer-Agent (MTA) was
.Xr sendmail 8 ,
and for compatibility a binary of this name usually exists to this day.
If
.Va features
announces the \*(oPal SMTP
.Va mta
message delivery does not require the server side.
.
.Pp
This program strives for \*(PO
.Xr mailx 1
compliance, however
.Va posix
.Pf ( Sx "INTERNAL VARIABLES" )
or its
.Ic environ Ns
mental equivalent
.Ev POSIXLY_CORRECT
.Pf ( Sx ENVIRONMENT )
needs to be set to tweak behaviour accordingly.
There is an important deviation: POSIX
.Sx "Shell-style argument quoting"
is (\*(ID increasingly) used instead of POSIX mailx's
.Sx "Old-style argument quoting" ,
which is believed to be a feature.
Some built-in settings, and the built-in as well as the (default) global
.Pa \*(UR
.Pf ( Sx "Resource files" )
also bend standard imposed settings.
.
.Pp
For example, even if the opened
.Ic folder
is empty interactive mode is entered due to
.Va emptystart ,
in
.Sx "Compose mode"
.Va editheaders
enables header editing and
.Va fullnames
avoids address skinning, when
.Ic reply Ns
ing responded messages are
.Va quote Ns
d, prefixed with an
.Va indentprefix
that also deviates from standard imposed settings, and
.Va followup-to-honour
and
.Va reply-to-honour
are set to comply to sender address desires.
Fully enabled is
.Va mime-counter-evidence .
.
.Pp
User credentials and settings are easily addressable by grouping them in
.Ic account Ns
s.
The file mode creation mask can be managed with
.Va umask .
Files and shell pipe output can be
.Ic source Ns
d for
.Cm eval Ns
uation, also during startup from within the
.Sx "Resource files" .
Informational context may be available by
.Ic set Ns
ting
.Va verbose
or
.Va debug
(as via
.Fl v , d ) .
Many
.Ql un*
commands, like
.Ic unaccount , unalias , unalternates , uncommandalias
etc. support an asterisk
.Ql *
wildcard argument that matches all covered settings.
.\" }}}
.
.\" .Ss "On sending mail, and non-interactive mode" {{{
.Ss "On sending mail, and non-interactive mode"
.
To send a message to one or more people give their email addresses (and
.Va fullnames )
on the command line, the options
.Fl b
and
.Fl c
add (blind) carbon copy recipients.
When delivered through a local
.Va mta
(Message-Transfer-Agent) plain system-local user names can be addressed.
The message text will be read from standard input:
.
.Bd -literal -offset indent
# Via test MTA
$ echo Hello, world | \*(xX -:/ -Smta=test -s test $LOGNAME

# Via sendmail(1) MTA
$ </dev/null \*(xX -:x -s test $LOGNAME

# Debug dry-run mode:
$ </dev/null LC_ALL=C \*(xX -d -:/ \e
   -Sttycharset=utf8 -Sfullnames \e
   -b bcc@exam.ple -c cc@exam.ple -. \e
   '(Lovely) Bob <bob@exam.ple>' ex@am.ple

# With SMTP (no real sending due to -d debug dry-run)
$ LC_ALL=C \*(xX -d -:/ -Sttycharset-detect \e
    -S mta=smtps://me@exam.ple:465 -Ssmtp-config=-auth \e
    -S from=scriptreply@exam.ple \e
    --attach /etc/passwd --end-options \e
    ex@am.ple < /tmp/letter.txt
.Ed
.
.Pp
Plain user names and
.Va metoo
.Pf ( Ic alternates )
are expanded through
.Ic alias
and
.Va mta-aliases .
A valid local user
.Ql <name>
in angle brackets (an invalid address) expands to a qualified address if
.Va hostname
is not set or non-empty; if empty conversion is responsibility of the
.Va mta .
.\" When changing any of the following adjust any RECIPIENTADDRSPEC;
.\" grep the latter for the complete picture
.Va expandaddr
offers control over allowed recipients and more.
.
.Pp
Recipients are classified as follows:
any name that starts with a vertical bar
.Ql |
specifies a pipe: the
.Ev SHELL
command following the
.Ql |
is executed with the message available on its standard input.
Other than that hyphen-minus
.Ql -
or any name that starts with solidus
.Ql /
or dot solidus
.Ql ./
is treated as a file.
Any other name which contains a commercial at
.Ql @
is an (email) address.
Any other name which starts with a plus sign
.Ql + ,
or which contains a solidus
.Ql /
but no exclamation mark
.Ql \&!
or percent sign
.Ql %
before that
.Pf ( Sx "Filename transformations" )
is a mailbox
.Ic folder
name.
What remains is treated as an (email) address.
Classification can be avoided by using a
.Ql Fcc:
header, see
.Sx "Compose mode" .
.
.Bd -literal -offset indent
$ echo bla | \*(xX -S expandaddr -s test ./mbox.mbox
$ echo bla | \*(xX -Sexpandaddr -stest '|cat >> ./mbox.mbox'
$ echo safe | LC_ALL=C \*(xX -:/ -Smta=test \e
    --set expandaddr=fail,-all,+addr,failinvaddr \e
    -Sttycharset-detect -S mime-force-sendout -S fullnames \e
    -s test -. 'Imagine John <cold@turk.ey>'
.Ed
.
.Pp
A lot of configuration can be
.Ic set
generally.
The envelope sender address for example via
.Va from ,
especially with the built-in SMTP
.Va mta
a
.Va hostname
must be set.
.Sx "Character sets"
for message text and MIME part content are configurable via
.Va sendcharsets ,
input data is expected to be in
.Va ttycharset ,
but active
.Va ttycharset-detect Ns
ion is available.
Emails need a
.Va mime-encoding ,
MIME parts aka attachments need a
.Ic mimetype ,
usually taken out of
.Sx "The mime.types files" .
Saving copies of sent messages in a
.Va record
mailbox may be desirable.
.
.Pp
.Ic account Ns s
aid in arranging complete configurations.
Alternatively so-called variable chains that automatically pick
.Ql USER@HOST
or
.Ql HOST
context-dependent variants could be sufficient: for example
.Ql Ic set Va mta Ns =smtp://yaa@exam.ple
would find
.Va \&\&smtp-config-yaa@exam.ple ,
.Va \&\&smtp-config-exam.ple
and
.Va smtp-config ,
in order.
More on that under
.Sx "On URL syntax and credential lookup"
and
.Sx "INTERNAL VARIABLES" .
.
.Pp
To avoid environmental noise scripts should be isolated
by excluding configuration files via
.Fl \&: ,
and use repetitions of
.Fl S
to specify variables:
.
.Bd -literal -offset indent
$ env LC_ALL=C \*(xX -:/ \e
    -Sttycharset=utf-8 -Smime-force-sendout \e
    -Sexpandaddr=fail,-all,failinvaddr \e
    -S mta=smtps://me@exam.ple:465 -Ssmtp-config=-allmechs,plain \e
    -S from=scriptreply@exam.ple \e
    -s 'Subject to go' -a attachment_file \e
    -Sfullnames --end-options \e
    'Recipient 1 <rec1@exam.ple>' rec2@exam.ple \e
    < content_file
.Ed
.
.Pp
As shown scripts can fake a locale
.Sx ENVIRONMENT ,
the above specifies the all-compatible 7-bit clean
.Ev LC_ALL
.Dq C ,
but nonetheless takes and sends UTF-8 message text via
.Va ttycharset ;
active classification via
.Va ttycharset-detect
might be an even better option, reflecting reality.
If character set conversion is available
.Pf ( Va features
includes
.Ql ,+iconv, ,
.Va iconv-disable
not set) invalid (according to input character set) input causes errors:
.Va mime-force-sendout
classifies input as binary data as a last resort, and allows message
creation to succeed.
(Such content can be inspected either by installing a
.Va pipe-TYPE/SUBTYPE
handler for
.Ql application/octet-stream ,
or possibly automatically through
.Va mime-counter-evidence ) .
.
.Pp
In interactive mode messages can be send with the command
.Ic mail
and a list of recipient addresses, in the entered
.Sx "Compose mode"
.Sx "COMMAND ESCAPES" ,
like
.Ic ~? ,
can then be used:
.
.Bd -literal -offset indent
$ \*(xX -:/ -Squiet -Semptystart -Sfullnames -Smta=test
"/var/spool/mail/user": 0 messages
mail "Recipient 1 <rec1@exam.ple>", rec2@exam.ple
\*(IX
# Will do the right thing (tm)
m rec1@exam.ple rec2@exam.ple
.Ed
.\" }}}
.
.\" .Ss "Compose mode" {{{
.Ss "Compose mode"
.
In compose mode of interactive sessions, or when requested via
.Fl ~
or
.Fl # ,
lines beginning with
.Ql ~
(the value of
.Va escape
in fact) are
.Sx "COMMAND ESCAPES" .
For example
.Ic ~v
will start
.Ev VISUAL
and
.Ic ~e
.Ev EDITOR
to revise the message, including headers with
.Va editheaders
(setting
.Va fullnames
avoids address skinning), the potent
.Ic ~^
can manage attachments and headers more scriptable than
.Ic ~@ .
\*(OPally
.Ic ~?
shows a summary of available command escapes.
.
.Pp
Via
.Ic ~^
.Ql Fcc:
headers can be created: its values are not mangled like other recipients,
so names with vertical bars, or commercial ats, or other special
characters can be used; they are still subject to
.Va expandaddr
checks, undergo
.Sx "Filename transformations" ,
and are then interpreted like a
.Ic folder
target.
Any local file and pipe command recipient honours
.Va mbox-fcc-and-pcc .
.
.Pp
.Va on-compose-enter , on-compose-splice , on-compose-leave
and
.Va on-compose-cleanup
are hooks that may each be set to a
.Ic define Ns
d
.Mx -sx
.Sx Macro .
The splice hook can operate on messages like a user, and use
.Sx "COMMAND ESCAPES" ,
.Ic digmsg
may be helpful to query and adjust status of message(s) otherwise.
(\*(ID The compose mode hooks work for
.Ic forward , mail , reply
and variants;
.Ic resend
and
.Ic Resend
only provide the hooks
.Va on-resend-enter
and
.Va on-resend-cleanup ,
which are pretty restricted due to the nature of the operation.)
.
.Pp
Once ready
.Ic ~.
will leave compose mode, call according hooks, perform auto-insertions
.Pf ( Va message-inject-tail , autocc , autobcc ) ,
and pass the final message to the
.Va mta .
Unless
.Va ignoreeof
is set typing end-of-transmission (EOT)
.Ql control-D
.Pf ( Ql ^D )
at the beginning of an empty line has the same effect.
.Ic ~x
or
.Ic ~q
abort message composition, the latter saves the message draft in
.Ev DEAD
unless
.Pf no Va save
is set.
Typing end-of-text (ETX) twice via
.Ql control-C
.Pf ( Ql ^C )
equals
.Ic ~q .
With
.Va asksend
set a confirmation is required.
.
.Pp
.Sx COMMANDS
which enter compose mode support a
.Cm local
.Mx -sx
.Sx scope
.Pf ( Sx "Command modifiers" ) :
covered changes will be reverted once compose mode is left.
.\" }}}
.
.\" .Ss "On reading mail, and more on interactive mode" {{{
.Ss "On reading mail, and more on interactive mode"
.
When invoked without recipients
.Dq receive mode
is entered, more oriented towards interactive use
.Pf ( Sx "On terminal control and line editor" ,
.Sx "Coloured display" ) .
Through many
.Sx COMMANDS
mail can be read, sent and managed in this mode.
It starts into a mailbox as via
.Ic folder :
either the
.Mx -sx
.Sx "primary system mailbox"
(of
.Fl u Ar user ) ,
or, with the option
.Fl f ,
a given
.Ar file
or the secondary
.Ev MBOX .
If this initial mailbox is empty the program
.Ic quit Ns
s unless
.Va emptystart
is
.Ic set .
.
.Pp
With
.Va header
a
.Va screen Ns
ful of
.Va headline Ns
s of
.Ic headers
is then shown,
.Ic sort Ns
ed according to
.Va autosort .
.Ic z
will move through the summary.
Messages are uniquely identified by numbers counting from 1;
the current \(en named
.Dq dot
\(en will either be the first new, the first unread, or the first
.Pf ( Va showlast :
the last) message of the mailbox, in view.
By
.Sx "Specifying messages"
selective
.Ic search
results can be created.
.
.Pp
At the
.Va prompt
.Ic list
shows all built-in commands in a lookup order that does not always
correlate to the alphabetical one: names can be abbreviated,
and \*(PO standardized some abbreviations.
(But)
.Ic commandalias Ns
es can be defined and listed.
A overall summary
.Ic help
is available, and \*(oPally also for a given command (expansion).
.Ic help
and
.Ic list
may react upon
.Va verbose .
.
.Bd -literal -offset indent
help reply
\*(IX
set verbose=2; help reply; unset verbose
.Ed
.
.Pp
.Ic type
(alias
.Ic print )
displays headers and text content of the dot or the specified messages.
Whether and when
.Ev PAGER
is used for display instead of dumping to the
.Va screen
is controlled by
.Va crt .
.Ic more
always uses
.Ev PAGER .
.Ic top
shows only the first
.Va toplines
of messages, even
.Va topsqueeze Ns
d.
Setting
.Va mime-counter-evidence
can improve real-life display experience, and also see
.Sx "HTML mail and MIME attachments" .
.
.Bd -literal -offset indent
type :nu # new and unread
\*(IX
type @'time drift' # that substring in Subject:
.Ed
.
.Pp
By default all message headers are
.Ic type Ns
d, but they may be
.Ic retain Ns
ed or
.Ic ignore Ns
d for a variety of applications via
.Ic headerpick ,
for example, to restrict what is
.Ic forward Ns
ed:
.Ql Ic headerpick Cd \:forward retain Ar \:from to cc subject .
In order to display all header fields of a message regardless of
currently active ignore or retain lists use
.Ic Type
and
.Ic Top ;
.Ic Show
will instead show raw message content.
Historically the global
.Pa \*(UR
not only adjusts the list of displayed headers, but also sets
.Va crt .
.
.Pp
Automatic message moving: when reading the
.Mx -ix "automatic message moving"
.Va inbox ,
or when
.Fl f
or
.Ic folder
were given mailbox names prefixed with
.Ql %:
to turn them into a
.Mx -sx
.Sx "primary system mailbox" ,
read messages
.Pf ( Sx "Message states" )
will be automatically moved to the
.Mx -sx
.Sx "secondary mailbox" ,
the users
.Ev MBOX ,
when the mailbox is left (also via normal program termination,
.Ic quit ) ,
and unless the variable
.Va hold
is set; This automatic email management is complemented by the commands
.Ic hold , mbox
and
.Ic touch ,
which partially override the variable
.Va hold ,
and also
.Ic save
(see
.Va keepsave ) .
Messages may of course be
.Ic move Ns
d manually, whereas
.Ic copy
keeps the original message.
.Ic write
saves selected message parts.
.
.Pp
One may
.Ic reply Ql r
to the sender and all recipients (also placed in
.Ql To:
unless
.Va recipients-in-cc
is set) of a message, or
.Ic Reply Ql R
exclusively to the sender.
To comply with the sender's desired reply address the
.Mx -sx
.Sx quadoption Ns
s
.Va followup-to-honour
and
.Va reply-to-honour
should usually be set.
A special recipient massage for
.Sx "Mailing lists"
is applied by
.Ic Lreply
and
.Ic Lfollowup .
The message being replied to can be
.Va quote Ns
d (value defines style).
.Ic forward Ns
ing a message includes the original message in the message body instead.
It is possible to
.Ic resend
or
.Ic Resend
messages, the former only will add a series of
.Ql Resent-
headers; different to newly created messages
editing is not possible and no copy will be saved in
.Va record
unless
.Va record-resent
is
.Ic set .
.
.Pp
Messages can be
.Ic delete Ns Ql d
and
.Ic undelete Ns
d.
The \*(Xx session is ended quickly via
.Ic exit
or
.Ic xit ,
a full program exit that includes mailbox state and line editor
.Va history-file
updates among others is performed by
.Ic quit .
.\" }}}
.
.\" .Ss "HTML mail and MIME attachments" {{{
.Ss "HTML mail and MIME attachments"
.
Messages with only a HTML part, or MIME (Multipurpose Internet Mail
Extensions) alternative messages with only a useful HTML type part
become more and more common.
And there are MIME attachments containing numerous data types.
No knowledge of those is necessary for saving message parts via
.Ic write ,
for other purposes a notion of MIME types is required.
A small set of types is built-in, onto which
.Sx "The mime.types files"
are added under
.Va mimetypes-load-control .
.Ic mimetype
can create further types, and dynamically manage the list.
.Va mime-counter-evidence
tries to address the faulty MIME part declarations of real life by
possibly providing better fitting MIME types.
.
.Pp
A simple HTML-to-text filter is \*(oPally
.Pf ( Va features
contains
.Ql ,+filter-html-tagsoup, )
built-in, but other non-text MIME types cannot be handled directly:
handlers need to be registered that either convert data to
(re-)integratable plain text (called
.Cd copiousoutput
mode), or display it externally, for example in a graphical window:
this latter kind is not considered when messages are
.Ic type Ns
d, but only by
.Ic mimeview .
.
.Pp
To install a handler for a MIME type an according
.Va pipe-TYPE/SUBTYPE
variable must be set, alternatively the higher-ranked per file extension
.Va pipe-EXTENSION
can be used.
\*(OP Standard mail user agent configuration (RFC 1524) and
.Sx "The Mailcap files"
preferably share MIME handler knowledge in between many programs.
.Ic mimetype
type-markers are inspected last.
Except with
.Va mime-alternative-favour-rich
plain text alternatives are used.
.
.Pp
The following example reintegrates HTML formatted by the text browsers
.Xr lynx 1
or
.Xr elinks 1 ,
registers a JSON MIME type handled as plain text,
and establishes a setting to open PDF parts in an external viewer,
asynchronously and with some other magic attached, like
.Sx "Command modifiers" :
.
.Bd -literal -offset indent
set noprompt # unset prompt for this early example

if $features =% ,+filter-html-tagsoup,
  unmimetype text/html
  mimetype ?h text/html html htm
else
  #set pipe-text/html='?* elinks -force-html -dump 1'
  set pipe-text/html='?* lynx -stdin -dump -force_html'
endif

mimetype ?t application/json json

set pipe-application/pdf='?&=? \e
  trap "rm -f \e"${MAILX_FILENAME_TEMPORARY}\e"" EXIT;\e
  trap "trap \e"\e" INT QUIT TERM; exit 1" INT QUIT TERM;\e
  mupdf "${MAILX_FILENAME_TEMPORARY}"'

define showhtml {
  \elocal set mime-alternative-favour-rich pipe-text/html=?h?
  \etype "$@"
}
\ecommandalias html \e\ecall showhtml
.Ed
.\" }}}
.
.\" .Ss "Mailing lists" {{{
.Ss "Mailing lists"
.
Mailing lists can be flagged in the summary of
.Ic headers
.Pf ( Va headline :
.Ql %L ) ,
and gain special treatment when sending mails:
.Va followup-to-honour
ensures
.Ql Mail-\:Followup-\:To:
headers are honoured when replying
.Pf ( Ic reply ,
.Ic followup ,
.Ic Lreply ,
.Ic Lfollowup ) ,
and
.Va followup-to
creates this header when
.Ic mail Ns
ing messages with a proper user setup
.Pf ( Va from , sender ) ;
it may be created automatically, for example when list-replying via
.Ic Lreply
or
.Ic Lfollowup ,
when
.Ic followup
or
.Ic reply
is used and
.Ql Mail-Followup-To:
is honoured etc.
.
.Pp
.Ic mlist
and
.Ic mlsubscribe
manage the correlation of email addresses and mailing lists.
With the \*(oPal regular expression support addresses
.Mx -ix "magic regular expression characters"
which contain any of the magic regular expression characters
.Ql ( ^[*+?|$ ;
see
.Xr re_format 7
or
.Xr regex 7 ,
dependent on host system)
can then match many addresses.
It is not possible to escape the
.Dq magic :
in order to match special characters as-is, bracket expressions must be
used, for example
.Ql Ic search Li @subject@'[[]open bracket' .
.
.Bd -literal -offset indent
set followup-to followup-to-honour=ask-yes \e
    reply-to-honour=ask-yes
mlist a1@b1.c1 a2@b2.c2 '.*@lists\e.c3$'
mlsubscribe a4@b4.c4 exact@lists.c3
.Ed
.
.Pp
Known and subscribed lists differ in that for the latter user
addresses are not included in generated
.Ql Mail-Followup-To: .
There are exceptions, for example if multiple lists are addressed and
not all have the subscription attribute.
When replying to a message its list address
.Pf ( Ql List-Post:
header) is temporarily treated like a known
.Ic mlist ;
dependent on
.Va reply-to-honour
an existing
.Ql Reply-To:
is used instead (if it is a single address on the same domain as
.Ql List-Post: )
in order to accept a list administrator's wish that is supposed to have
been manifested like that.
.
.Pp
For convenience and compatibility with mail programs that do not honour
the non-standard M-F-T an automatic user entry in
.Ql Cc:
can be created via
.Va followup-to-add-cc
whenever the user is placed in
.Ql Mail-Followup-To: ,
but is not a regular recipient of the message.
.Va reply-to-swap-in
tries to deal with the address rewriting that many mailing-lists nowadays
perform to work around DMARC etc. standard imposed problems.
.\" }}}
.
.\" .Ss "Character sets" {{{
.Ss "Character sets"
.
\*(OP The user's locale is detected by looking at the
.Ev LC_ALL
(see also
.Ev LC_CTYPE , LANG )
.Sx ENVIRONMENT
variable, deriving and storing the according character set in
.Va charset-locale
and
.Va ttycharset :
the latter character set is targeted when displaying data,
and any user input data is by default expected to be in it, too.
.
.Pp
When creating messages character input data is inspected.
7-bit clean data is classified as
.Va charset-7bit .
\*(OPally 8-bit data is classified as
.Va ttycharset
unless
.Va ttycharset-detect Ns
ion was enabled, and will be converted repeatedly into members of
.Va sendcharsets
until a character set conversion succeeds;
.Va charset-8bit
is the implied last member of this list.
If no member of
.Va sendcharsets
is capable to represent the
.Va ttycharset
(or
.Va ttycharset-detect )
data, no message will be sent, and its text will optionally be
.Va save Ns d
in
.Ev DEAD .
However, sending of non-convertible data as
.Ql application/octet-stream
binary content can be forced with
.Va mime-force-sendout :
like this recipients still have the option to inspect message content
(for example via
.Va mime-counter-evidence ) .
.
.Pp
If the \*(oPal character set conversion is not available
.Pf ( Va features
misses
.Ql ,+iconv, ,
or
.Va iconv-disable
.Ic set ) ,
.Va ttycharset
(or
.Va ttycharset-detect )
is the only supported character set for non 7-bit clean data, and
it is simply assumed it can be used to exchange 8-bit messages.
.
.Pp
.Va ttycharset
may also be given an explicit value to send mail in a completely
.Dq faked
locale, for example generate and send 8-bit UTF-8 input data
in a pure 7-bit US-ASCII
.Ql LC_ALL=C
.Sx ENVIRONMENT
(as shown in
.Sx "On sending mail, and non-interactive mode" ) .
Unfortunate: due to lack of programming interfaces reading mail will not
truly work here: whereas
.Va ttycharset
might be addressable, any output will be made safely printable, as via
.Ic vexpr
.Cm makeprint ,
according to the actual locale, which is not affected by
.Va ttycharset.
.
.Pp
Classifying 7-bit clean data as
.Va charset-7bit
is a problem if the input character set
.Pf ( Va ttycharset , ttycharset-detect )
is a multibyte character set that is itself 7-bit clean.
For example, the Japanese character set ISO-2022-JP is, but is capable
to encode the rich set of Japanese Kanji, Hiragana and Katakana
characters: in order to notify recipients of this character set the mail
message must be MIME encoded so that the character set ISO-2022-JP can
be advertised, otherwise an invalid email message would result!
To achieve this, the variable
.Va charset-7bit
can be set to ISO-2022-JP.
(Today a better approach regarding email is the usage of UTF-8, which
uses 8-bit bytes for non-US-ASCII data.)
.
.Pp
When replying to a message and
.Va reply-in-same-charset
is set the character set of the message being replied to is tried first
as a target character set (still being a subject of
.Ic charsetalias
filtering, however).
Another opportunity is
.Va sendcharsets-else-ttycharset
to reflect the user's locale automatically, it will treat
.Va ttycharset
as an implied member of (an unset)
.Va sendcharsets .
.
.Pp
\*(OP When reading messages, text data is converted into
.Va ttycharset
as necessary.
Unprintable characters and invalid byte sequences are detected
and replaced by substitution characters.
Character set mappings for source character sets can be established with
.Ic charsetalias ,
which may be handy to work around faulty or incomplete character set
catalogues (one could for example add a missing LATIN1 to ISO-8859-1
mapping), or to enforce treatment of one character set as another one
.Pf ( Dq interpret LATIN1 as CP1252 ) .
Also see
.Va charset-unknown-8bit
for another hairy aspect of message interpretation.
.
.Pp
In general, if a message saying
.Dq cannot convert from a to b
appears, either some characters are not appropriate for the currently
selected (terminal) character set,
or the needed conversion is not supported by the system.
In the first case, it is necessary to set an appropriate
.Ev LC_ALL
locale and/or the variable
.Va ttycharset .
The best results are usually achieved when running in a UTF-8
locale on a UTF-8 capable terminal, in which case the full Unicode
spectrum of characters is available.
In this setup characters from various countries can be displayed, only
restricted by the used font, while it is still possible to use more
simple character sets for sending to retain maximum compatibility with
older mail clients.
.
.Pp
On the other hand the \*(PO standard defines a locale-independent 7-bit
.Dq portable character set
that should be used when overall portability is an issue, the even more
restricted subset named
.Dq portable filename character set
consists of A-Z, a-z, 0-9, period
.Ql \&. ,
underscore
.Ql _
and hyphen-minus
.Ql - .
.\" }}}
.
.\" .Ss "Message states" {{{
.Ss "Message states"
.
Several message states are distinguished.
The state of a message is shown by its
.Va headline
in the summary of
.Ic headers ,
and
.Sx "Specifying messages"
by their state is possible.
.
.Bl -hang -width ".It Ql new"
.It Ql new
Neither read nor moved to another state.
Retained even in a
.Mx -sx
.Sx "primary system mailbox" .
.
.It Ql unread
Neither read nor moved to another state, but already present when the
.Ic folder
was opened.
Retained even in a
.Mx -sx
.Sx "primary system mailbox" .
.
.It Ql read
Processed by one of
.Ic ~f , ~m , ~F , ~M ,
.Ic copy , mbox , More , more , next , pipe , Print , print , \
  top , Type , type , undelete .
.Ic dp
and
.Ic dt
try to automatically
.Dq step
and
.Ic type
the
.Dq next
logical message, and may thus mark multiple messages as read,
.Ic delete
will do so if the internal variable
.Va autoprint
is set.
.Pp
Except when left via
.Ic exit ,
.Ql read
messages of a
.Mx -sx
.Sx "primary system mailbox"
are saved to the
.Mx -sx
.Sx "secondary mailbox"
.Ev MBOX
unless
.Va hold
it set.
.
.It Ql deleted
Processed by one of
.Ic delete ,
.Ic dp
and
.Ic dt .
It may be
.Ic undelete Ns
d, but other than that disappeared.
.
.It Ql preserved
Marked via
.Ic hold
or
.Ic preserve ,
and will be retained.
.
.It Ql saved
Processed by
.Ic save
or
.Ic write .
Except when left via
.Ic exit ,
.Ql saved
messages of a
.Mx -sx
.Sx "primary system mailbox"
are deleted; they are instead saved to the
.Mx -sx
.Sx "secondary mailbox"
.Ev MBOX
if
.Va keepsave
is set.
.El
.
.Pp
In addition to these states, otherwise meaningless flags that may
be set exist; they are addressable when
.Sx "Specifying messages" .
They are persistently saved with messages, and are portable between
a set of widely used MUAs:
.
.Bl -hang -width ".It Ic answered"
.It Ic answered
Mark as having been answered.
.It Ic draft
Mark as being a draft.
.It Ic flag
Mark for special attention.
.El
.\" }}}
.
.\" .Ss "Specifying messages" {{{
.Ss "Specifying messages"
.
\*(NQ Some
.Sx COMMANDS
take
.Sx "Message list arguments" ,
for example
.Ic copy ,
.Ic delete ,
.Ic search ,
and
.Ic type ,
and can perform actions on a number of messages at once.
.
.Pp
For example,
.Ql delete 1 2
deletes the messages 1 and 2 (validity presumed), whereas
.Ql delete 1-5
will delete messages 1 through 5.
In sorted mode
.Pf ( Ic sort ,
.Va autosort )
.Ql delete 1-5
will delete all messages that are located in between (and including)
messages 1 through 5 in the sorted order, as shown by
.Ic headers .
.
.Pp
Errors that occur are tracked by the
.Sx "INTERNAL VARIABLES"
.Va \&! ,
.Va ^ERR
and companions, as well as the command exit status
.Va \&? .
For example
.Va ^ERR Ns -BADMSG
when requesting an invalid message,
.Va ^ERR Ns -NOMSG
if no applicable message can be found,
.Va ^ERR Ns -CANCELED
for missing informational data (mostly thread-related).
.Va ^ERR Ns -INVAL
for invalid syntax as well as
.Va ^ERR Ns -IO
for input/output errors can happen.
.
.
.Bl -tag -width ".It Ar BaNg"
.It Ar \&.
The current message, the so-called
.Dq dot .
Many commands use it if no specification was given.
.
.It Ar \&;
The previously current message; needs to be quoted.
.
.It Ar \&,
The dot's parent message.
This is the message with the Message-ID given in the
.Ql In-Reply-To:
field, or the last entry of the
.Ql References:
field of the current message.
.
.It Ar -
The previous undeleted message, or the previous deleted one for
.Ic undelete .
In
.Ic sort Ns
ed mode, the previous such message in the according order.
.
.It Ar +
The next undeleted message, or the next deleted one for
.Ic undelete .
In
.Ic sort Ns
ed mode, the next such message in the according order.
.
.It Ar ^
The first undeleted message, or the first deleted one for
.Ic undelete .
In
.Ic sort Ns
ed mode, the first such message in the according order.
.
.It Ar $
The last message.
In
.Ic sort Ns
ed mode, the last such one in the according order.
Needs to be quoted.
.
.It Ar & Ns Op Ar x
Selects the message addressed with
.Ar x
in threaded
.Ic sort
mode, where
.Ar x
is any other message specification,
and all messages from the thread that begins at it.
Otherwise identical to
.Ar x .
Omitting
.Ar x
equals using dot.
.
.It Ar *
All messages.
.
.It Ar `
All messages matched by the
.Sx "Message list arguments"
of the previous command.
(Tip: to read all new messages
.Ql search :n
them, then successively type
.Ql `
to invoke the default command
.Ic next ;
.Va showlast
must be set for this to work.)
.
.It Ar x-y
An inclusive range of message numbers.
Selectors that may also be used as endpoints include any of
.Ql .;-+^$ .
.
.It Ar address
Case-insensitive
.Dq any substring matches
search for
.Ql From:
fields.
It matches addresses even if
.Va showname
is set (and \*(PO says
.Dq any address shown in a header summary shall be matchable in this form ) ;
However, if the
.Va allnet
variable is set, only the local part of the address is evaluated,
not ignoring case, and
.Va showname
is completely ignored.
For finer control and match boundaries, and substrings starting with
numbers, instead use
.Ql @ .
.
.It Ar / Ns Ar string
All messages that contain
.Ar string
in the subject field (case ignored according to locale).
Also see
.Va searchheaders .
An empty
.Ar string
equals the last one used by this specification.
.
.
.It Xo Op Ar @ Ns Ar name-list Ns
.Ar @ Ns Ar expr
.Xc
A case-insensitive search
.Ar expr Ns
ession.
If
.Ar expr
contains a commercial at
.Ql @
.Ar name-list
is effectively non-optional, but can be empty.
.Ar name-list
specifies a comma-separated list of header fields, without it only the
.Ql Subject:
is searched.
\*(OP
.Ar expr
and
.Ar name-list
are interpreted as extended regular expressions if they contain
.Mx -sx
.Sx "magic regular expression characters" .
.
.Pp
An empty search
.Ar expr Ns
ession tests for existence of the given header fields (compare
.Ic digmsg ) .
Some header fields may be abbreviated:
.Ql a ,
.Ql f ,
.Ql t ,
.Ql c ,
.Ql b
and
.Ql s
will match
.Ql Author: ,
.Ql From: ,
.Ql To: ,
.Ql Cc: ,
.Ql Bcc:
and
.Ql Subject: ,
respectively, and case-insensitively.
But for the existence test
.Ql Author
indeed means all of
.Ql Author: ,
.Ql From: ,
and
.Ql Sender: .
.
.Pp
The special header fields
.Ql header
or
.Ql <
can be used to search in (all of) the header(s), and
.Ql body
or
.Ql >
and
.Ql text
or
.Ql =
will perform full text searches \(en whereas the former searches only
the body, the latter also searches the message header (\*(ID this mode
yet brute force searches over the entire decoded content of messages,
including administrativa strings).
.
.Pp
Even with regular expression support it is almost impossible to safely
match only a specific address domain.
To match only email addresses (skinned from name and comment parts, see
.Ic addrcodec )
of address headers (the mentioned
.Ql a ,
.Ql f ,
.Ql t ,
.Ql c ,
.Ql b )
against
.Ar expr ,
prefix
.Ar name-list
with a tilde
.Ql ~ :
.
.Pp
.Dl @~f,c@@a\e.safe\e.domain\e.match$
.
.
.It Ar :c
All messages of state or with matching condition
.Ql c ,
where
.Ql c
is one or multiple of the following colon modifiers:
.Pp
.Bl -tag -compact -width ".It Ar :M"
.It Ar a
.Ic answered
messages
.Pf ( Va markanswered ) .
.It Ar d
.Ql deleted
messages (only for
.Ic undelete
and
.Ic from ) .
.It Ar f
.Ic flag Ns
ged messages.
.It Ar L
Messages with recipients that match
.Ic mlsubscribe Ns
d addresses.
.It Ar l
Messages with recipients that match
.Ic mlist Ns
ed addresses.
.It Ar N
.Ql newest
messages, for example joined in via
.Ic newmail .
.It Ar n
.Ql new
messages.
.It Ar o
Old messages (any not in state
.Ql read
or
.Ql new ) .
.It Ar r
.Ql read
messages.
.It Ar S
\*(OP Messages with unsure spam classification (see
.Sx "Handling spam" ) .
.It Ar s
\*(OP Messages classified as spam.
.It Ar t
Messages marked as
.Ic draft .
.It Ar u
.Ql unread
messages.
.El
.El
.
.
.Pp
\*(OP IMAP-style SEARCH expressions may be used.
These consist of keywords and criterions, and because
.Sx "Message list arguments"
are split into tokens according to
.Sx "Shell-style argument quoting"
it is necessary to quote the entire IMAP search expression in order to
ensure that it remains a single token.
.
.Pp
This addressing mode is available with all types of mailbox
.Ic folder Ns
s, a local search is performed as necessary.
Strings must be enclosed by double quotation marks
.Ql \&"
in their entirety if they contain whitespace or parentheses;
within the quotes, only reverse solidus
.Ql \e
is recognized as an escape character.
All string searches are case-insensitive.
When the description indicates that the
.Dq envelope
representation of an address field is used,
it means the search string is checked against both a list constructed as
.
.Bd -literal -offset indent
\&'(\*qname\*q \*qsource\*q \*qlocal-part\*q \*qdomain-part\*q)'
.Ed
.
.Pp
for each address,
and the addresses without real names from the respective header field.
These search expressions can be nested using parentheses, see below for
examples.
.
.Pp
.Bl -tag -compact -width ".It Ar _n_u"
.It Ar ( criterion )
All messages that satisfy the given
.Ar criterion .
.It Ar ( criterion1 criterion2 ... criterionN )
All messages that satisfy all of the given criteria.
.
.It Ar ( or criterion1 criterion2 )
All messages that satisfy any of
.Ar criterion1
or
.Ar criterion2 .
To connect more than two criteria using
.Ql or
specifications have to be nested using additional parentheses,
as with
.Ql (or a (or b c)) ,
since
.Ql (or a b c)
really means
.Ql ((a or b) and c) .
For a simple
.Ql or
operation of independent criteria on the lowest nesting level,
it is possible to achieve similar effects by using three separate
criteria, as with
.Ql (a) (b) (c) .
.
.It Ar ( not criterion )
All messages that do not satisfy
.Ar criterion .
.It Ar ( bcc \*q Ns Ar string Ns Ar \*q ) , \
    ( cc \*q Ns Ar string Ns Ar \*q ) , \
    ( from \*q Ns Ar string Ns Ar \*q ) , \
    ( subject \*q Ns Ar string Ns Ar \*q ) , \
    ( to \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the given header field.
.It Ar ( header name \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the
.Ql name:
field.
.It Ar ( body \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their body.
.It Ar ( text \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their header or body.
.It Ar ( larger size ) , ( smaller size )
All messages that are larger/smaller than
.Ar size
(in bytes).
.
.It Ar ( before date ) , ( on date ) , ( since date ) , \
    ( sentbefore date ) , ( senton date ) , ( sentsince date )
All messages received/sent before/on/since
.Ar date ,
which must be in the form
.Ql d[d]-mon-yyyy ,
where
.Ql d
denotes the day of the month as one or two digits,
.Ql mon
is the name of the month \(en one of
.Ql Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ,
and
.Ql yyyy
is the year as four digits, for example
.Ql 28-Dec-2012 .
.It Ar ()
The same criterion as for the previous search.
This specification cannot be used as part of another criterion.
If the previous command line contained more than one independent
criterion then the last of those criteria is used.
.El
.\" }}}
.
.\" .Ss "On terminal control and line editor" {{{
.Ss "On terminal control and line editor"
.
\*(OP Terminal control depends on the standard
.Ux
libraries
.Lb libtermcap
or
.Lb libterminfo ,
and enhances or enables interactive usage aspects, like
.Sx "Coloured display" ,
.Mx -ix MLE
and understanding of cursor and function keys for the Mailx-Line-Editor
MLE for the
.Ev TERM Ns
inal found in the
.Sx ENVIRONMENT .
Library interaction can be disabled via
.Va termcap-disable ,
whereas
.Va termcap
is always inspected to learn about terminal capabilities.
.
.Pp
\*(OP The built-in Mailx-Line-Editor (MLE) should work in all
environments which comply to the ISO C standard
.St -isoC-amd1 ,
and supports wide glyphs if possible (necessary functionality was
removed from ISO C, but is included in
.St -xpg4 ) .
It offers some
.Ic colour
support, and is tunable to an extend via
.Va line-editor-config .
Especially without terminal control some keys may be problematic,
corrections via
.Va termcap
help \(en an example is shown in the
.Sx FAQ
entry
.Sx "Not \(dqdefunctional\(dq, but the editor key does not work" .
.Va line-editor-disable
controls usage of the line editor.
.
.Pp
\*(OP Input from line editor prompts can be saved in a list of
searchable and expandable
.Ic history
entries; Any amount of leading whitespace prevents this saving.
Aspects of history like size and persistancy can be configured via
.Va history-file ,
.Va history-gabby ,
.Va history-gabby-persist
and
.Va history-size ;
the
.Mx -sx
.Sx Macro
hook
.Va on-history-addition
allows fine-grained control.
.
.Pp
The MLE supports a set of editing and control commands.
By default (as) many (as possible) of these will be assigned to a set of
single-letter control codes.
These should work on any terminal, and can be generated by holding the
.Dq control
key while simultaneously pressing the key of desire, for example
.Ql control-D .
.
.Pp
\*(OP Custom key
.Ic bind Ns
ings that map MLE or other commands to key sequences can be established.
If so, the MLE will itself use
.Ic bind
to install the built-in set from above, plus, unless prevented via
.Va line-editor-no-defaults .
.
.Pp
In the following list keys are shown via
.Sx "Shell-style argument quoting"
and MLE command names in parenthesis.
.
.
.Pp
.Bl -tag -compact -width ".It Ql \eBa"
.It Ql \ecA
Go to the start of the line
.Mx
.Pf ( Cd mle-go-home ) .
.
.It Ql \ecB
Move the cursor backward one character
.Mx
.Pf ( Cd mle-go-bwd ) .
.
.It Ql \ecC
.Xr raise 3
.Ql SIGINT
.Mx
.Pf ( Cd mle-raise-int ) .
.
.It Ql \ecD
Forward delete the character under the cursor;
.Ic quit Ns
s if used on an empty line unless
.Va ignoreeof
is set
.Mx
.Pf ( Cd mle-del-fwd ) .
.
.It Ql \ecE
Go to the end of the line
.Mx
.Pf ( Cd mle-go-end ) .
.
.It Ql \ecF
Move the cursor forward one character
.Mx
.Pf ( Cd mle-go-fwd ) .
.
.It Ql \ecG
Cancel current operation, full reset.
An active history search or tabulator expansion is reset first,
restoring former line content: a second invocation is needed for a
full reset, then.
.Mx
.Pf ( Cd mle-reset ) .
.
.It Ql \ecH
Backspace: backward delete one character
.Mx
.Pf ( Cd mle-del-bwd ) .
.
.It Ql \ecI
\*(NQ Horizontal tabulator:
try to expand the word before the cursor, supporting the usual
.Sx "Filename transformations"
.Mx
.Pf ( Cd mle-complete ;
affected by
.Cd mle-quote-rndtrip
and
.Va line-editor-cpl-word-breaks ) .
.
.It Ql \ecJ
Newline: complete input line
.Mx
.Pf ( Cd mle-commit ) .
.
.It Ql \ecK
Cut all characters from the cursor to the end of the line
.Mx
.Pf ( Cd mle-snarf-end ) .
.
.It Ql \ecL
Repaint the line
.Mx
.Pf ( Cd mle-repaint ) .
.
.It Ql \ecN
\*(OP Go to the next history entry
.Mx
.Pf ( Cd mle-hist-fwd ) .
.
.It Ql \ecO
(\*(OPally context-dependent) Invokes the command
.Ic dt .
.
.It Ql \ecP
\*(OP Go to the previous history entry
.Mx
.Pf ( Cd mle-hist-bwd ) .
.
.It Ql \ecQ
Toggle roundtrip mode shell quotes, where produced, on and off
.Mx
.Pf ( Cd mle-quote-rndtrip ) .
The default is configurable via
.Va line-editor-config ;
also see
.Ic shcodec .
.
.It Ql \ecR
\*(OP Complete line content from (the remaining) older history entries
.Mx
.Pf ( Cd mle-hist-srch-bwd ) .
Search behaviour is configurable via
.Va line-editor-config .
.
.It Ql \ecS
\*(OP Complete line content from (the remaining) newer history entries
.Mx
.Pf ( Cd mle-hist-srch-fwd ) .
Search behaviour is configurable via
.Va line-editor-config .
.
.It Ql \ecT
Paste the snarf buffer
.Mx
.Pf ( Cd mle-paste ) .
.
.It Ql \ecU
The same as
.Ql \ecA
followed by
.Ql \ecK
.Mx
.Pf ( Cd mle-snarf-line ) .
.
.It Ql \ecV
Prompts for a Unicode character (hexadecimal number without prefix, see
.Mx -sx
.Sx "number syntax rules" )
to be inserted
.Mx
.Pf ( Cd mle-prompt-char ) .
Note this needs to be assigned to a single-letter control code
in order to become recognized and executed during input of a key-sequence
(only three single-letter control codes can be used for that shortcut
purpose); this control code is special-treated, then, and cannot be part
of any other sequence (because it will trigger the
.Cd \&\&mle-prompt-char
function immediately).
.
.It Ql \ecW
Cut the characters from the one preceding the cursor to the preceding
word boundary
.Mx
.Pf ( Cd mle-snarf-word-bwd ) .
.
.It Ql \ecX
Move the cursor forward one word boundary
.Mx
.Pf ( Cd mle-go-word-fwd ) .
.
.It Ql \ecY
Move the cursor backward one word boundary
.Mx
.Pf ( Cd mle-go-word-bwd ) .
.
.It Ql \ecZ
.Xr raise 3
.Ql SIGTSTP
.Mx
.Pf ( Cd mle-raise-tstp ) .
.
.It Ql \ec[
Escape: reset a possibly used multi-byte character input state machine
and \*(oPally a lingering, incomplete key binding
.Mx
.Pf ( Cd mle-cancel ) .
Note this needs to be assigned to a single-letter control code
in order to become recognized and executed during input of a key-sequence
(only three single-letter control codes can be used for that shortcut
purpose).
The control code may also be part of a multi-byte sequence, but if
a sequence is active and the very control code is currently also an
expected input, then the active sequence takes precedence and will
consume the control code.
.
.It Ql \ec\e
(\*(OPally context-dependent) Invokes the command
.Ql Ic z Ns + .
.
.It Ql \ec]
(\*(OPally context-dependent) Invokes the command
.Ql Ic z Ns $ .
.
.It Ql \ec^
(\*(OPally context-dependent) Invokes the command
.Ql Ic z Ns 0 .
.
.It Ql \ec_
Cut the characters from the one after the cursor to the succeeding word
boundary
.Mx
.Pf ( Cd mle-snarf-word-fwd ) .
.
.It Ql \ec?
Backspace:
.Cd mle-del-bwd .
.
.It \(en
.Mx
.Cd mle-bell :
ring the audible bell.
.
.It \(en
\*(OP
.Mx
.Cd mle-clear-screen :
move the cursor home and clear the screen.
.
.It \(en
.Mx
.Cd mle-fullreset :
different to
.Cd mle-reset
this will immediately reset a possibly active search etc.
.
.It \(en
.Mx
.Cd mle-go-screen-bwd :
move the cursor backward one screen width.
.
.It \(en
.Mx
.Cd mle-go-screen-fwd :
move the cursor forward one screen width.
.
.It \(en
.Mx
.Cd mle-raise-quit:
.Xr raise 3
.Ql SIGQUIT .
.El
.\" }}}
.
.\" .Ss "Coloured display" {{{ review
.Ss "Coloured display"
.
\*(OP Colours and font attributes through ANSI aka ISO 6429 SGR
(select graphic rendition) escape sequences solely depend upon
capabilities of the
.Ev TERM Ns
inal (see
.Sx "On terminal control and line editor" ) ,
and are configurable via
.Ic colour
and
.Ic uncolour .
It may be necessary to pass special command line options to make the
.Ev PAGER
interpret the escape sequences correctly.
.Va colour-disable
controls usage of established colour mappings.
.
.Pp
Colour setup could be conditionalized on interactive mode via
.Ic if
.Pf ( Ql terminal
indeed means
.Dq interactive ) :
.
.Bd -literal -offset indent
if terminal && "$features" =% ,+colour,
  colour iso view-msginfo ft=bold,fg=green
  colour iso view-header ft=bold,fg=red (from|subject) # regex
  colour iso view-header fg=red

  uncolour iso view-header from,subject
  colour iso view-header ft=bold,fg=magenta,bg=cyan
  colour 256 view-header ft=bold,fg=208,bg=230 "subject,from"
  colour mono view-header ft=bold
  colour mono view-header ft=bold,ft=reverse subject,from
endif
.Ed
.\" }}}
.
.\" .Ss "Signed and encrypted messages with S/MIME" {{{
.Ss "Signed and encrypted messages with S/MIME"
.
\*(OP S/MIME provides two central mechanisms:
message signing and message encryption.
Signing allows recipients to verify the message sender,
and message encryption provides end-to-end security that reveals
the clear text of a message only to the sender and the recipient.
.
.Pp
A message is signed with a private key.
This adds some data to the regular content which can be used to verify
it was sent using a valid certificate, that the sender address is
covered by the certificate, and that the content has not been altered.
A signed message is received as clear text and can be handled without
restrictions.
.
.Pp
Encryption, in contrast, uses a public encryption key to make the
message text invisible for all people except those who have access to
a secret decryption key.
The public encryption key must have been retrieved by other means,
for example from previous communication, from securely visited web
sites, from public key directories, etc.
Because of the publicity messages should be signed before they become
encrypted.
.
.Pp
A central concept of S/MIME are certification authorities (CAs).
These are trusted institutions which issue certificates that correlate
a user's private decryption and signing key (and its public variant)
with the CA's own by means of a certificate request.
This makes it cryptographically possible to verify the key correlation
of a CA and a user:
verification will succeed if a CA certificate is found that is a(n
in)direct signer of (a) presented user certificate(s).
.
.Pp
A set of CA certificates is usually available from the distributor of
the operating system, or comes shipped with the used cryptographical
library: reasonable security for S/MIME on the Internet is provided if
the source that provides the set is trusted.
A certificate cannot be more secure than the method its CA certificate
has been retrieved with.
A personal set of trusted certificates can be specified via
.Va smime-ca-file
and/or (with special preparation)
.Va smime-ca-dir .
Setting
.Va smime-ca-no-defaults
disables (additional) usage of the default certificate set.
.
.Pp
The set of CA certificates is used by the command
.Ic verify
to ensure the given S/MIME message(s) can be trusted.
If so, verified sender certificates that were embedded in signed
messages can be saved locally with
.Ic certsave ,
and henceforth be used to encrypt further communication:
.
.Bd -literal -offset indent
certsave FILENAME
\*(IX
set smime-encrypt-USER@HOST=FILENAME \e
    smime-cipher-USER@HOST=AES256
.Ed
.
.Pp
To sign outgoing messages a personal S/MIME certificate is required.
.Sx "S/MIME step by step"
shows examplarily how a personal S/MIME certificate can be obtained.
In general, if the private key plus certificate
.Dq pair
is available, all that needs to be done is to set some variables,
in particular
.Va smime-sign-cert :
.
.Bd -literal -offset indent
set smime-sign-cert=myname@exam.ple.paired \e
    smime-sign-digest=SHA512 \e
    smime-sign from=myname@exam.ple
.Ed
.
.Pp
Variables of interest for S/MIME in general are
.Va smime-ca-dir ,
.Va smime-ca-file ,
.Va smime-ca-flags ,
.Va smime-ca-no-defaults ,
.Va smime-crl-dir ,
.Va smime-crl-file .
For S/MIME signing of interest are
.Va smime-sign ,
.Va smime-sign-cert ,
.Va smime-sign-include-certs
and
.Va smime-sign-digest .
Additional variables of interest for S/MIME en- and
.Ic decrypt Ns
ion:
.Va smime-cipher
and
.Va smime-encrypt-USER@HOST .
Variables of secondary interest may be
.Va content-description-smime-message
and
.Va content-description-smime-signature .
S/MIME is available if
.Ql ,+smime,
is included in
.Va features .
.
.Pp
\*(ID Note that neither S/MIME signing nor encryption applies to
message subjects or other header fields yet.
Thus they may not contain sensitive information for encrypted messages,
and cannot be trusted even if the message content has been verified.
When sending signed messages,
it is recommended to repeat any important header information in the
message text.
.\" }}}
.
.\" .Ss "On URL syntax and credential lookup" {{{
.Ss "On URL syntax and credential lookup"
.
For accessing protocol-specific resources Uniform Resource Locators
(URL, RFC 3986) have become omnipresent.
Here they are expected in a
.Dq normalized
variant that is not used in data exchange, but only meant as a compact,
easy-to-use way of defining and representing information in a well-known
notation; as such they do not conform to any real standard.
Optional parts in brackets
.Ql []
are optional either because other ways exist to define the information,
or because the part is protocol specific.
.Ql /path
for example is used by \*(oPal
.Mx -sx
.Sx Maildir
.Ic folder Ns
s and IMAP, but not by POP3.
Note
.Ql USER
and
.Ql PASSWORD
within an URL must be URL percent encoded (RFC 3986), see
.Ic urlcodec .
.
.Pp
.Dl PROTOCOL://[USER[:PASSWORD]@]server[:port][/path]
.
.Pp
Often
.Sx "INTERNAL VARIABLES"
exist in
.Dq variable chains :
the plain
.Ql variable
as well as
.Ql variable-HOST
and
.Ql variable-USER@HOST .
If a port was specified
.Ql HOST
really means
.Ql server:port ,
not
.Ql server .
And this
.Ql USER
is never in URL percent encoded form.
For example, whether the hypothetical
.Ql smtp://hey%2Bhey\::\:\:wings%3Aof@a.dove
including user and password was used, or whether it was
.Ql smtp://a.dove
and they came from a different sources, to lookup the chain
.Va tls-config-pairs
first
.Ql tls-\:config-\:pairs-\:hey+hey\:@a.dove
is looked up, then
.Ql tls-\:config-pairs\-\:a.dove ,
then the plain variable at last.
.
.Pp
The logic to collect credentials (of an
.Ic account Ns )
is as follows:
.
.Bl -bullet
.It
A user is always required.
If no
.Ql USER
has been given in the URL
.Va user-HOST
and
.Va user
are looked up.
.Pp
\*(OP Thereafter, when allowed by
.Va netrc-lookup-HOST
or
.Va netrc-lookup ,
.Sx "The .netrc file"
(of
.Ev LOGNAME )
will be searched for an unambiguous (one possible match)
.Ql HOST
entry with a
.Ql login
name.
.Pp
If there is still no
.Ql USER
the verified, valid
.Ev LOGNAME
is used.
.
.It
Authentication: unless otherwise noted the chain
.Va PROTOCOL-auth-USER@HOST , PROTOCOL-auth-HOST , PROTOCOL-auth
is checked, falling back to a protocol-specific default as necessary.
.
.It
If no
.Ql PASSWORD
has been given in the URL, then if the
.Ql USER
has been found through the \*(oPal
.Va netrc-lookup ,
that may have also provided the password.
Otherwise the chain
.Va password-USER@HOST , password-HOST , password
is looked up.
.Pp
\*(OP Thereafter the (now complete) chain
.Va netrc-lookup-USER@HOST , netrc-lookup-HOST , netrc-lookup
is checked, if set the
.Ic netrc
cache is searched for a password only (multiple user accounts for
a single machine may exist as well as a fallback entry without user
but with a password).
.Pp
If at that point a password is required but not available, then in
interactive mode the user will be prompted.
.El
.
.Pp
.Sy Note:
S/MIME verification works relative to the values found in the
.Ql From:
(or
.Ql Sender: )
header field(s), therefore
.Va smime-sign , smime-sign-cert , smime-sign-include-certs
and
.Va smime-sign-digest
will not be looked up using above's
.Ql USER
and
.Ql HOST
chains, but instead use values from the message that is being worked on.
If no address matches
.Va from
is used.
In unusual cases multiple and different
.Ql USER
and
.Ql HOST
combinations may therefore be involved \(en on the other hand those
unusual cases become possible.
The usual case is as short as:
.
.Bd -literal -offset indent
set mta=smtp://USER:PASS@HOST smtp-config=-starttls \e
    smime-sign smime-sign-cert=+smime.pair \e
    from=myname@my.host
.Ed
.\" }}}
.
.\" .Ss "Encrypted network communication" {{{
.Ss "Encrypted network communication"
.
\*(OP SSL (Secure Sockets Layer) aka its successor TLS (Transport Layer
Security) are protocols which aid in securing communication by providing
a safely initiated and encrypted network connection.
As part of each connection setup a set of certificates will be exchanged
through which the identity of the network peer can be cryptographically
verified against a local set of trusted certificates.
If possible the TLS/SNI (ServerNameIndication) extension will be enabled
to allow servers fine-grained control over the presented certificates.
.
.Pp
A central concept of TLS are certification authorities (CAs).
These are trusted institutions which issue certificates that correlate
a partie's private key (and its public variant) with the CA's own by
means of a certificate request.
This makes it cryptographically possible to verify the key correlation
of a CA and a party:
verification will succeed if a CA certificate is found that is a(n
in)direct signer of (a) presented party certificate(s).
.
.Pp
A set of CA certificates is usually available from the distributor of
the operating system, or comes shipped with the used cryptographical
library: reasonable security for TLS on the Internet is provided if
the source that provides the set is trusted.
A certificate cannot be more secure than the method its CA certificate
has been retrieved with.
A personal set of trusted certificates can be specified via
.Va tls-ca-file
and/or (with special preparation)
.Va tls-ca-dir .
Setting
.Va tls-ca-no-defaults
disables (additional) usage of the default certificate set.
.
.Pp
For inspection or other purposes, the certificate of a server (as seen
when connecting to it) can be fetched with the command
.Ic tls
(port can usually be the protocol name, too, and
.Va tls-verify
is taken into account here):
.
.Bd -literal -offset indent
$ \*(xX -vX 'tls certchain SERVER-URL[:PORT]; x'
.Ed
.
.Pp
Server certificates can also be verified through their fingerprint,
eliminating the need for a local set of CA certificates:
a message digest will be calculated and compared against
.Va tls-fingerprint .
A digest (algorithm) can be configured via
.Va tls-fingerprint-digest ;
.Ic tls
can again be used:
.
.Bd -literal -offset indent
$ \*(xX -X 'set verbose; tls fingerprint SERVER-URL[:PORT]; x'
.Ed
.
.Pp
It depends on the protocol whether encrypted communication is available,
and which configuration steps have to be taken to enable it.
Some protocols, like POP3S, are implicitly encrypted, others, like
POP3, can upgrade a plain text connection if so requested.
For example, to use the
.Ql STLS
that POP3 offers
.Va pop3-use-starttls
needs to be set; here with a convenient
.Ic shortcut :
.
.Bd -literal -offset indent
shortcut encpop1 pop3s://pop1.exam.ple

shortcut encpop2 pop3://pop2.exam.ple
set pop3-use-starttls-pop2.exam.ple

set mta=smtps://smtp.exam.ple:465
# Automatically upgrades unless smtp-config=-starttls
set mta=smtp://smtp.exam.ple
.Ed
.
.Pp
TLS libraries try to provide safe defaults, plenty of knobs however
exist to adjust settings.
For example certificate verification can be fine-tuned via
.Va tls-ca-flags ,
and TLS configuration basics are accessible via
.Va tls-config-pairs ,
for example to control protocol versions or cipher lists.
Here an example that enforces only top-modern (as of 2022)
forward-secrecy ciphers:
.
.Bd -literal -offset indent
set tls-config-pairs='MinProtocol=TLSv1.2,\e
    CipherString=EECDH+AESGCM:EECDH+AES256:EDH+AESGCM:CHACHA20:\e
      !TLSv1'
.Ed
.
.Pp
The OpenSSL program
.Xr ciphers 1
should be referred to when creating a custom cipher list.
Variables of interest for TLS in general are
.Va tls-ca-dir ,
.Va tls-ca-file ,
.Va tls-ca-flags ,
.Va tls-ca-no-defaults ,
.Va tls-config-file ,
.Va tls-config-module ,
.Va tls-config-pairs ,
.Va tls-crl-dir ,
.Va tls-crl-file ,
.Va tls-rand-file
as well as
.Va tls-verify .
Also see
.Va tls-features .
TLS is available if
.Ql ,+tls,
is included in
.Va features .
.\" }}}
.
.\" .Ss "Handling spam" {{{
.Ss "Handling spam"
.
\*(OP Several
.Va spam-interface Ns
s for dealing with spam messages are configurable.
The volatile
.Ql is-spam
state of classified messages can appear in the
.Va attrlist
of their
.Va headline
in the summary of
.Ic headers ,
and
.Ql Ar :s
and
.Ql Ar :S
select them when
.Sx "Specifying messages" .
.
.Bl -bullet
.It
.Ic spamrate
rates the given messages and sets their
.Ql is-spam
flag accordingly.
If the spam interface offers spam scores these can be shown in
.Va headline
by using the format
.Ql %$ .
.It
.Ic spamham ,
.Ic spamspam
and
.Ic spamforget
interact with the Bayesian filter of the chosen interface.
.It
.Ic spamclear
and
.Ic spamset
simply set and clear, respectively, the mentioned volatile
.Ql is-spam
message flag, they do not interact with
.Va spam-interface .
.El
.
.Pp
The
.Xr spamassassin 1
based
.Va spam-interface
.Ql spamc
requires a running instance of the
.Xr spamd 1
server in order to function, started with the option
.Fl -allow-tell
shall Bayesian filter learning be possible.
.
.Bd -literal -offset indent
$ spamd -i localhost:2142 -i /tmp/.spamsock -d [-L] [-l]
$ spamd --listen=localhost:2142 --listen=/tmp/.spamsock \e
    --daemonize [--local] [--allow-tell]
.Ed
.
.Pp
Thereafter these interfaces can be used:
.
.Bd -literal -offset indent
$ \*(xX -Sspam-interface=spamc -Sspam-maxsize=500000 \e
    -Sspamc-command=/usr/local/bin/spamc \e
    -Sspamc-arguments="-U /tmp/.spamsock" -Sspamc-user=
# or
$ \*(xX -Sspam-interface=spamc -Sspam-maxsize=500000 \e
    -Sspamc-command=/usr/local/bin/spamc \e
    -Sspamc-arguments="-d localhost -p 2142" -Sspamc-user=
.Ed
.
.Pp
Using the generic filter approach allows usage of programs like
.Xr bogofilter 1 .
Here is an example that assumes the program in
.Ev PATH :
.
.Bd -literal -offset indent
$ \*(xX -Sspam-interface=filter -Sspam-maxsize=500000 \e
    -Sspamfilter-ham="bogofilter -n" \e
    -Sspamfilter-noham="bogofilter -N" \e
    -Sspamfilter-nospam="bogofilter -S" \e
    -Sspamfilter-rate="bogofilter -TTu 2>/dev/null" \e
    -Sspamfilter-spam="bogofilter -s" \e
    -Sspamfilter-rate-scanscore="1;^(.+)$"
.Ed
.
.Pp
Messages must be locally present for scoring or Bayesian filter training
purposes.
Spam can be checked automatically when switching to
.Ic folder Ns
s by setting a specialized form of
.Va on-mailbox-event .
.
.Bd -literal -offset indent
define spamdelhook {
  if $1 != open && $1 != newmail
    return
  end
  # Server side DCC
  spamset (header x-dcc-brand-metrics "bulk")
  # Server-side spamassassin(1)
  spamset (header x-spam-flag "YES")
  del :s # TODO we HAVE to be able to do `spamrate :u ! :sS'
  move :S +maybe-spam
  spamrate :u
  del :s
  move :S +maybe-spam
}
set on-mailbox-event-SOMEFOLDER=spamdelhook
.Ed
.
.Pp
See also
.Va spam-interface , spam-maxsize ,
.Va spamc-command , spamc-arguments , spamc-user ,
.Va spamfilter-ham , spamfilter-noham , spamfilter-nospam , \
  spamfilter-rate
and
.Va spamfilter-rate-scanscore .
.\" }}}
.
.\" }}} (DESCRIPTION)
.
.
.\" .Sh COMMANDS {{{
.Sh COMMANDS
.
.\" intro {{{
Input is read in lines.
An unquoted reverse solidus
.Ql \e
at the end of a line
.Dq escapes
the newline character: it is discarded and the next line of input is
used as a follow-up line, with all leading whitespace removed.
Once a line is completed, the whitespace characters
.Cm space , tabulator , newline
as well as those defined by
.Va ifs
are removed from both ends.
\*(OP Prepending any whitespace prevents addition to the
.Ic history .
.
.Pp
The line is then scanned for a command name, possibly prepended by
.Sx "Command modifiers" .
Names may be abbreviated: the first matching the given prefix is used.
A name may also be a
.Ic commandalias ,
it is then recursively expanded first;
such aliases cannot be abbreviated.
Once the command that shall be evaluated is known, the remains of the
line will be interpreted according to command-specific rules, most often
.Sx "Shell-style argument quoting" .
In interactive mode a command-less line (with optional arguments) invokes
.Ic next .
.
.Pp
This behaviour is different to the
.Ev SHELL ,
which is a programming language with syntactic elements of clearly
defined semantics, and therefore capable to sequentially expand and
evaluate individual elements of a line.
.Ql \&? set one=spoon two=$one
for example will never assign
.Ql spoon
to two, because it is the command
.Ic set
that performs the assignment, long after the expansion has happened.
.
.Pp
A list of all commands in lookup order that not always fits the
alphabetical one due to \*(PO standardized abbreviations is dumped by
.Ic list .
.Ic help
(alias:
.Ic \&? )
shows an abstract for its argument, as in
.Ql \&?t ,
short for
.Ql \&? type ;
both commands support a
.Va verbose
mode that prints argument types and some more information which applies;
a handy suggestion may thus be:
.
.Bd -literal -offset indent
define xverbose {
  \elocal set verbose; eval ignerr local pp "${@}";  \ereturn ${?}
}
commandalias xv '\ecall xverbose'
xv ? set
\*(IX
.Ed
.\" }}}
.
.\" .Ss "Command modifiers" {{{
.Ss "Command modifiers"
.
Modifiers adjust behaviour of argument processing and
.Sx Commands .
None to multiple may be prepended (case-insensitively) to a command,
the order of which is insignificant, except for scopes.
Expansions of
.Cm eval Ns
uation and
.Ic commandalias Ns
es may contain them.
Some modifiers apply to only specific
.Sx COMMANDS ,
as shown in
.Va verbose
.Ic list
mode.
.
.Pp
.Mx -ix scope
Up to three different scopes may apply to a command invocation, each either
.Cm local ,
.Cm our
or
.Cm global :
.Cm pp
for positional parameter processing (and during
.Cm eval Ns
uation),
.Cm vput
for result storage, and finally for the command and its side-effects
as such; commands with the sole purpose of creating result storage, like
.Ic read
or
.Ic readall ,
may have no
.Cm vput ,
but only command-scope.
.Dq Scope
may mean different things, please see
.Cm our .
.
.Pp
The following, most complicated possible example accesses the
.Cm global
positional parameter stack via
.Ic vpospar ,
stores the result in
.Cm our
variable
.Ql i2 ,
and creates a
.Cm local
temporary variable during argument option processing:
.
.Bd -literal -offset indent
define hi {
  local pp our vput global vpospar i$((i = 1 + 1)) quote
  xcall t "$@"
}
define t {
  echo args<$*> i2<$i2> i<$i>
}
vpospar set three four
call hi one two
\*(OUargs<one two> i2<three four> i<>
varshow i i2 *
\*(OU#unset: i
\*(OU#unset: i2
\*(OU#*='three four'
.Ed
.
.Bl -tag -width ".It Fl BaNgG"
.Mx
.It Cm \e
Reverse solidus prevents
.Ic commandalias
expansion (that may contain additional modifiers), for example
.Ql \eecho
always evaluates the
.Ic echo
command, even if such an alias exists.
Need not be whitespace-separated from other modifiers or command names.
.
.Mx
.It Cm eval
Repeatedly concatenate arguments, expanded according to
.Sx "Shell-style argument quoting" ,
thereafter separated by single space characters, as often as used.
A scope can be enforced via
.Cm pp .
.Bd -literal -offset indent
set i=hey j='$i'
echo '$j'
\*(OU$j
eval echo '$j'
\*(OU$i
eval eval echo '$j'
\*(OUhey

define xxx {
  ec "<$1>"
  shift; if $# -gt 0; \excall xxx "$@"; end
}
define yyy {
  eval "$@ ' ball"
}
call yyy '\ecall xxx' "b\e$'\et'u ' "
\*(IX
call xxx arg <b      u>
\*(IX
call xxx arg <ball>
\*(IX
.Ed
.
.Mx
.It Cm global
Select global scope (when supported).
.
.Mx
.It Cm ignerr
Ignore errors, and do neither
.Ic quit
the program with
.Va errexit
nor for the standardized exit cases of
.Va posix
mode.
.Va \&?
will contain the real exit status of the command regardless.
.
.Mx
.It Cm local
Select local scope (when supported).
For
.Ic set
and
.Ic unset
any change is reverted once the current scope is left.
For scope introducing commands like
.Ic call , call_if
and
.Ic xcall ,
but also for example
.Ic mail , reply
and all other
.Sx Commands
which enter
.Sx "Compose mode" ,
change localization applies to the newly created scope.
.Pp
.Sy Remarks:
whereas localized free-form user
.Sx "INTERNAL VARIABLES"
are only visible within the macro
.Pf ( Ic define , account )
in which they are declared, and
.Dq shadow
all other names, for
.Sx ENVIRONMENT
and
.Sx "Built-in variables"
.Cm local
effectively equals
.Cm our .
.
.Mx
.It Cm our
Select our scope (when supported): changes are visible in the current as
well as all scopes deeper in the
.Ic call
chain.
.Dq Current scope
usually means the body of the currently evaluated
.Mx -sx
.Sx Macro ,
but it extends until a different account is activated for
.Ic account ,
and some macros, notably
.Va on-mailbox-event Ns s ,
use their own specific notion, here it will be extended until the
.Ic folder
is left again.
.
.Mx
.It Cm pp
Use (and reset) previous scope modifier for any positional parameter
.Cm eval Ns
uation.
In the example the variable
.Ql j
will be created in
.Cm local
scope (with value 4).
.Bd -literal -offset indent
local set i=3
eval local pp echo hello \e$((j = $i + 1))
.Ed
.
.Mx
.It Cm u
\*(ID Does not yet implement any functionality.
When supported command arguments are interpreted as UTF-8 character
data, regardless of
.Va ttycharset
(aka
.Ev LC_ALL ) .
.
.Mx
.It Cm vput
When supported a (shell-expanded) variable name is expected as the first
command argument: the computation result will be stored in that variable
instead of the default location (usually written to standard output).
The name expansion is
.Cm pp
scoped; Uses (and resets) a previous scope modifier for the variable.
.Ql ? vput = msgno; echo $msgno .
.Pp
The name must comply to
.Ev SHELL
.Mx -ix "variable name rules"
variable name rules and consist only of upper- and lowercase characters,
digits, and the underscore; hyphen-minus may be used as a non-portable
extension, leading digits and hyphen-minus, as well as a trailing
hyphen-minus are not allowed.
Variables which are linked to the
.Sx ENVIRONMENT
may not use extensions.
.Sx "INTERNAL VARIABLES"
other than writable (non-boolean) value variables may not be used;
also storage may fail in that case nonetheless if content constraints
are not satisfied.
Any test or storage error causes failure, with
.Va \&!
set to
.Va ^ERR Ns -NOTSUP
and
.Va \&?
set to
.Ql -1 ,
but some commands deviate, then documented.
.
.Mx
.It Cm wysh
Can be used for some old and established commands to choose the new
.Sx "Shell-style argument quoting"
rules over the traditional
.Sx "Old-style argument quoting" .
This modifier is implied if
.Va v15-compat
is set to a non-empty value, which now is the default.
This modifier will first become a no-op, and later be removed.
.El
.\" }}}
.
.\" .Ss "Old-style argument quoting" v15-compat: rename Obsolete.. {{{
.Ss "Old-style argument quoting"
.
\*(ID This section documents the traditional and \*(PO standardized
style of quoting non-message list arguments to commands which expect
this type of arguments: whereas still used by the majority of such
commands, the new
.Sx "Shell-style argument quoting"
may be available even for those via
.Cm wysh .
Nonetheless care must be taken, because only new commands have been
designed with all the capabilities of the new quoting rules in mind,
which can, for example, generate control characters.
.
.
.Bl -bullet -offset indent
.It
An argument can be enclosed between paired double-quotes
.Ql """argument"""
or
single-quotes
.Ql 'argument' ;
any whitespace, shell word expansion, or reverse solidus characters
(except as described next) within the quotes are treated literally as
part of the argument.
A double-quote will be treated literally within single-quotes and vice
versa.
Inside such a quoted string the actually used quote character can be
used nonetheless by escaping it with a reverse solidus
.Ql \e ,
as in
.Ql """y\e""ou""" .
.
.It
An argument that is not enclosed in quotes, as above, can usually still
contain space characters if those spaces are reverse solidus escaped, as in
.Ql you\e are .
.
.It
A reverse solidus outside of the enclosing quotes is discarded
and the following character is treated literally as part of the argument.
.El
.\" }}}
.
.\" .Ss "Shell-style argument quoting" {{{
.Ss "Shell-style argument quoting"
.
.Ev SHELL Ns
-style, and therefore \*(PO standardized, argument parsing, expansion,
and quoting rules are used by most commands.
\*(ID Most new commands only support these new rules and are flagged
\*(NQ, some elder ones can use them via
.Cm wysh ;
in the future only this type of argument quoting will remain.
.
.Pp
The command line is parsed from left to right and an input token is
completed whenever an unquoted, otherwise ignored, metacharacter is seen.
Metacharacters are vertical bar
.Cm \&| ,
semicolon
.Cm \&; ,
as well as all characters from the variable
.Va ifs ,
and/or
.Cm space , tabulator , newline .
The additional
.Ev SHELL
metacharacters ampersand
.Cm & ,
left and right parenthesis
.Cm \&( , \&)
and less-than and greater-than signs
.Cm < , >
are treated as ordinary characters: they are either vivid parts of email
addresses or
.Sx "Filename transformations" .
Any unquoted number sign
.Ql #
that begins a new token starts a comment that extends to the end
of the line, and therefore ends argument processing.
An unquoted dollar sign
.Ql $
starts
.Sx "Shell-style expansions" .
.
.Bd -filled -offset indent
.Sy Compatibility note:
\*(ID Note that even many new-style commands do not yet honour
.Va ifs
to parse their arguments: whereas the
.Ev SHELL
is a language with syntactic elements of clearly defined semantics,
\*(Xx parses entire input lines and decides on a per-command base what
to do with the rest of the line.
This also means that whenever an unknown command is seen all that can be
done is cancellation of the processing of the remains of the line.
.Pp
It also often depends on an actual subcommand of a multiplexer command
how the rest of the line should be treated, and until v15 we are not
capable to perform this deep inspection of arguments.
Nonetheless, at least the following commands which work with positional
parameters fully support
.Va ifs
for an almost shell-compatible field splitting:
.Ic call , call_if , read , vpospar , xcall .
.Ed
.
.Pp
Whereas the metacharacters
.Cm space , tabulator , newline
only complete an input token, vertical bar
.Cm \&|
and semicolon
.Cm \&;
also act as control operators and perform control functions.
For now supported is semicolon
.Cm \&; ,
it terminates a single command, therefore sequencing the line,
and making the remainder of it subject to reevaluation.
With sequencing, multiple command argument types and quoting rules may
therefore apply to a single line, which can be problematic before v15
and without
.Va v15-compat ;
for example, the first of the following will cause surprising results:
.
.Pp
.Dl ? echo one; set verbose; echo verbose=$verbose.
.Dl ? echo one; wysh set verbose; echo verbose=$verbose.
.
.Pp
Quoting is a mechanism that removes the special meaning of
metacharacters and reserved words, and prevents expansion.
There are four quoting mechanisms: the escape character, single-quotes,
double-quotes and dollar-single-quotes:
.
.
.Bl -bullet -offset indent
.It
The literal value of any character can be preserved by preceding it
with the escape character reverse solidus
.Ql \e .
.
.It
Arguments which are enclosed in
.Ql 'single-\:quotes'
retain their literal value.
A single-quote cannot occur within single-quotes.
.
.It
The literal value of all characters enclosed in
.Ql \(dqdouble-\:quotes\(dq
is retained, with the exception of dollar sign
.Ql $
that causes
.Sx "Shell-style expansions" ,
backquote (grave accent)
.Ql `
(which not yet means anything special), reverse solidus
.Ql \e
that escapes any of the characters dollar sign
.Ql $ ,
backquote (grave accent)
.Ql ` ,
double-quote
.Ql \(dq
(to prevent ending the quote), and reverse solidus
.Ql \e
(to prevent escaping, that is, to embed a reverse solidus character
as-is), but has no special meaning otherwise.
.
.It
Arguments enclosed in
.Ql $'dollar-\:single-\:quotes'
extend normal single quotes in that reverse solidus escape sequences are
expanded as follows:
.Pp
.Bl -tag -compact -width ".Ql \eNNN"
.It Ql \ea
bell control character (ASCII and ISO-10646 BEL).
.It Ql \eb
backspace control character (ASCII and ISO-10646 BS).
.It Ql \eE
escape control character (ASCII and ISO-10646 ESC).
.It Ql \ee
the same.
.It Ql \ef
form feed control character (ASCII and ISO-10646 FF).
.It Ql \en
line feed control character (ASCII and ISO-10646 LF).
.It Ql \er
carriage return control character (ASCII and ISO-10646 CR).
.It Ql \et
horizontal tabulator control character (ASCII and ISO-10646 HT).
.It Ql \ev
vertical tabulator control character (ASCII and ISO-10646 VT).
.It Ql \e\e
emits a reverse solidus character.
.It Ql \e'
single quote.
.It Ql \e"
double quote (need not be escaped, but can).
.It Ql \eNNN
eight-bit byte with the octal value
.Ql NNN
(one to three octal digits), optionally prefixed by an additional
.Ql 0 .
A 0 byte will suppress further output for the quoted argument.
.It Ql \exHH
eight-bit byte with the hexadecimal value
.Ql HH
(one or two hexadecimal characters, no prefix, see
.Mx -sx
.Sx "number syntax rules" ) .
A 0 byte will suppress further output for the quoted argument.
.It Ql \eUHHHHHHHH
the Unicode / ISO-10646 character with the hexadecimal codepoint value
.Ql HHHHHHHH
(one to eight hexadecimal characters) \(em note that Unicode defines the
maximum codepoint ever to be supported as
.Ql 0x10FFFF
(in planes of
.Ql 0xFFFF
characters each).
This escape is only supported in locales that support Unicode (see
.Sx "Character sets" ) ,
in other cases the sequence will remain unexpanded unless the given code
point is ASCII compatible or (if the \*(oPal character set conversion is
available) can be represented in the current locale.
The character NUL will suppress further output for the quoted argument.
.It Ql \euHHHH
Identical to
.Ql \eUHHHHHHHH
except it takes only one to four hexadecimal characters.
.It Ql \ecX
Emits the non-printable (ASCII and compatible) C0 control codes
0 (NUL) to 31 (US), and 127 (DEL).
Printable representations of ASCII control codes can be created by
mapping them to a different, visible part of the ASCII character set.
Adding the number 64 achieves this for the codes 0 to 31, here 7 (BEL):
.Ql 7 + 64 = 71 = G .
The real operation is a bitwise logical XOR with 64 (bit 7 set, see
.Sx "Shell-style expansions" ) ,
thus also covering code 127 (DEL), which is mapped to 63 (question mark):
.Ql \&?\0echo\0$((127\0^\064)) .
.Pp
Whereas historically circumflex notation has often been used for
visualization purposes of control codes, as in
.Ql ^G ,
the reverse solidus notation has been standardized:
.Ql \ecG .
Some control codes also have standardized (ISO-10646, ISO C) aliases,
as shown above
.Pf ( Ql \ea ,
.Ql \en ,
.Ql \et
etc):
whenever such an alias exists it will be used for display purposes.
The control code NUL
.Pf ( Ql \ec@ ,
a non-standard extension) will suppress further output for the remains
of the token (which may extend beyond the current quote), or,
context-dependent, the remains of all arguments for the current command.
.It Ql \e$expression
Non-standard extension to embed
.Sx "Shell-style expansions" .
.It Ql \e`{command}
Not yet supported, just to raise awareness: Non-standard extension.
.El
.El
.
.Pp
Caveats:
.
.Bd -literal -offset indent
echo 'Quotes '${HOME}' and 'tokens" differ!"# no comment
echo Quotes ${HOME} and tokens differ! # comment
echo Don"'"t you worry$'\ex21' The sun shines on us. $'\eu263A'

# Note: different to sh(1)ell _language_:
define xy {
  echo $#, $1, $2, $*
}
set x='one two three'
call xy $x four
\*(OU1, one two three, four, one two three four
.Ed
.\" }}}
.
.\" .Ss "Shell-style expansions" {{{
.Ss "Shell-style expansions"
.
Within
.Sx "Shell-style argument quoting"
an unquoted dollar sign
.Ql $
triggers expression expansions.
The simplemost expression is an optionally brace enclosed variable name,
for example
.Ql $NAME
or
.Ql ${NAME} ,
which must honour
.Mx -sx
.Sx "variable name rules" :
.Sx "INTERNAL VARIABLES"
as well as
.Sx ENVIRONMENT
(shell) variables can be accessed and expanded through this mechanism.
.
.Pp
Within pairs of double parenthesis
.Ql $(( ))
64-bit signed integer arithmetic expansions are performed.
Different to
.Ic vexpr
no saturated mode is available (overflow constants will result),
and errors are not trackable:
a syntactically invalid expression causes the context
.Pf ( Sx COMMANDS )
to fail due to invalid arguments.
Variable NAMEs can be referenced: unset or empty values expand to 0,
otherwise the value is interpreted as a self-contained expression to
expand arithmetically first.
(Recall that hyphen-minus
.Ql -
is valid as part of NAMEs.)
.Mx -ix "number syntax rules"
Numbers prefixed with
.Ql 0x
or
.Ql 0X
denote hexadecimal (base 16) numbers,
.Ql 0
indicates octal (base 8), and
.Ql 0b
as well as
.Ql 0B
denote binary (base 2) numbers.
A permissive
.Ql NUMBER
parse mode (see example) is used for the
.Ql BASE#NUMBER
notation;
.Ql BASE
is an unsigned decimal in the range 2 and 64, inclusive.
Power-of-two bases are parsed as unsigned integers (making for overflow
constant differences).
The following list of operators is sorted in decreasing precedence.
.
.Bd -literal -offset indent
set i=0; echo $((i + i)), $((i+=1)), $((i + i)); varshow i
\*(OU0, 1, 2
\*(OUset i=1
set i=-2; eval echo \e$(( 10# $i))
\*(OU-2
.Ed
.
.Bd -filled -offset indent
.Sy Compatibility note:
\*(ID Of the following, only
.Dq The result is treated as the arithmetic expression to be evaluated
is true:
The expression is treated as if it were within double quotes,
but a double quote inside the parentheses is not treated specially.
All tokens in the expression undergo parameter and variable expansion,
command substitution, and quote removal.
The result is treated as the arithmetic expression to be evaluated.
Arithmetic expansions may be nested.
.Ed
.
.Pp
.Bl -tag -compact -width ".It Ar _n_u"
.It Ar \&( , \&)
Parenthesis can be used to form sub-expressions which are evaluated with
the highest precedence.
.It Ar VAR++ , VAR--
Postfix increment and decrement, for variables.
.It Ar + , -
Unary plus and minus.
.It Ar ++VAR , --VAR
Prefix increment and decrement, for variables.
.It Ar \&! , ~
Logical and bitwise negation.
.It Ar **
Exponentiation.
.It Ar * , / , %
Multiplication, division, remainder (modulo).
.It Ar + , -
Addition and subtraction.
.It Ar << , >> , >>>
Bitwise shifts, the last performs an unsigned right shift.
.It Ar <= , >= , < , >
Comparison.
.It Ar == , !=
Equality and inequality.
.It Ar &
Bitwise AND.
.It Ar ^
Bitwise XOR.
.It Ar |
Bitwise OR.
.It Ar &&
Logical AND.
.It Ar ||
Logical OR.
.It Ar EXPR0\0?\0EXPR1\0:\0EXPR2
Conditional operator: if EXPR0 is true evalute EXPR1, otherwise evaluate
EXPR2; this can be nested.
Precedence note: for example
.Ql 1?crt=10:crt=5
is an error because it really is
.Ql (1?(crt=10):crt)=5 ;
.Ql 1?crt=10:(crt=5)
is ok.
.It Ar **= , *= , /= , %= , += , -= , <<= , >>= , >>>= , &= , ^= , |= , =
Assignment.
It is subject to scoping rules;
.Cm local Ns
ly
.Ic set Ns
ting a variable before arithmetically expanding it is an option.
.It Ar EXPR1\0,\0EXPR2
Comma (sequential evaluation).
.El
.\" }}}
.
.\" .Ss "Message list arguments" {{{
.Ss "Message list arguments"
.
Many commands operate on message lists as documented in
.Sx "Specifying messages" .
Input is first split into individual tokens via
.Sx "Shell-style argument quoting" ,
and then interpreted as said.
If no explicit message list has been specified, many commands will
search for and use the next message forward that satisfies the commands'
requirements, and if there are no messages forward of the current
message, the search proceeds backwards;
if there are no good messages at all to be found, and the default
.Pf ( Dq dot )
is not applicable, an error message is shown instead.
The
.Va verbose
output of
.Ic list
will indicate when no default is used.
.\" }}}
.
.\" .Ss "Raw data arguments for codec commands" {{{
.Ss "Raw data arguments for codec commands"
.
A special set of commands, all of which with
.Dq codec
in their name, like
.Ic addrcodec ,
.Ic shcodec ,
.Ic urlcodec ,
take raw string data as input, which means that the input line
is taken literally: like this the effect of the actual codec is visible
without any noise of possible shell quoting rules etc., that is, the
user can input one-to-one the desired or questionable data.
To gain a level of expansion, the entire command line can be
.Cm eval Ns
uated first, for example
.
.Bd -literal -offset indent
vput shcodec res encode /usr/Sch\[:o]nes Wetter/heute.txt
echo $res
\*(OU$'/usr/Sch\eu00F6nes Wetter/heute.txt'
shcodec d $res
\*(OU$'/usr/Sch\eu00F6nes Wetter/heute.txt'
eval shcodec d $res
\*(OU/usr/Sch\(:ones Wetter/heute.txt
.Ed
.\" }}}
.
.\" .Ss "Filename transformations" {{{
.Ss "Filename transformations"
.
Filenames, where expected, and unless documented otherwise, are
subject to the following transformations, in sequence:
.
.Bl -bullet -offset indent
.It
If the name is a registered
.Ic shortcut
it will be expanded.
This step is mostly taken by
.Ic folder Ns
s only.
.
.It
The name is matched against the following patterns or strings.
But for plus
.Ar +file
.Va folder
expansion this step is mostly taken by
.Ic folder Ns
s only.
.
.
.Pp
.Bl -hang -compact -width ".Ar %user"
.It Ar #
(Number sign) is expanded to the previous file.
.
.It Ar %
(Percent sign) is replaced by the
.Mx -ix "primary system mailbox"
primary system mailbox, which either is the (itself expandable)
.Va inbox
if set, the standardized absolute pathname indicated by
.Ev MAIL
if set, or a built-in compile-time default otherwise.
When opening a
.Ic folder
the name is checked for being a primary mailbox, first
.Va \&\&inbox ,
then
.Ev MAIL .
.
.It Ar %user
Expands to the primary system mailbox of
.Ar user
(and never the value of
.Va inbox ,
regardless of its actual setting).
.
.It Ar &
(Ampersand) is replaced with the
.Mx -ix "secondary mailbox"
secondary mailbox, the
.Ev MBOX .
.
.It Ar +file
Refers to a
.Ar file
in the
.Va folder
directory (if set).
.
.It Ar %:filespec
Expands to the same value as
.Ar filespec ,
but has special meaning when used with, for example,
.Ic folder :
the file will be treated as a primary system mailbox by, among others, the
.Ic mbox
and
.Ic save
commands, meaning that messages that have been read in the current
session will be moved to the
.Ev MBOX
mailbox instead of simply being flagged as read.
.El
.
.It
Meta expansions may be applied to the resulting pathname, as allowed by
the operation and applicable to the resulting access protocol (also see
.Sx "On URL syntax and credential lookup" ) .
For the file-protocol, a leading tilde
.Ql ~
character will be replaced by the expansion of
.Ev HOME ,
except when followed by a valid user name, in which case the home
directory of the given user is used instead.
.Pp
A shell expansion as if specified in double-quotes (see
.Sx "Shell-style argument quoting" )
may be applied, so that any occurrence of
.Ql $VARIABLE
(or
.Ql ${VARIABLE} )
will be replaced by the expansion of the variable, if possible;
.Sx "INTERNAL VARIABLES"
as well as
.Sx ENVIRONMENT
(shell) variables can be accessed through this mechanism.
.Pp
Shell pathname wildcard pattern expansions
.Pf ( Xr glob 7 )
may be applied as documented.
If the full expansion results in multiple pathnames, and the
command is expecting only one file, an error results.
.Pp
In interactive context, in order to allow simple value acceptance (via
.Dq ENTER ) ,
arguments will usually be displayed in a properly quoted form, so a file
.Ql diet\e is \ecurd.txt
may be displayed as
.Ql 'diet\e is \ecurd.txt' .
.El
.\" }}}
.
.\" .Ss "Commands" {{{
.Ss "Commands"
.
.Bl -tag -width ".It Ic BaNg"
.
.Mx
.It Ic \&! Ar command
Execute the given
.Ev SHELL
.Ar command .
May expand each non-reverse solidus
.Ql \e
escaped exclamation mark
.Ql \&!
when
.Va bang
is set (see there); reverse solidus has no other special meaning.
.Cm vput
.Pf ( Sx "Command modifiers" )
and error number
.Va \&!
are supported.
A 0 or positive exit status
.Va \&?
reflects the exit status of the command, negative ones either
an error during execution setup, or an unclean program exit:
.Va ^ERR Ns -CHILD
is the error number then.
.Pp
Special cases with negative exit status exist in conjunction with
.Cm vput :
if storing the collected data in the variable fails
.Va ^ERR Ns -NOTSUP
occurs, whereas a temporary data collection file creation failure causes
.Va ^ERR Ns -CANCELED ;
In case of catchable out-of-memory situations it is
.Va ^ERR Ns -NOMEM .
Detected error conditions create an empty string result.
.
.Mx
.It Ic #
The comment-command causes the entire line to be ignored.
This is a normal command which' purpose is to discard its arguments.
.Sx "Shell-style argument quoting"
is required for shell-style comments.
.
.Mx
.It Ic =
.Dq dotquery :
query the unique number of the current message (the
.Dq dot ) .
With
.Sx "Message list arguments"
show the resulting list of numbers, separated by the first byte of
.Va ifs ,
and followed by the first byte of
.Va if-ws
if non-empty and not identical.
If this results in no separation at all a
.Cm space
is used.
Note neither is
.Dq dot
moved (see
.Ic dotmove ) ,
nor are
.Sx "Message states"
updated.
.Cm vput
and the error number
.Va \&!
are supported.
.
.Mx
.It Ic \&:
No-effect command: does nothing but expanding arguments.
.Sy Remarks:
as a command-less line invokes the default command
.Pf ( Ic next )
this conflicts the
.Ar \&:
argument
.Pf ( Sx "Specifying messages" ) ,
but compatibility to the well-known
.Xr sh 1
.Ic \&\&:
command deemed more important than this special case.
.
.Mx
.It Ic \&?
Show a brief summary of commands.
Given an optionally abbreviated name the according synopsis is
shown instead, try for example
.Ql \&?h ,
.Ql \&?hel
and
.Ql \&?help ,
and see how the output changes.
To avoid that
.Ic commandalias Ns
es are resolved the (quoted!) modifier
.Cm \e
can be prepended.
A more
.Va verbose
output is supported.
.
.Mx
.It Ic \&|
A synonym for the
.Ic pipe
command.
.
.
.Mx
.Mx
.It Ic account , unaccount
Create, select or list, and delete, respectively, those
.Mx -sx
.Sx Macro Ns
s that bundle settings for email account creation, covered by a specific
.Mx -sx
.Sx scope
that extends until another account is activated.
When left, also for a regular program
.Ic quit
or when the account macro cannot be switched to successully, the hook
.Va on-account-cleanup
is called.
There is a special read-only
.Ql null
account for the purpose of changing to global scope.
.
.Pp
Without arguments a list of all accounts is shown.
With one argument the given one is activated: after the macro body has
been evaluated its system
.Va inbox
is opened as via
.Ic folder ,
a possibly installed
.Va on-mailbox-event
will be run, and
.Va account
will be updated.
An early use will have its system mailbox open delayed until program
startup is completed (see
.Fl A ) ;
it cannot be called via
.Fl X .
The two argument form creates a new account macro as via
.Ic define .
.
.Pp
Important settings for accounts include
.Va folder , from , hostname , inbox , mta , record ,
also
password
and
.Va user
.Pf ( Sx "On URL syntax and credential lookup" ) ,
as well as things like
.Va smime-sign-cert
.Pf ( Sx "Signed and encrypted messages with S/MIME" ) ,
.Va tls-config-pairs
.Pf ( Sx "Encrypted network communication" ) ,
and protocol specifics like
.Va imap-auth , pop3-auth , smtp-config .
.
.Bd -literal -offset indent
account myisp {
  set folder=~/mail inbox=+syste.mbox record=+sent.mbox
  set from='(My Name) myname@myisp.example'
  set mta=smtp://me@smtp.myisp.example
}
.Ed
.
.
.Mx
.It Ic addrcodec
Perform email address codec transformations on raw-data argument, rather
according to email standards (RFC 5322; \*(ID will furtherly improve).
Supports
.Cm vput
and the error number
.Va \&! .
The first argument must be one of
.Ar [+[+[+]]]e[ncode] ,
.Ar d[ecode] ,
.Ar s[kin]
and
.Ar skinl[ist] .
.
.Pp
Decoding will show how a standard-compliant MUA will display the data.
MUAs have varying support for address standards regarding comments,
parenthesis, double-quoted strings, or so-called quoted-pairs.
\*(ID \*(Xx currently does not perform decoding when displaying addresses.
.
.Pp
Skinning is identical to decoding but only outputs the plain address,
without any string, comment etc. components.
Another difference is that it may fail with
.Va \&!
set to
.Va ^ERR Ns -INVAL
if decoding fails to find a(n) (valid) email address, in which case the
unmodified input will be output again.
.
.Pp
.Ar skinlist
first performs a skin operation, and thereafter checks a valid result
for whether it is registered via
.Ic mlist
or
.Ic mlsubscribe ,
eventually reporting the result in
.Va \&!
as
.Va ^ERR Ns -EXIST .
(That could become overwritten by an I/O error, though.)
.
.Pp
Encoding supports four different modes: the more plus signs, the lesser
standard imposed special bytes are converted to so-called quoted-pairs.
One plus sign to leave alone parenthesis,
two for double quotation marks,
three for also leaving reverse solidus alone.
The result will be valid if a successful exit status is reported
(\*(ID the current parser fails this assertion for some constructs).
\*(ID Addresses need to be specified in between angle brackets
.Ql < ,
.Ql >
if the construct becomes more difficult, otherwise the current parser
will fail; it is not smart enough to guess right.
.
.Bd -literal -offset indent
addrc enc "Hey, you",<diet@exam.ple>\e out\e there
\*(OU"\e"Hey, you\e", \e\e out\e\e there" <diet@exam.ple>
addrc d "\e"Hey, you\e", \e\e out\e\e there" <diet@exam.ple>
\*(OU"Hey, you", \e out\e there <diet@exam.ple>
addrc s "\e"Hey, you\e", \e\e out\e\e there" <diet@exam.ple>
\*(OUdiet@exam.ple
.Ed
.
.
.Mx
.Mx
.It Ic alias , unalias
\*(NQ(a, una) Define or list, and remove, respectively, address aliases:
personal distribution lists that map single names to none to multiple
names (recipients), expanded recursively according to
.Va metoo
after
.Sx "Compose mode"
is left.
(Unsupported the undocumented BSD Mail / System V10 mailx
.Dq trick
that implies
.Va metoo
if an alias that contains itself as only member.)
Without arguments the former shows a list of all aliases, one per line,
with one only its unexpanded value.
With two arguments, the first being one of
.Ql - ,
.Ql -- ,
or
.Ql -+ ,
a recursive expansion of the second is shown: according to
.Va metoo
for the first,
.Dq as without
.Va metoo
for the second,
.Dq as with
.Va metoo
for the third.
.
.Pp
In all other cases the given alias is created or appended to:
arguments must be valid alias names or other address types (see
.Sx "On sending mail, and non-interactive mode" ) .
The later recursive expansion can be prevented by prefixing the desired
name with reverse solidus
.Ql \e .
A valid alias name conforms to
.Va mta-aliases
syntax, but follow-up characters can also be the number sign
.Ql # ,
colon
.Ql \&: ,
commercial at
.Ql @ ,
exclamation mark
.Ql \&! ,
period
.Ql \&.
as well as
.Dq any character that has the high bit set .
The dollar sign
.Ql $
may be the last character.
The number sign
.Ql #
may need
.Sx "Shell-style argument quoting" .
.
.Pp
.\" ALIASCOLON next sentence
\*(ID Unfortunately the colon is currently not supported, as it
interferes with normal address parsing rules.
.\" ALIASCOLON next sentence
\*(ID High bit characters will likely cause warnings at the moment
for the same reasons why colon is unsupported; also, in the future
locale dependent character set validity checks will be performed.
.
.Bd -literal -offset indent
alias cohorts  bill \emark exa@m.ple ~/cohorts.mbox
alias mark  mark-exa@m.ple
set mta-aliases=/etc/aliases
.Ed
.
.
.Mx
.Mx
.It Ic alternates , unalternates
\*(NQ(alt) Manage a list of alternate addresses or names for the user:
all such names are removed from recipient lists when
.Ic reply Ns
ing to messages, and always depending on
.Va metoo
from
.Ic alias
expansions; implicitly added are
.Ev LOGNAME ,
.Va from
or
.Va sender ,
and
.Va reply-to .
The former manages the error number
.Va \&! ;
Without arguments it shows the current list, then it supports
.Cm vput .
Otherwise the arguments are appended to the alternate list; in
.Va posix
mode they instead replace that list.
.
.Mx
.Mx
.It Ic answered , unanswered
Take a message list and mark each member as (not) having been answered.
Dependent on
.Va markanswered
this is set automatically by
.Ic reply .
See
.Sx "Message states" .
.
.
.Mx
.Mx
.It Ic bind , unbind
\*(OP\*(NQ Configure M(ailx)-L(ine)-E(ditor) key bindings
.Pf ( Sx "On terminal control and line editor" ) .
The latter removes from the given context the given key binding,
both may be the wildcard
.Ql * :
.Ql unbind * *
removes all bindings from all contexts.
Due to initialization order issues built-in sequences cannot become
unbound upon program startup, instead see
.Va line-editor-no-defaults .
Bindings are context-sensitive except for the shared
.Ql base
foundation.
Contexts are
.Ql default
(used unless otherwise documented), and
.Ql compose
(used in
.Sx "Compose mode" ) .
.
.Pp
With zero arguments, or with only a context name (may be wildcard
.Ql * )
the former lists key bindings
.Pf ( Va verbose Ns
ly).
With two or more arguments a specific binding is shown or
(re)established: the first is the context to which it shall apply, the
second a comma-separated list of
.Dq keys
that make up the binding.
All further arguments are joined to form the expansion, and cause the
binding to be created or updated.
.
.Pp
Normally the expansion of a triggered binding is immediately committed
as an input line, shall the user instead have an editing option the
last byte of the expansion must be a commercial at
.Ql @ .
Reverse solidus cannot be the last character of an expansion.
An empty expansion will be rejected.
.
.Pp
Bindings are specified as a comma-separated sequence of keys.
Each key list entry consists of a sequence of one or more bytes.
Byte sequence input is forcefully terminated after
.Va bind-inter-byte-timeout
milliseconds, whereas key sequences can be timed out via
.Va bind-inter-key-timeout ,
which allows to share an identical key prefix in between many bindings.
Key list entries that start with colon
.Ql \&:
name terminal capabilities: many names are built-in and may be specified
either by their
.Xr terminfo 5 ,
or, if existing,
.Xr termcap 5
name, regardless of the actually used terminal control library.
But any capability resolvable via the control library or
.Va termcap
may be used.
.
.Bd -literal -offset indent
bind default a,b echo one
bind default a,b,c echo two
bind default ab,c echo notbush!
bind base $'\eE',d mle-snarf-word-fwd # Esc(ape)
bind base $'\eE',$'\ec?' mle-snarf-word-bwd # Esc,Delete
bind default $'\ecA',:khome,w 'echo User editable@'
bind default a,b,c,d rm -irf / @  # Also editable
bind default :kf1 File %
bind compose :kf1 ~v

define kb-clear {
  # Careful to re-bind mle-commit in same line!
  \eunbind * *;\e
    \ebind base $'\en' mle-commit;\e
    \ebind base $'\ec?' mle-del-bwd;\e
    \ebind base $'\ecE' mle-go-end
}
.Ed
.
.Pp
Notes.
The comma-separated key list is first parsed (over) as a shell-token
with whitespace as the field separator, then parsed and expanded for
real, separated with comma, therefore whitespace must be properly quoted
.Pf ( Sx "Shell-style argument quoting" ) !
Using Unicode escape sequences renders bindings defunctional if the
locale does not support Unicode
.Pf ( Sx "Character sets" ) .
Unresolvable terminal capabilities render bindings defunctional, too.
Adding, deleting or modifying key bindings invalidates the internal
prebuilt lookup tree, it will be recreated as necessary: in
.Ql Va verbose Ns =3
mode the resulting tree will be dumped.
It is advisable to use an initial escape or other control character (like
.Ql \ecA )
for user bindings in order to avoid ambiguities and reduce search time.
.
.Pp
The following terminal capability names are built-in and can be used in
.Xr terminfo 5
or (if available) the two-letter
.Xr termcap 5
notation.
See the respective manual for a list of capabilities.
The program
.Xr infocmp 1
can be used to show all the capabilities of
.Ev TERM ,
it's
.Fl \&\&x
option shows supported extensions.
.
.Pp
.Bl -tag -compact -width kcuuf_or_kcuuf
.It Cd kbs / kb
Backspace.
.It Cd kdch1 / kD
Delete character.
.It Cd kDC / *4
\(em shifted variant.
.It Cd kel / kE
Clear to end of line.
.It Cd kext / @9
Exit.
.It Cd kich1 / kI
Insert character.
.It Cd kIC / #3
\(em shifted variant.
.It Cd khome / kh
Home.
.It Cd kHOM / #2
\(em shifted variant.
.It Cd kend / @7
End.
.It Cd knp / kN
Next page.
.It Cd kpp / kP
Previous page.
.It Cd kcub1 / kl
Left cursor (with more modifiers: see below).
.It Cd kLFT / #4
\(em shifted variant.
.It Cd kcuf1 / kr
Right cursor (ditto).
.It Cd kRIT / %i
\(em shifted variant.
.It Cd kcud1 / kd
Down cursor (ditto).
.It Cd kDN
\(em shifted variant (only terminfo).
.It Cd kcuu1 / ku
Up cursor (ditto).
.It Cd kUP
\(em shifted variant (only terminfo).
.It Cd kf0 / k0
Function key 0.
Add one for each function key up to
.Cd kf9
and
.Cd k9 ,
respectively.
.It Cd kf10 / k;
Function key 10.
.It Cd kf11 / F1
Function key 11.
Add one for each function key up to
.Cd kf19
and
.Cd F9 ,
respectively.
.El
.
.Pp
Some terminals support key-modifier combination extensions like
.Ql Alt+Shift+xy .
For example, the delete key,
.Cd kdch1 :
in its shifted variant, the name is mutated to
.Cd  kDC ,
then a number is appended for the states
.Ql Alt
.Pf ( Cd kDC3 ) ,
.Ql Shift+Alt
.Pf ( Cd kDC4 ) ,
.Ql Control
.Pf ( Cd kDC5 ) ,
.Ql Shift+Control
.Pf ( Cd kDC6 ) ,
.Ql Alt+Control
.Pf ( Cd kDC7 ) ,
finally
.Ql Shift+Alt+Control
.Pf ( Cd kDC8 ) .
The same for the left cursor key,
.Cd kcub1 :
.Cd KLFT , KLFT3 , KLFT4 , KLFT5 , KLFT6 , KLFT7 , KLFT8 .
.
.
.Mx
.It Ic call
\*(NQ Evaluate the given
.Ic define Ns
d
.Mx -sx
.Sx Macro
.Pf ( Va ^ERR Ns -NOENT
if non-existing).
Calling macros recursively excesses the stack size limit at some point,
resulting in a program abortion; if applicable this can be avoided via
.Ic xcall .
Both commands support the
.Cm local
and
.Cm our
.Mx -sx
.Sx scope .
.
.
.Mx
.It Ic call_if
Does not fail for non-existing macros, otherwise identical to
.Ic call .
.
.Mx
.It Ic cd
Synonym for
.Ic chdir .
.
.Mx
.It Ic certsave
\*(OP Takes optionally
.Sx "Message list arguments" ,
and a pathname, and saves the message certificate(s) to the named file
in both human-readable and PEM format, usable for, for example,
.Va smime-encrypt-USER@HOST .
.
.Mx
.Mx
.It Ic charsetalias , uncharsetalias
\*(NQ Manage
.Sx "Character sets"
alias mappings.
The former lists all mappings without, or a given one with one argument(s).
With two arguments, hyphen-minus
.Ql -
being the first, the second is expanded recursively.
In all other cases the arguments are treated as pairs of source and
target character sets, creating new or updating existing mappings.
Mappings do not apply to
.Sx "INTERNAL VARIABLES"
like
.Va charset-8bit ,
and are generally ignored if character set conversion is not available.
Mappings are expanded recursively when used (recursion limit: 8).
.
.Mx
.It Ic chdir
\*(NQ(ch) Change the working directory to the given argument or
.Ev HOME .
Synonym for
.Ic cd .
.
.Mx
.Mx
.It Ic collapse , uncollapse
Takes a message list and hides all replies to these messages (for
.Ic headers ) ,
except for
.Ql new
messages and the
.Dq dot .
Also when a message with collapsed replies is displayed,
these are automatically uncollapsed.
The latter command undoes collapsing.
Only applicable to threaded
.Ic sort
mode.
.
.
.Mx
.Mx
.It Ic colour , uncolour
\*(OP\*(NQ Manage
.Sx "Coloured display" .
Without arguments the former shows all defined colour mappings,
otherwise a (case-insensitive) colour type is expected, one of
.Ql 256
for 256-colour terminals,
.Ql 8 ,
.Ql ansi
or
.Ql iso
for the standard 8-colour ANSI / ISO 6429 colour palette, and
.Ql 1
or
.Ql mono
for monochrome terminals: these only support (some) font attributes.
Without further arguments the list of all defined mappings of the given
type is shown.
.
.Pp
Otherwise the second argument defines a slot name, the third
a (comma-separated list of) colour and font attribute(s), and the
optionally supported fourth argument can be used to specify
a precondition: if conditioned mappings exist they are tested in
(creation) order unless a (case-insensitive) match has been found, and
the default mapping (if it exists) will only be chosen as a last resort.
Preconditions depend on slots, the following of which exist:
.
.Pp
Slot names prefixed with
.Ql mle-
are used for the \*(OPal built-in Mailx-Line-Editor
.Mx -sx
.Sx MLE
(see
.Sx "On terminal control and line editor" ) ,
and do not support preconditions.
.Pp
.Bl -tag -compact -width view-partinfo
.It Ar mle-position
The position indicator that is visible when a line cannot be fully
displayed on the screen.
.It Ar mle-prompt
.Va prompt .
.It Ar mle-error
\*(ID Used for error messages written on standard error only.
.El
.
.Pp
Slot names prefixed with
.Ql sum-
are used by
.Ic headers .
Preconditions are
.Ql dot
(current message) and
.Ql older
for elder messages (only in conjunction with
.Va datefield-markout-older ) .
.Pp
.Bl -tag -compact -width view-partinfo
.It Ar sum-dotmark
Used for
.Dq dotmark
creatable with the
.Va headline
formats
.Ql %>
or
.Ql %< .
.It Ar sum-header
For all summary line content except
.Dq dotmark
and the threaded
.Ic sort
tree.
.It Ar sum-thread
For the threaded
.Ic sort
tree creatable with the
.Va headline
format
.Ql %i .
.El
.
.Pp
Slot names prefixed with
.Ql view-
are used when messages are
.Ic type Ns
d.
.Pp
.Bl -tag -compact -width view-partinfo
.It Ar view-from_
Used for so-called
.Ql From_
lines, which are MBOX file format specific header lines (also see
.Va mbox-rfc4155 ) .
.It Ar view-header
For header lines.
A comma-separated list of headers to which the mapping shall apply may be
given as a precondition; if the \*(oPal regular expression support is
available then it is evaluated as one if it contains
.Mx -sx
.Sx "magic regular expression characters" .
.It Ar view-msginfo
For the introductional message info line.
.It Ar view-partinfo
For MIME part info lines.
.El
.
.Pp
The following (case-insensitive) colour definitions and font attributes
are understood, multiple of which can be specified in a comma-separated
list:
.
.Bl -tag -width ft=
.It Ar ft=
a font attribute:
.Ql bold ,
.Ql reverse
or
.Ql underline .
.
.It Ar fg=
foreground colour attribute, in order (numbers 0 - 7)
.Ql black ,
.Ql red ,
.Ql green ,
.Ql brown ,
.Ql blue ,
.Ql magenta ,
.Ql cyan
or
.Ql white .
To specify a 256-colour mode a decimal number colour specification in
the range 0 to 255, inclusive, is supported, and interpreted as follows:
.Pp
.Bl -tag -compact -width "999 - 999"
.It 0 - 7
the standard ISO 6429 colours, as above.
.It 8 - 15
high intensity variants of the standard colours.
.It 16 - 231
216 colours in tuples of 6.
.It 232 - 255
grayscale from black to white in 24 steps.
.El
.Bd -literal -offset indent
#!/bin/sh -
fg() { printf "\e033[38;5;${1}m($1)"; }
bg() { printf "\e033[48;5;${1}m($1)"; }
i=0
while [ $i -lt 256 ]; do fg $i; i=$((i + 1)); done
printf "\e033[0m\en"
i=0
while [ $i -lt 256 ]; do bg $i; i=$((i + 1)); done
printf "\e033[0m\en"
.Ed
.
.It Ar bg=
background colour attribute (same values as
.Cd fg= ) .
.El
.
.Pp
The command
.Ic \&uncolour
will remove for the given colour type (or all with
.Ql * )
the given mapping; if the optional precondition argument is given only
the exact tuple of mapping and precondition is removed.
The special name
.Ql *
will remove all mappings (no precondition allowed), thus
.Ql uncolour * *
will remove all established mappings.
.
.
.Mx
.Mx
.It Ic commandalias , uncommandalias
\*(NQ Define or list, and remove, respectively, command aliases.
Aliases can be used whenever a command name is expected,
and all arguments are joined onto the alias's expansion.
The former lists all aliases without, or a given one with one argument(s).
With two or more arguments an alias is (re)created: the
first is the name, the remains can be just about anything.
An alias may expand to another alias, but same-name expansion is
prevented (after first level), and there is a recursion depth limit.
Expansion can be prevented with a reverse solidus
.Cm \e
.Pf ( Sx "Command modifiers" ) .
Unlike
.Sx COMMANDS
aliases cannot be abbreviated.
.Bd -literal -offset indent
commandalias xx
\*(OU\*(xX: `commandalias': no such alias: xx
commandalias xx echo hello,
commandalias xx
\*(OUcommandalias xx 'echo hello,'
xx world
\*(OUhello, world
commandalias q q; commandalias x q; help x
\*(OUx -> q -> q (quit): Exit session [.]
.Ed
.
.Mx
.It Ic Copy
(C) Similar to
.Ic copy ,
but copy messages to a file named after the local part of the
sender of the first message instead of taking a pathname argument;
.Va outfolder
is inspected to decide on the actual storage location.
.
.Mx
.It Ic copy
(c) Copy messages to the named file and do not mark them as being saved;
otherwise identical to
.Ic save .
.
.
.Mx
.It Ic csop
\*(OP\*(NQ 8-bit US-ASCII byte string operation multiplexer (no notion of
.Sx "Character sets" ) .
For file operations refer to
.Ic fop ,
for numeric and other operations to
.Ic vexpr .
.Cm vput
.Pf ( Sx "Command modifiers" )
is supported.
The error result is
.Ql -1
for usage errors and numeric results, the empty string otherwise;
missing data errors, as for unsuccessful searches, set
.Va \&!
to
.Va ^ERR Ns -NODATA .
When the modifier suffix question mark
.Ql \&?
is supported, a case-insensitive mode is supported; the keyword
.Ql case
is optional so that
.Ql find?
and
.Ql find?case
are identical.
.
.Bl -hang -width ".It Cm length"
.It Cm length
Query the argument length.
.
.It Cm hash , Cm hash32
Calculate a (32-bit) hash of the argument.
.Ql \&?
modifier is supported.
These use Chris Torek's hash algorithm, the resulting hash value is
bit mixed as shown by Bret Mulvey.
.
.It Cm find
Search for the second in the first argument,
show 0-based offset upon success.
.Ql \&?
modifier is supported.
.
.It Cm substring
Create a substring of the first argument.
The optional second argument could specify a 0-based starting offset,
a negative one counts from the end.
The optional third argument defines the desired result length,
a negative one leaves off the given number of bytes at the end of the
original string; by default the entire string is used.
This operation tries to work around faulty arguments
.Pf ( Ic set Va verbose
for error logs), but reports them via the error number
.Va \&!
as
.Va ^ERR Ns -OVERFLOW .
.
.It Cm trim
Trim away whitespace from both ends of the argument.
.
.It Cm trim-front
Trim away whitespace from the begin of the argument.
.
.It Cm trim-end
Trim away whitespace from the end of the argument.
.El
.
.
.Mx
.It Ic cwd
Show the current working directory name as reported by
.Xr getcwd 3 .
Supports
.Cm vput
.Pf ( Sx "Command modifiers" ) .
The return status is tracked via
.Va \&? .
.
.Mx
.Mx
.It Ic Decrypt , decrypt
\*(OP For unencrypted messages identical to
.Ic Copy ;
Encrypted messages are first decrypted, if possible, and then copied.
.
.
.Mx
.Mx
.It Ic define , undefine
The latter deletes the given macro,
.Ql *
discards all existing ones.
Deletion, including self-deletion, is always possible.
The former lists all or only the given macro(s),
with two arguments it defines or replaces a macro.
Macro names are free-form but must form a single token
.Pf ( Sx "Shell-style argument quoting" ) .
.
.Pp
.Mx -ix Macro
Macros can be evaluated by
.Ic call ,
.Ic call_if
or
.Ic xcall ,
optionally with a
.Mx -sx
.Sx scope .
Inside a running macro positional parameters can be accessed via
.Va * ,
.Va @ ,
.Va #
and
.Va 1
as well as any positive unsigned decimal number less than or equal to
.Va # ;
they can be
.Ic shift Ns
ed away, and become exchanged via
.Ic vpospar .
.Ic return
can be used to explicitly give back control to the caller.
.
.Bd -literal -offset indent
? unset prompt
define name {
  command1
  ...
  commandN
}

define exmac {
  echo Parameter 1 of ${#} is ${1}, all: ${*} / ${@}
  return 1000 0
}
call exmac Hello macro exmac!
\*(IX
echo ${?}/${!}/${^ERRNAME}
.Ed
.
.
.Mx
.Mx
.It Ic delete , undelete
(d, u) Mark the
.Sx "Message list arguments"
(not)
.Ql deleted ,
one of the
.Sx "Message states" .
If
.Va autoprint
is set, the new
.Dq dot
or the last message restored, respectively, is automatically
.Ic type Ns
d; also see
.Ic dp , dt .
.
.Mx
.It Ic digmsg
\*(NQ An object that digs (information out of) a message can be
.Cm create Ns
d for the given message number; in
.Sx "Compose mode"
the hyphen-minus
.Ql -
instead uses the draft message.
The optional third argument hyphen-minus redirects object output
to standard output instead of making it consumable by
.Ic readall ,
.Ic read
or
.Ic readsh .
Without redirection output must always be consumed (until end of
file, EOF)!
Objects should be
.Cm remove Ns
d to prevent resource exhaustion; this is done automatically when their
.Ic folder
(or compose mode) is left.
.Pp
In all other use cases the first argument is the object's message
number, the remaining arguments are interpreted as for
.Ic ~^
.Pf ( Sx "COMMAND ESCAPES" ) :
.Bd -literal -offset indent
vput = msgno; digmsg create $msgno
digmsg $msgno header list;   readall x;   echon $x
\*(OU210 Subject From To Message-ID References In-Reply-To
digmsg $msgno header show Subject;readall x;echon $x
\*(OU212 Subject
\*(OU\(aqHello, world'
\*(OU
digmsg remove $msgno
.Ed
.
.Mx
.It Ic discard
(di) Identical to
.Ic ignore .
Superseded by the multiplexer
.Ic headerpick .
.
.Mx
.Mx
.It Ic dp , dt
Delete given messages and thereafter
.Ic type
a possible new
.Dq dot
regardless of
.Va autoprint .
.
.Mx
.It Ic dotmove
Move the
.Dq dot
up
.Ql +
or down
.Ql -
by one message if possible, then update
.Ic headers .
.
.Mx
.Mx
.It Ic draft , undraft
Mark each given message as (not) being a draft
.Pf ( Sx "Message states" ) .
.
.Mx
.It Ic echo
\*(NQ(ec) Print arguments after expanding their
.Sx "Shell-style argument quoting" ,
then a newline.
.Cm vput
.Pf ( Sx "Command modifiers" )
is supported, the error number
.Va \&!
is managed: with
.Cm vput
the result length is returned on success,
.Ql -1
on error.
Remarks: in BSD Mail this command also performed
.Sx "Filename transformations" ,
which is standard incompatible and hard to handle because quoting
transformation patterns is not possible; the
.Ic fop
subcommand
.Cm expand
expands pathnames.
.
.Mx
.It Ic echoerr
\*(NQ Like
.Ic echo ,
but write to standard error and prefix lines by
.Va log-prefix .
Does not support
.Cm vput .
Also see
.Ic echoerrn .
\*(OP In interactive sessions messages are duplicated into the queue of
.Ic errors .
.
.Mx
.It Ic echon
\*(NQ Like
.Ic echo ,
but do not append a newline.
.
.Mx
.It Ic echoerrn
\*(NQ like
.Ic echoerr ,
but do not append a newline.
.
.Mx
.It Ic edit
(e) Successively open
.Ev EDITOR
on each entry of the given message list.
Modified contents are discarded unless
.Va writebackedited
is set, the mailbox can be written to, and the editor returned success.
.Ic visual
may be used instead for a more display oriented editor.
\*(ID Editing takes place on raw, non-decoded MIME content.
.
.Mx
.It Ic elif
Part of the
.Ic if
(see there),
.Ic elif , else , endif
conditional.
An else-if block is evaluated if former blocks were not and its'
condition is true.
.
.Mx
.It Ic else
(el) Part of the
.Ic if
(see there),
.Ic elif , else , endif
conditional.
An else block is evaluated only if none of the condition blocks matched.
.
.Mx
.It Ic endif
(en) Marks the end of an
.Ic if
(see there),
.Ic elif , else , endif
conditional execution block.
.
.
.Mx
.It Ic environ
\*(NQ The process
.Sx ENVIRONMENT
and
.Sx "INTERNAL VARIABLES"
usually live in distinct namespaces (for example
.Ic varshow
does not find the former,
.Ic echo
will), but they can be linked together as long as
.Ev SHELL
.Mx -sx
.Sx "variable name rules"
are honoured.
Changes may have
.Cm our
.Mx -sx
.Sx scope .
.
.Pp
The subcommands
.Cm set
and
.Cm unset
create und remove such links inclusive value updates, meaning that
.Ql environ set myvar
also
.Ic set Ns
.Ql myvar ,
and
.Ql environ unset myvar
also
.Ic unset Ns
s.
.
.Pp
To the contrary
.Cm link
and
.Cm unlink
only manage state: when linking and an according internal variable
exists the
.Sx ENVIRONMENT
is synchronized, otherwise it is tried to import (and
.Ic set )
an environment variable, else an error occurs;
unlinking breaks previously established links.
All given variables are worked, errors are remembered and cause
.Va ^ERR Ns -INVAL .
.
.Pp
The subcommand
.Cm lookup
looks up the given variable in the process environment only; it supports
.Cm vput
and sets
.Va \&!
to
.Va ^ERR Ns -NOENT
upon lookup failure.
(It may be handy because
.Cm local Ns
ly
.Ic set
free-form variables shadow anything else.)
.
.Bd -literal -offset indent
# With *errexit*, do not exit if PERL5LIB does not exist
ignerr environ link PERL5LIB
if $? -ne 0
  echoerr PERL5LIB not in environment, using ~/.perl5
  environ set PERL5LIB=~/.perl5
endif
set PERL5LIB=$PERL5LIB:/home/shared/perl5
vput environ storvar lookup PERL5LIB; echo $storvar
.Ed
.
.
.Mx
.It Ic errors
\*(OP Access the interactive session error message queue.
(As error messages sometimes fly by and scroll off the screen too fast,
here they are duplicated into.)
.Ar show
or no argument displays and clears the queue,
.Ar clear
only clears it.
Of interest may be
.Va errors-limit ,
.Va ^ERRQUEUE-COUNT ,
.Va ^ERRQUEUE-EXISTS .
.
.Mx
.Mx
.It Ic exit
(ex) also
.Ic xit
(x) Exit without performing management tasks,
like updating of the active mailbox,
.Mx -sx
.Sx "automatic message moving" ,
saving of the
.Va history-file ,
among others.
.Va on-account-cleanup
is evaluated when set.
The optional exit status number argument is passed through to
.Xr exit 3 .
\*(ID For now it can happen that the given status will be overwritten,
later this will only occur if a later error needs to be reported onto an
otherwise success indicating status.
.
.Mx
.It Ic File
(Fi) Like
.Ic folder ,
but open the mailbox read-only.
.
.Mx
.It Ic file
(fi) See
.Ic folder .
.
.Mx
.Mx
.It Ic filetype , unfiletype
\*(NQ Define, list, and remove, file handler hooks.
These provide (shell) commands that enable loading and saving MBOX
files from and to files with registered file extensions, as shown
and described for
.Ic folder .
The extensions are used case-insensitively (US-ASCII),
yet the auto-completion feature of for example
.Ic folder
will only work case-sensitively.
An intermediate temporary file will be used to store the expanded data.
The latter command removes hooks for the given extensions, asterisk
.Ql *
will remove all existing handlers.
.Pp
When used without arguments the former shows a list of all types,
with one argument the expansion of the given one.
Otherwise three argument tuples are expected: the first specifies the file
extension, the second and third define load- and save commands;
both must read from standard input and write to standard output.
Changing hooks will not affect already opened mailboxes (\*(ID except below).
\*(ID For now too much work is done, and files are oftened read in twice
where once would be sufficient: this can cause problems if a filetype is
changed while such a file is opened; this was already so with the
built-in support of .gz etc. in Heirloom, and will vanish in v15.
\*(ID For now all handler strings are passed to the
.Ev SHELL
for evaluation purposes; in the future a
.Ql \&!
prefix to load and save commands may mean to bypass this shell instance:
placing a leading space will avoid any possible misinterpretations.
.Bd -literal -offset indent
filetype bz2 'bzip2 -dc' 'bzip2 -zc' \e
    gz 'gzip -dc' 'gzip -c'  xz 'xz -dc' 'xz -zc' \e
    zst 'zstd -dc' 'zstd -19 -zc' \e
    zst.pgp 'gpg -d | zstd -dc' 'zstd -19 -zc | gpg -e'
set record=+sent.zst.pgp
.Ed
.
.Mx
.Mx
.It Ic flag , unflag
Take message lists and mark entries as being or not being flagged for
urgent/special attention, respectively.
See
.Sx "Message states" .
.
.Mx
.It Ic Folder
(Fold) Like
.Ic folder ,
but open the mailbox read-only.
.
.
.Mx
.It Ic folder
(fold) Without arguments shows informations about the current mailbox.
With one argument the current mailbox is synchronized and closed first,
.Sx "Filename transformations"
are performed; URL
.Pf ( Sx "On URL syntax and credential lookup" )
.Ql mailbox-type://
prefixes are understood, as in
.Ql mbox:///tmp/somefolder ,
or, in general:
.
.Pp
.Dl protocol://[user[:password]@]host[:port][/path]
.
.Pp
When no protocol was specified opening non-existing
.Ic folders
asserts
.Va newfolders .
Once opened
.Va mailbox-resolved
and
.Va mailbox-display
are updated, a set
.Va on-mailbox-event
is evaluated, and optionally a summary of
.Ic headers
is displayed if
.Va header
is set.
.
.Pp
For the protocols
.Ar mbox
and
.Ar file
(MBOX database), as well as
.Ar eml
(electronic mail message) the list of all registered
.Ic filetype Ns
s is traversed to check whether hooks shall be used to load (and save)
data from (and to) the mailbox (except for the
.Dq -
special case as documented for
.Fl f ) .
Changing hooks will not affect already opened mailboxes.
.
.Pp
\*(OB For historical reasons
.Ic filetype Ns
s provide limited (case-sensitive) auto-completion capabilities.
For example
.Ql mbox.gz
will be found for
.Ql \&? file mbox ,
provided that corresponding handlers are installed.
It will neither find
.Ql mbox.GZ
nor
.Ql mbox.Gz
however, but an explicit
.Ql \&? file mbox.GZ
will find and use the handler for
.Ql gz .
This will vanish in v15!
.
.Pp
EML files contain only one mail message,
\*(ID and must be opened read-only.
When reading MBOX files tolerant \*(PO parse rules are used by default;
The often invalid message boundaries of elder MBOX files cause warnings:
the method described for
.Va mbox-rfc4155
may be used to create a new and valid MBOX.
.
.Pp
During file operations MBOX databases and EML files are protected by
file-region locks
.Pf ( Xr fcntl 2 ) .
.Mx -ix "dotlock files"
\*(OP Unless
.Va dotlock-disable Ns
d an MBOX
.Va inbox
.Pf ( Ev MAIL )
and any
.Mx -sx
.Sx "primary system mailbox"
are additionally protected by so-called dotlock files,
the traditional way of mail spool file locking: for any file
.Ql x
a lock file
.Ql x.lock
will be created during the synchronization, in the same directory and
with the same user and group identities as the file of interest \(em
as necessary created by an external privileged dotlock helper.
Also see
.Sx FAQ :
.Sx "Howto handle stale dotlock files" .
.
.Pp
\*(OP If no explicit protocol was given, and the folder refers to
a directory with the subdirectories
.Ql tmp ,
.Ql new
and
.Ql cur ,
then it is treated as a
.Mx -ix Maildir
.Dq Maildir
mailbox.
The maildir format stores each message in its own file, and has been
designed so that file locking is not necessary when reading or writing
files.
\*(ID Operations on maildir mailboxes temporarily switch the working
directory; it is advisable to avoid addressing other mailboxes
relatively when using them.
.
.Pp
\*(OP Network mail protocol resources may be addressed, securely via
.Sx "Encrypted network communication"
if so supported:
.Ar pop3
(POP3) and
.Ar pop3s
(POP3 via TLS), see
.Va pop3-auth ,
as well as
.Ar imap
and
.Ar imaps
(IMAP via TLS), see
.Sx "IMAP CLIENT" .
For IMAP the
.Ar [/path]
URL part defaults to
.Ql INBOX .
All network traffic may be proxied over a SOCKS5 server via
.Va socks-proxy .
Network communication socket timeouts are configurable via
.Va socket-connect-timeout .
.
.
.Mx
.It Ic folders
\*(NQ Lists the names of all folders below the given argument or
.Va folder .
For file-based protocols
.Ev LISTER
will be used for display purposes.
.
.Mx
.Mx
.It Ic Followup , followup
\*(CM(F,fo) Similar to
.Ic Reply
aka
.Ic reply ,
but save the message in a file named after the local part of the first
recipient's address (like
.Fl F ) ,
overwriting
.Va record ,
but honouring
.Va outfolder .
Also see
.Ic Copy
and
.Ic Save .
.
.
.Mx
.It Ic fop
\*(OP\*(NQ A multiplexer command for file operations.
For C-style byte string operations refer to
.Ic csop ,
for numeric and other operations to
.Ic vexpr .
The first argument defines the number, type, and meaning of the
remaining ones.
Unless otherwise noted subcommands expect file descriptors opened via
.Cm flock , lflock , lock , llock , open
and echo success as documented there;
standard input and output are accepted,
regardless of their validity for the operation.
Supports
.Cm vput
(see
.Sx "Command modifiers" ) .
Except when otherwise noted errors will be reported via
.Va \&! ,
and the error result is the empty string.
Pathname arguments undergo
.Sx "Filename transformations" .
.
.Bl -hang -width ".It Cm random"
.It Cm close
Close the given file descriptor.
Standard descriptors cannot be closed.
.
.It Cm expand
Only perform name transformations.
.
.It Cm ftruncate
Truncate the given file descriptor to its current file position (also see
.Cm rewind ) .
.
.It Cm flock , lflock , lock , llock
Open the given pathname, then apply a shared read
.Pf ( Ql R , r ) ,
or an exclusive read and (appending) write
.Pf ( Ql W , w , A , a )
lock according to mode argument (second); uppercase variants log retries
to gain the lock, writer ones create the file first as necessary, they
will truncate the file to zero size first if a
.Ql 0
is part of the mode; further operation-success-echoes on the open
descriptor can be suppressed by adding a circumflex
.Ql ^
(for example
.Ql fop lock ./a-file.txt A0^ ) .
On success the descriptor number is printed, and must be
.Cm close Ns
d again explicitly.
.Cm llock
differs by not following symbolic links.
.Pp
.Pf \*(OP( Va features
includes
.Ql ,+flock, )
Different to the
.Xr fcntl 2
based locks
.Cm flock
uses the system call
.Xr flock 2 ,
and creates locks which are inherited by child processes.
.Pf ( Cm lflock
does not follow symbolic links.)
A third argument changes behaviour: it is passed to a newly spawned
.Ev SHELL
(via
.Fl \&\&c )
that inherits the descriptor as standard input for shared locks,
as standard input and output otherwise;
If the shell could be started its exit status code is returned,
and the normal result is suppressed but for
.Cm vput ;
the descriptor will be closed automatically.
.
.It Cm glob
.Xr glob 7
expands all arguments; upon success it makes none to many results
accessible in
.Cm local Ns
-\:most scope via
.Va ^# , ^1
etc, and outputs
.Va ^# ;
.Va ^0
holds the argument(s as a space-separated string).
Without
.Xr fnmatch 3
support in the operating system environment the error is
.Va ^ERR Ns -NOSYS .
.
.It Cm mkdir
Create a new directory.
The optional second argument is a boolean that denotes whether parent
directories shall be created as necessary.
.
.It Cm mktemp
Create a temporary file and output its name.
The optional first (and non-empty) argument will be used as a pathname
suffix, the (optional) second a target directory to be used instead of
.Ev TMPDIR .
.
.It Cm open
Open the given file with the mode given second, either in read-only
.Pf ( Ql r ) ,
or read- and (appending) write
.Pf ( Ql W , w , A , a )
mode; writer ones create the file first as necessary, uppercase versions
fail if the file already exists, otherwise, the file will be truncated
to zero size first if a
.Ql 0
is part of the mode; further operation-success-echoes on the open
descriptor can be suppressed by adding a circumflex
.Ql ^
(for example
.Ql fop open ./a-file.txt A0^ ) .
On success the descriptor number is printed, and must be
.Cm close Ns
d again explicitly.
.
.It Cm pass
Takes two file descriptor arguments to be passed as standard I/O to the
.Ev SHELL
command given third; beside the usual numbered ones the hyphen-minus
.Ql -
for passing through the according standard I/O, or commercial at
.Ql @
for
.Pa /dev/null ;
passing standard descriptors via number is not supported.
If the shell could be started its exit status code is returned,
the normal result is suppressed but for
.Cm vput.
.
.It Cm rename
.Xr rename 2 .
.Sy Remarks:
the first argument is the destination, the second the source.
.
.It Cm rewind
.Xr rewind 3
the file descriptor with the given number.
.
.It Cm rm
.Xr unlink 2 .
.
.It Cm rmdir
.Xr rmdir 2 .
.
.It Cm stat , lstat
.Xr stat 2
the given file and output values such that
.Ql vput fop x stat FILE; eval set $x
creates accessible variables.
.Cm lstat
differs by not following symbolic links when opening a file.
The time fields are named
.Ql st_Xtime
for the second, and
.Ql st_Xtimensec
for the nanosecond (maybe 0), where
.Ql X
is one of a(ccess), c(hange) and m(odification).
.Ql st_type
uses solidus
.Ql /
to denote directories, commercial at
.Ql @
for links, number sign
.Ql #
for block devices, percent sign
.Ql %
for for character devices, vertical bar
.Ql |
for FIFOs, equal sign
.Ql =
for sockets, and the period
.Ql \&.
for the rest.
.
.It Cm touch , ltouch
Update file times, creating the file first as necessary.
.Cm ltouch
differs by not following symbolic links when creating the file.
.El
.
.
.Mx
.It Ic Forward
\*(CM Similar to
.Ic forward ,
but save the message in a file named after the local part of the first
recipient's address, overwriting
.Va record ,
but honouring
.Va outfolder .
.
.Mx
.It Ic forward
\*(CM Takes a message list and the address of a recipient, subject to
.Va fullnames ,
to whom the messages shall be sent.
The text of the original message is included in the new one,
enclosed by the values of
.Va forward-inject-head
and
.Va forward-inject-tail .
.Va content-description-forwarded-message
is inspected.
The list of included headers can be filtered with the
.Ql forward
slot of
.Ic headerpick .
Only the first part of a MIME multipart message is included but for
.Va forward-as-attachment .
.Pp
This may generate the errors
.Va ^ERR Ns -DESTADDRREQ
if no recipient has been specified, or was rejected by
.Va expandaddr
policy,
.Va ^ERR Ns -IO
if an I/O error occurs,
.Va ^ERR Ns -NOTSUP
if a necessary character set conversion fails, and
.Va ^ERR Ns -INVAL
for other errors.
It can also fail with errors of
.Sx "Specifying messages" .
Any error stops processing of further messages.
.
.Mx
.It Ic from
(f) Takes a message list, and displays a summary as via
.Ic headers ,
making the first
(the last with
.Va showlast )
message of the result the new
.Dq dot .
An alias of this command is
.Ic search .
Also see
.Sx "Specifying messages" .
.
.
.Mx
.Mx
.It Ic headerpick , unheaderpick
\*(NQ Multiplexer that manages header field selection.
The latter always takes three or more arguments and removes from
the given context and the given type the given headers, all headers with
.Ql * .
Without arguments the former shows established settings of all contexts.
Otherwise the first argument is the context, one of (case-insensitive)
.Ql type
for display purposes (for example
.Ic type ) ,
.Ql save
for selecting which headers shall be stored persistently
.Pf ( Ic save , copy , move , decrypt ;
.Em note:
ignoring MIME related etc. headers destroys message usability),
.Ql forward
for
.Ic forward Ns
ed (except with
.Va forward-as-attachment ) ,
messages, and
.Ql top
for defining a user-defined list of fields for
.Ic top .
.
.Pp
With only a context the current settings are shown.
A restriction type may be given second, (a case-insensitive prefix of)
.Ql retain
for positive or
.Ql ignore
for negative filtering, inspected only if no positive one exists.
Again, without further arguments the current settings are shown.
Further arguments specify header fields, \*(oPally specified as
regular expressions, to be added to the given type.
The special wildcard field (asterisk,
.Ql * )
will establish a (fast) shorthand setting which covers all fields.
.
.Pp
.Ic \&\&headerpick
supports creation and usage of user specified contexts.
This mode is selected with (a case-insensitive prefix of) the
.Dq context names
.Cm create , remove , assign , join ;
the real name is given next, it is case-insensitive (US-ASCII), must not
shadow a built-in name, and has to adhere to
.Mx -sx
.Sx "variable name rules" .
Trying to create a context a second time is an error.
The name of another, constant template context is given third to
.Cm assign
and
.Cm join ,
whereas the former clears the target context first, the latter does not;
in case of errors both clear the target context.
.
.
.Mx
.It Ic headers
(h) Show the current group of headers, the size of which depends on
.Va screen
in interactive mode, and the format of which can be defined with
.Va headline .
Without a message list argument the group surrounding the
.Dq dot
is shown, otherwise the first (the last with
.Va showlast )
message becomes the new
.Dq dot .
.
.Mx
.It Ic help
(hel) A synonym for
.Ic \&? .
.
.Mx
.It Ic history
\*(OP Without arguments or when given
.Cm show
all history entries are shown (possibly more
.Va verbose Ns
ely).
.Cm load
replaces the history with the content of
.Va history-file ,
and
.Cm save
dumps the history to said file, replacing former content;
.Cm clear
deletes all entries.
The argument can also be a signed decimal
.Ar NUMBER ,
the respective history entry is then evaluated;
a negative number describes an offset to the current command so that
.Ql -1
selects the last command, the history top.
Lastly
.Cm delete
the given entries
.Pf ( Ar :NUMBER: ) .
Also see
.Sx "On terminal control and line editor" .
.
.Mx
.Mx
.It Ic hold
(ho) also
.Ic preserve
(pre) Allowed only in a
.Mx -sx
.Sx "primary system mailbox" .
Marks the given message list to be preserved in the current
.Ic folder ,
as if
.Va hold
were set;
overrides a former deletion of the given messages;
only the
.Ic delete , dp , dt
as well as
.Ic mbox
and
.Ic touch
commands will remove the preserve mark.
.
.
.Mx
.It Ic if
\*(NQ(i) Part of the
.Ic \&\&if , Ic elif , else , endif
conditional execution: if the given expression(s) evaluate to true
the encapsulated block is executed.
All arguments (values, operators, metacharacters for groups, AND-OR
lists etc.) must be separate tokens
.Pf ( Sx "Shell-style argument quoting" ) .
Expressions are parsed much like the
.Ql [[ .. ]]
construct of some
.Xr sh 1 Ns
ells; quoting literals that equal syntax elements, especially
.Ql \&[
and unary operators, avoids syntax ambiguities.
Syntax errors cause blocks to be skipped (as no-ops) until
.Ic endif .
.Sy Remarks:
in a whiteout (ignored block) the modifier
.Cm eval
does not work, even for the conditional command that toggles that state.
.
.Bd -literal -offset indent
i[f] expression
  [commands ...]
eli[f] expression
  [commands ...]
el[se]
  [commands ...]
en[dif]

set i=!
if r && $i == !; echo yes; else; echo no; end
set i=
i -z $i; ec y; en
i $i = $i; ec y; en

set i=-n
if -n == && '-n' == -n; echo yes; end
yes
i -n == && \e-n == -n; ec yes; en
yes
i -n == && $i == -n; ec yes; en
yes
i -n == && -n == -n; ec yes; en
\&..this is an error
.Ed
.
.Pp
The only portable operators are
.Cm r
(receive mode)
and
.Cm s
(send mode), all others are extensions.
This includes case-insensitivity, and the (partially) spelled-out
.Cm receive
and
.Cm send .
Further no-argument operators are
.Cm t
(any word beginning with
.Ql t
not equal to
.Ql true )
that matches interactive terminal sessions (running attached to
a terminal, and none of the
.Dq quickrun
command line options
.Fl e ,
.Fl H
and
.Fl L
were used), as well as any boolean (see
.Sx "INTERNAL VARIABLES" ) .
Non-argument operators are detected as a last ressort.
.
.Pp
Unary test operators are
.Cm -N
and
.Cm -Z
which test whether the given variable exists or not, so that
.Ql -N editalong
is true when
.Va editalong
is set, whereas
.Ql -Z editalong
is if it is not.
.Cm -n
and
.Cm -z
test whether the length of the given string is nonzero or zero.
.
.Pp
Integer binary operators interpret arguments as integral signed 64-bit
numbers, and compare them arithmetically.
Invalid numbers are errors, unset variables and the empty string equal 0.
Operators may be suffixed with the question mark
.Cm \&?
modifier to enforce
.Ql saturated
operation mode, here numbers linger at the minimum or maximum value
instead of causing an error; the keyword is optional,
.Ql -lt? ,
.Ql -lt?satu
and
.Ql -lt?saturated
are identical.
The operators are
.Cm -lt
(less than),
.Cm -le
(less than or equal to),
.Cm -eq
(equal),
.Cm -ne
(not equal),
.Cm -ge
(greater than or equal to), and
.Cm -gt
(greater than), for example
.Ql if 3 -gt 2;ec yes;en .
.
.Pp
8-bit US-ASCII byte and regular expression binary operators interpret
arguments textually.
Unset variables expand to the empty string.
Operators can be suffixed with the question mark
.Cm \&?
modifier to choose a
.Ql case-insensitive
operation mode, the keyword is optional,
.Ql ==? ,
.Ql ==?case
and
.Ql ==?case-insensitive
are identical.
Available 8-bit US-ASCII byte binary operators are
.Cm <
(less than),
.Cm <=
(less than or equal to),
.Cm ==
(equal; for
.Ev SHELL
compatibility there is also
.Cm = ) ,
.Cm !=
(not equal),
.Cm >=
(greater than or equal to),
.Cm >
(greater than), as well as
.Cm =%
(is substring of) and
.Cm !%
(is not substring of), for example
.Ql if Water =% at;ec yes;end .
.
.Pp
\*(OP Regular expression binary operators work in the active locale (see
.Sx "Character sets" ) .
.Cm =~
and
.Cm !~
interpret the right hand side argument as an extended regular expression.
Match groups (in parenthesis, see
.Xr re_format 7
or
.Xr regex 7 ,
dependent on host system) can be accessed in
.Cm local Ns
-\:most scope via the
.Va ^
multiplexer sub-variables
.Va ^# , ^0 , ^1
etc, for example
.Ql if knoedel =~? .*(OEDE).*; ec yes, $^1 is in $^0; en .
.
.Pp
Unary file operators test an aspect of the given pathname argument.
.Sx "Filename transformations"
are not performed (use
.Ic fop Cm expand ) .
Unless noted the same
.Ql saturated
question mark
.Cm \&?
modifier as for integer binary operators may be given to ignore
the argument and (re)use the file status cache that persists until
expression evaluation ends.
A non-existing cache is treated like a non-existing file.
Without modifier the cache is updated.
The operators are
.Cm -b
(file exists and is block special),
.Cm -c
(exists, character special),
.Cm -d
(exists, directory),
.Cm -e
(exists),
.Cm -f
(exists, regular file),
.Cm -g
(exists, set-group-ID),
.Cm -k
(exists, sticky bit set),
.Cm -L
(exists, symbolic link),
.Cm -O
(exists, owned by effective user ID),
.Cm -p
(exists, named pipe),
.Cm -r
(exists, user can read, no modifier),
.Cm -S
(exists, socket),
.Cm -s
(exists, size greater than zero),
.Cm -t
(file descriptor number argument is open on a terminal, no modifier),
.Cm -u
(exists, set-user-ID),
.Cm -w
(exists, user can write, no modifier),
.Cm -x
(exists, user can execute / search, no modifier).
All operators resolve symbolic links except
.Cm -L .
For example
.Ql if -f /etc/motd && -s? ''; ec yes; en .
.
.Pp
Binary file operators interpret the left and right hand side arguments
as pathnames.
.Sx "Filename transformations"
are not performed.
The operators are
.Cm -ef
(both files refer to same device and inode),
.Cm -nt
(left hand modification is newer, or it exists and right hand does not),
.Cm -ot
(left hand modification is older, or it does not exist and right hand
side does).
All operators resolve symbolic links.
For example
.Ql if /etc/passwd -nt /etc/shadow; ec yes; en .
.
.Pp
Expressions can be joined via AND-OR lists (where AND is
.Cm &&
and OR is
.Cm || ) ,
which have equal precedence and left associativity.
Further groups can be created via interlockable pairs of brackets
.Cm [\ \&.\&.\&.\ ] ,
themselve joinable with AND-OR lists.
The unary operator
.Cm \&!
reverses the result of individual expressions or entire groups.
.
.Bd -literal -offset indent
i -N debug; ec *debug* set; el; ec not; en
if "$ttycharset" == UTF-8 || "$ttycharset" ==?cas UTF8
  echo ttycharset is UTF-8, the former case-sensitive!
endif
set t1=one t2=one
i ${t1} == ${t2}
  ec The non-empty variables are byte-wise equal
en
if $features =% ,+regex, && "$TERM" =~?case ^xterm\&.*
  ec ..in an X terminal
en
if [ [ true ] && [ [ "${t1}" != '' ] || \e
    [ "$t2" != '' ] ] ]
  echo Noisy, noisy
endif
i true && [ -n "$t1" || -n "${t2}" ]
  ec Left associativity as known from the shell
en
.Ed
.
.
.Mx
.It Ic ignore
(ig) Superseded by the multiplexer
.Ic headerpick .
.
.Mx
.It Ic list
Shows all built-in commands in a lookup order that does not always
correlate to the alphabetical one: names can be abbreviated,
and \*(PO standardized some abbreviations.
\*(OP In
.Va verbose
mode argument types and documentation abstracts, flags and supported
.Sx "Command modifiers"
are shown:
.Pp
.Bl -tag -compact -width ".It Ql NEEDS_BOX"
.It Ql "`local'"
supports
.Cm local .
.It Ql "`our'"
supports
.Cm our .
.It Ql "`vput'"
supports
.Cm vput .
.It Ql "*!*"
the error number is tracked in
.Va \&! .
.It Ql needs-box
needs an active
.Ic folder .
.It Ql ok:
is \&.\h'.3m'.\h'.3m'.
.Bl -tag -compact -width ".It Ql SUBPROCESS"
.It Ql batch/interactive
usable in interactive or batch mode
.Pf ( Fl # ) .
.It Ql send-mode
usable in send mode.
.It Ql subprocess
allowed when running in a subprocess, for example via
.Va on-compose-splice .
.El
.It Ql not ok:
is not \&.\h'.3m'.\h'.3m'.
.Bl -tag -compact -width ".It Ql COMPOSE_MODE"
.It Ql compose mode
available in
.Sx "Compose mode".
.It Ql startup
available during program startup, for example in
.Sx "Resource files"
(usually given as
.Dq nay ) .
.El
.It Ql "gabby"
The command produces
.Va history-gabby
.Ic history
entries.
.El
.
.It Ic localopts
\*(OB Please just use a
.Cm local
or
.Cm our
.Mx -sx
.Sx scope ,
as in
.Ql local set ,
.Ql local environ set
or
.Ql our call .
.
.Mx
.Mx
.It Ic Lfollowup , Lreply
\*(CM Reply to messages that come in via known
.Pf ( Ic mlist )
or subscribed
.Pf ( Ic mlsubscribe )
mailing lists, or pretend to do so (see
.Sx "Mailing lists" ) :
on top of the
.Ic followup
and
.Ic reply
functionality actively resort and even remove message recipients.
Implicitly generate a
.Ql Mail-Followup-To:
header if that seems useful, regardless of
.Va followup-to .
For more documentation refer to
.Sx "On sending mail, and non-interactive mode" .
.Pp
May generate
.Va ^ERR Ns -DESTADDRREQ
if no recipient has been specified,
.Va ^ERR Ns -PERM
if some recipients where rejected by
.Va expandaddr ,
.Va ^ERR Ns -IO
if an I/O error occurs,
.Va ^ERR Ns -NOTSUP
if a necessary character set conversion fails, and
.Va ^ERR Ns -INVAL
for other errors, like those of
.Sx "Specifying messages" .
Any error stops processing of further messages.
.
.Mx
.It Ic Mail
\*(CM Similar to
.Ic mail ,
but save the message in a file named after the local part of the first
recipient's address, overwriting
.Va record ,
but honouring
.Va outfolder .
.
.Mx
.It Ic mail
\*(CM(m) Send mail to given (or asked for) list of recipients.
Unless
.Va fullnames
is set recipient addresses are skinned, and see
.Sx "On sending mail, and non-interactive mode" ;
supports
.Cm local .
.Pp
May generate
.Va ^ERR Ns -DESTADDRREQ
if no recipient has been specified,
.Va ^ERR Ns -PERM
if some recipients where rejected by
.Va expandaddr ,
.Va ^ERR Ns -NOTSUP
if multiple messages have been specified,
.Va ^ERR Ns -IO
if an I/O error occurs,
.Va ^ERR Ns -NOTSUP
if a necessary character set conversion fails, and
.Va ^ERR Ns -INVAL
for other errors, like those of
.Sx "Specifying messages" .
.
.Mx
.It Ic mailcap
\*(OP Without arguments, or with only
.Ar show ,
the content of
.Sx "The Mailcap files"
cache is shown, (re-)initializing it as necessary.
If it is
.Ar load
the cache will only be (re-)initialized, and
.Ar clear
will remove its contents.
Only one attempt to load the files is made,
.Ar clear
has to be used for a retry.
The load and parse step reacts upon
.Va verbose .
.
.Mx
.It Ic mbox
(mb) Allowed only in a
.Mx -sx
.Sx "primary system mailbox" .
Mark the given message list as a subject to
.Mx -sx
.Sx "automatic message moving"
to the
.Mx -sx
.Sx "secondary mailbox"
.Ev MBOX ,
overriding a set
.Va hold ;
overrides a former
.Ic hold
request.
.
.Mx
.Mx
.It Ic mimetype , unmimetype
\*(NQ Without arguments the MIME type cache is shown
.Pf ( Va verbose Ns
ly).
Otherwise arguments are joined, and interpreted as shown in
.Sx "The mime.types files"
(also see
.Sx "HTML mail and MIME attachments" ) ,
and the result will be prepended (last in first out) to the cache.
In any event MIME type sources are loaded first as necessary \(en
.Va mimetypes-load-control
fine-tunes loading.
.Pp
The latter command deletes all entries of the given MIME types, asterisk
.Ql *
discards all defined MIME types, just like
.Ql reset ,
but that also reenables cache initialization via
.Va mimetypes-load-control .
.
.Mx
.It Ic mimeview
\*(ID Only available in interactive mode, this command allows execution
of external MIME type handlers which do not integrate into the normal
.Ic type
output
.Pf ( Sx "HTML mail and MIME attachments" ) .
\*(ID Message parts cannot be addressed directly.
The user will be asked for each supported part in turn whether the
registered handler shall be used to display the part.
.
.Mx
.Mx
.It Ic mlist , unmlist
\*(NQ Manage the list of known
.Sx "Mailing lists" ;
subscriptions are controlled via
.Ic mlsubscribe .
The former shows all currently known lists if used without arguments,
otherwise the given ones become known.
\*(OP Many addresses can be matched with a single one containing
.Mx -sx
.Sx "magic regular expression characters"
(matched sequentially via linked lists instead of dictionaries, though).
The latter deletes all given specifications, or all with asterisk
.Ql * .
.
.Mx
.Mx
.It Ic mlsubscribe , unmlsubscribe
Building upon the command pair
.Ic mlist , unmlist ,
but only managing the subscription attribute of mailing lists.
(The former creates yet unknown lists.)
.
.Mx
.It Ic Move
Similar to
.Ic move ,
but move messages to a file named after the local part of the
sender of the first message instead of taking a pathname argument;
.Va outfolder
is inspected to decide on the actual storage location.
.
.Mx
.It Ic move
Acts like
.Ic copy ,
but marks the messages for deletion if they were transferred
successfully.
.
.Mx
.It Ic More
Like
.Ic more ,
but display all headers and MIME parts.
Identical to
.Ic Page .
.
.Mx
.It Ic more
Show the given messages in
.Ev PAGER ,
even in non-interactive mode (only
.Ql Ic if Ns \: terminal ) .
Identical to
.Ic page .
.
.Mx
.It Ic mtaaliases
\*(OP Without an argument or with
.Ar show
the
.Va mta-aliases
cache is initialized if necessary and then shown;
the output is normalized and properly quoted and fitted to
.Ev COLUMNS ;
it is usable as an
.Xr aliases 5
input file.
If the argument is
.Ar clear
the cache is removed, whereas
.Ar load
will also reinitialize it.
Otherwise the expansion of the given MTA alias is shown in one line.
With two arguments, hyphen-minus
.Ql -
being the first, show the recursive expansion of the second.
.
.Mx
.It Ic netrc
\*(OP Without arguments or with
.Ar show
the
.Pa \*(VN
cache is shown, initializing it (as necessary).
If the argument is
.Ar load
the cache is initialized,
.Ar clear
removes its contents.
Loading and parsing can be made more
.Va verbose .
.Ar lookup
will query the cache for the URL given as the second argument
.Pf ( Ql [USER@]HOST ) .
See
.Va netrc-lookup ,
.Va netrc-pipe
and the section
.Sx "On URL syntax and credential lookup" ;
the section
.Sx "The .netrc file"
documents the file format in detail.
.
.Mx
.It Ic newmail
Checks for new mail in the current
.Ic folder ;
if
.Va header
is set the
.Ic headers
of new messages are shown.
This command is not available for all
.Ic folder
types; it emits an
.Va on-mailbox-event .
.
.Mx
.It Ic next
(n) Go to the next (the first matching) message, and
.Ic type
it on success.
This is the default command for an empty interactive input line.
.
.Mx
.It Ic New
Same as
.Ic Unread .
.
.Mx
.It Ic new
Same as
.Ic unread .
.
.Mx
.It Ic noop
If the current
.Ic folder
is accessed via a network connection, a no-op(eration) command is sent
over the wire (for keep-alive purposes).
.
.Mx
.It Ic Page
Like
.Ic page ,
but display all headers and MIME parts.
Identical to
.Ic More .
.
.Mx
.It Ic page
Show the given messages in
.Ev PAGER ,
even in non-interactive mode (only
.Ql Ic if Ns \: terminal ) .
Identical to
.Ic more .
.
.Mx
.It Ic Pipe
Like
.Ic pipe ,
but pipe all headers and MIME parts.
.
.Mx
.It Ic pipe
(pi) Takes an optional message list and an optional shell command (or
.Va cmd ) ,
and pipes the messages in visual form (as via
.Ic page )
through the command invoked by the
.Ev SHELL
If the
.Va page
variable is set,
every message is followed by a formfeed character.
.
.It Ic preserve
(pre) A synonym for
.Ic hold .
.
.Mx
.It Ic Print
(P) Alias for
.Ic Type .
.
.Mx
.It Ic print
(p) Research
.Ux
equivalent of
.Ic type .
.
.Mx
.It Ic quit
(q) Initiate program termination, optionally with an exit status number,
and perform all management tasks that
.Ic exit
(see there) bypasses.
Unless
.Va ignoreeof
is set typing end-of-transmission (EOT)
.Ql control-D
.Pf ( Ql ^D )
at the beginning of an empty line has the same effect.
If new mail has arrived during the session, the message
.Dq You have new mail
will be shown.
.
.Mx
.It Ic read
\*(NQ Read a line from standard input, or the
.Ic readctl
activated descriptor, and split as indicated by
.Va ifs
into to the given variable(s), which must honour
.Mx -sx
.Sx "variable name rules"
.Pf ( Va \&!
error codes apply).
The exit status
.Va \&?
reports the number of bytes read, or
.Ql -1
on error, with
.Va \&!
set to
.Va ^ERR Ns -BADF
in case of I/O errors, or
.Va ^ERR Ns -NONE
upon End-Of-File (with no more bytes to read).
With more fields than variables, successive data is assigned to the last;
with less fields than variables, unused are assigned empty strings.
(Behaves like
.Ev SHELL Ns
s
.Xr read 1
command with
.Fl \&r
option used.)
.Bd -literal -offset indent
read a b c
\*(OU   H  e  l  l  o
echo "$? <$a> <$b> <$c>"
\*(OU16 <H> <e> <l  l  o>
set ifs=:; read a b c;unset ifs
hey2.0,:"'you    ",:world!:mars.:
echo <$a><$b><$c><$d>
\*(OU<hey2.0,><"'you    ",><world!:mars.:><>
set ifs=:; read a b c d;unset ifs
hey2.0,:"'you    ",:world!:mars.:
echo <$a><$b><$c><$d>
\*(OU<hey2.0,><"'you    ",><world!><mars.>
.Ed
.
.Mx
.It Ic readall
\*(NQ Read anything unexpanded from standard input, or the
.Ic readctl
activated descriptor, into to the given variable, which must honour
.Mx -sx
.Sx "variable name rules"
.Pf ( Va \&!
error codes apply); the exit status
.Va \&?
reports the number of bytes read, or
.Ql -1
on error, with
.Va \&!
set to
.Va ^ERR Ns -BADF
in case of I/O errors, or
.Va ^ERR Ns -NONE
upon End-Of-File (with no more bytes to read).
\*(ID The input data length is restricted to 31-bits.
.
.
.Mx
.It Ic readctl
\*(NQ Manage input channels for
.Ic read , readsh
and
.Ic readall .
Errors are reported via error number
.Va \&!
and exit status
.Va \&? .
Channel names are first checked for standard input hyphen-minus
.Ql - ,
which always exists, then for a numeric file descriptor number,
otherwise a pathname is assumed; filename based channels undergo minimal
.Sx "Filename transformations"
(no meta expansion are performed).
.
.Pp
Without arguments known channels are listed, as with
.Cm show .
New active ones can be
.Cm create Ns
d, existing ones can be
.Cm set
active and
.Cm remove Ns
d by giving their name.
Shared
.Pf ( Xr fcntl 2 )
.Cm lock Ns
s can be applied but to standard I/O channels: this is tried several
times and can thus block and fail, an uppercase first letter will log
iterations (case-insensitivity still applies besides).
.Pf \*(OP( Va features
includes
.Ql ,+flock, )
The otherwise identical
.Cm flock
lock type uses
.Xr flock 2 .
Also see
.Ic fop .
.
.Bd -literal -offset indent
$ printf 'echon "hey, "\enread a\enyou\enecho $a' |\e
  \*(xX -R#
hey, you

$ LC_ALL=C printf 'echon "hey, "\enread a\enecho $a' |\e
  LC_ALL=C 6<<< 'you' \*(xX -R#X'readctl create 6'
hey, you

set fn=/tmp/members.dat
readctl create $fn
set rv=$? es=$! ed=$^ERRDOC
if $rv -eq 0
  readctl Lock $fn # ignore error
  call .read-and-handle-until-eof "$fn"
  readctl remove $fn
else
  echoerr $'Cannot read file \e$fn: \e$ed'
endif
.Ed
.
.
.Mx
.It Ic readsh
\*(NQ Like
.Ic read ,
but splits on shell token boundaries
.Pf ( Sx "Shell-style argument quoting" )
rather than at
.Va ifs .
.
.Mx
.It Ic remove
\*(NQ Remove named
.Ic folders .
The given names are mailbox type classified, and type specific removal
will be applied; removal of unknown types is refused.
In interactive mode the user is asked for confirmation.
\*(ID Removing a
.Mx -sx
.Sx Maildir
mailboxes may be partial in case any of the subdirectories (tmp,new,cur)
cannot be removed.
.
.Mx
.It Ic rename
\*(NQ Rename the
.Ic folder
given first to the name given second.
.Sx "Filename transformations"
including shell pathname wildcard pattern expansions
.Pf ( Xr glob 7 )
are performed on both arguments.
Both mailboxes must be of the same type.
.
.Mx
.Mx
.It Ic Reply , Respond
\*(CM(R) Identical to
.Ic reply
except that it replies to only the senders of the given messages,
by using the first message as the template to quote, for the
.Ql Subject:
etc.; setting
.Va flipr
will exchange this command with
.Ic reply .
.
.Mx
.Mx
.It Ic reply , respond
\*(CM(r) Successively group reply to each of the given messages
by addressing the sender and all recipients, subject to
.Va fullnames
and
.Ic alternates
processing.
.Va followup-to ,
.Va followup-to-honour ,
.Va reply-to-honour
as well as
.Va recipients-in-cc
influence response behaviour.
.Va quote
as well as
.Va quote-as-attachment
configure whether responded-to messages shall be quoted etc.
.Va record
controls saving the response message.
Setting
.Va flipr
will exchange this command with
.Ic Reply .
.Ic Lreply
offers special support for replying to mailing lists.
For more documentation refer to
.Sx "On sending mail, and non-interactive mode" .
.Pp
This may generate the errors
.Va ^ERR Ns -DESTADDRREQ
if no recipient has been specified, or was rejected by
.Va expandaddr
policy,
.Va ^ERR Ns -IO
if an I/O error occurs,
.Va ^ERR Ns -NOTSUP
if a necessary character set conversion fails, and
.Va ^ERR Ns -INVAL
for other errors.
It can also fail with errors of
.Sx "Specifying messages" .
Any error stops processing of further messages.
.
.Mx
.It Ic Resend
Like
.Ic resend ,
but does not add any header lines.
This is not a way to hide the sender's identity,
but useful for sending a bounced message again to the same recipients.
.
.Mx
.It Ic resend
Send all given messages to the given recipient
.Pf ( Va fullnames ) .
.Ql Resent-From:
and related header fields are prepended to sent messages.
Saving in
.Va record
is only performed if
.Va record-resent
is set.
\*(ID\*(CM is not entered, the only supported hooks are
.Va on-resend-enter
and
.Va on-resend-cleanup .
.Pp
This may generate the errors
.Va ^ERR Ns -DESTADDRREQ
if no recipient has been specified, or was rejected by
.Va expandaddr
policy,
.Va ^ERR Ns -IO
if an I/O error occurs,
.Va ^ERR Ns -NOTSUP
if a necessary character set conversion fails, and
.Va ^ERR Ns -INVAL
for other errors.
It can also fail with errors of
.Sx "Specifying messages" .
Any error stops processing of further messages.
.
.Mx
.It Ic retain
(ret) Superseded by the multiplexer
.Ic headerpick .
.
.Mx
.It Ic return
Returns control of execution to the outer scope of a
.Mx -sx
.Sx Macro
(or
.Ic account ) .
All arguments are optional.
Up to two positive decimal numbers,
a 32-bit (\*(ID later 64-bit) return value
.Pf ( Va \&? ) ,
and a 32-bit error number
.Pf ( Va \&! ) ,
both defaulting to 0; as documented for
.Va \&?
a non-0 exit status may cause a program exit.
After a separating
.Ql ^
any number of arguments can be made accessible to the callee,
then announced via
.Va ^? :
.Va ^0
is set to the macro name,
.Va ^#
indicates arguments
.Pf ( Va ^1
etc); on excess
.Va \&!
as
.Va ^ERR Ns -OVERFLOW
occurs.
.
.Mx
.It Ic Save
(S) Similar to
.Ic save,
but save messages to a file named after the local part of the
sender of the first message instead of taking a pathname argument;
.Va outfolder
is inspected to decide on the actual storage location.
.
.Mx
.It Ic save
(s) Append the given messages to the given pathname, which undergoes
.Sx "Filename transformations"
including shell pathname wildcard pattern expansions
.Pf ( Xr glob 7 ) .
If no pathname is given, the
.Mx -sx
.Sx "secondary mailbox"
.Ev MBOX
is used.
The quoted pathname and the generated byte count is shown on success.
If editing a
.Mx -sx
.Sx "primary system mailbox"
the messages are marked for deletion (but see
.Va keepsave ) .
The
.Ql save
slot of
.Ic headerpick
filters out header fields not to be saved.
Also see
.Ic Copy .
.
.Mx
.It Ic search
Displays a header summary of all messages given, as via
.Ic headers .
This is an alias of
.Ic from .
Also see
.Sx "Specifying messages" .
.
.Mx
.It Ic seen
Marks all given messages as having been read.
.
.
.Mx
.Mx
.It Ic set , unset
(se, \*(NQ uns) Manage (set and clear)
.Sx "Built-in variables"
and free-form user custom
.Sx "INTERNAL VARIABLES" .
Without arguments the former lists currently existing ones, with
.Va debug
or
.Va verbose
attributes are shown.
With arguments the given
.Ql name Ns
s or
.Ql name=value
pairs (no space before or after the equal sign
.Ql = )
are set or adjusted.
Prefixing
.Ql no ,
for example
.Ql set noname ,
equals calling
.Ql unset name .
Both commands support the
.Mx -sx
.Sx scope
.Sx "Command modifiers"
.Cm local
and
.Cm our :
for
.Sx "Built-in variables"
and
.Sx ENVIRONMENT
variables
.Cm local
equals
.Cm our .
.
.Bd -literal -offset indent
set atab=$'\et' aspace=' ' zero=0 noprompt

define mboxfix {
  local set mbox-rfc4155 mf=${mailbox-resolved}
  File "${1}"; copy * "${2}"; file "${mf}"
}

commandalias e 'echon x=$x y=$y z=$z,\e ; env look x'
define l1 {
  e; our set x=x2 y=y2 z=z2; e; xcall l2
}
define l2 {
  e
}
environ set x=x1; set y=y1; e; call l1; e;
\*(IX
.Ed
.
.Pp
List mode does not automatically establish
.Ql Ic environ Cm link Ns
s for built-in
.Sx ENVIRONMENT
variables: only explicit addressing via
.Ic varshow
(with arguments), usage in an
.Ic if
condition, or an argument to
.Ic echo ,
explicit
.Ic \&\&set Ns
ting (not necessarily via
.Ic environ ) ,
as well as some program-internal use cases (look-ups) do this.
.
.
.Mx
.It Ic setdot
Set the
.Dq dot
to the given message.
Error number
.Va \&!
is supported.
.
.Mx
.It Ic shcodec
Apply
.Ar [+]e[ncode]
or
.Ar d[ecode]
shell quoting rules to the following raw-data.
The result of
.Ql +encode
is not roundtrip enabled (Unicode etc.: only local decode); also see
.Cd mle-quote-rndtrip .
On error
.Va \&!
is set to
.Va ^ERR Ns -CANCELED ,
and the unmodified input is the result.
(Error may change again due to output or result storage errors.)
Supports
.Cm vput
.Pf ( Sx "Command modifiers" ) .
.
.Mx
.It Ic shell
(sh) Invokes an interactive
.Ev SHELL ,
then returns its exit status.
.
.Mx
.Mx
.It Ic shortcut , unshortcut
\*(NQ Manage shortcuts for
.Sx "Filename transformations"
of
.Ic folder .
The latter deletes all shortcuts given as arguments (all with asterisk
.Ql * ) .
Without arguments the former shows all currently defined shortcuts,
with one the target of the given.
Otherwise arguments specify pairs of shortcut names and expansions,
creating new or updating already existing ones.
.
.Mx
.It Ic shift
\*(NQ Shift positional parameters (so former 2 becomes
.Va 1
etc.) by 1 or a given positive number (0 does nothing, successfully).
Shifting more than
.Va #
is an error.
The stack as such can be managed via
.Ic vpospar .
.
.Mx
.It Ic show
Show raw message content (like
.Ic type ,
but perform neither MIME decoding nor decryption).
.
.Mx
.It Ic size
(si) For all given messages, show their number, and the lines and bytes
of the raw message content.
.
.Mx
.It Ic sleep
\*(NQ Sleep the given number of seconds.
An optional non-empty second argument adds milliseconds.
A non-empty third argument makes the sleep uninterruptible, otherwise
.Va \&!
will be set to
.Va ^ERR Ns -INTR
upon interruption.
If the given duration(s) overflow the time datatype an
.Va ^ERR Ns -OVERFLOW
error occurs, invalid integers cause
.Va ^ERR Ns -INVAL .
.
.
.Mx
.Mx
.It Ic sort , unsort
Without arguments the former only shows, otherwise it sets the sorting
criterion; the latter equals
.Ql sort none .
The criterion affects the
.Ic folder
.Ic headers
visualization, addressing modes when
.Sx "Specifying messages" ,
and the meaning of
.Ic next ;
The message numbers are not affected.
If
.Va header
is set the
.Ic headers
are shown accordingly, and see
.Va autosort
and
.Va autocollapse .
Possible sorting criterions are:
.
.Pp
.Bl -tag -compact -width "subject"
.It Ar date
Sort by
.Ql Date:
field (message send time).
.It Ar from
Sort by
.Ql From:
field (address of sender).
The sender's real name (if any) is used if
.Va showname
is set.
.It Ar none
Do not sort (same as
.Ic \&\&unsort ) .
.It Ar size
Sort by size.
.It Ar spam
\*(OP Sort by
.Ic spamrate
classified spam score.
.It Ar status
Sort by
.Sx "Message states" .
.It Ar subject
Sort by subject.
.It Ar thread
Create a threaded display.
.Va autocollapse
may be set to
.Ic collapse
threads automatically.
.It Ar to
Sort by
.Ql To:
field (recipient address).
The recipient's real name (if any) is used if
.Va showname
is set.
.El
.
.
.Mx
.It Ic source
\*(NQ(so) Read commands from the given file after doing
.Sx "Filename transformations" .
A pathname with a trailing vertical bar
.Ql |
is interpreted as a
.Ev SHELL
command, the output of which will be read.
Dependent on
.Va posix
and
.Va errexit ,
as well as on the modifier
.Cm ignerr ,
encountered errors will stop reading, or cause program exit.
.
.Mx
.It Ic source_if
\*(NQ Different to
.Ic source
(beside not supporting pipe aka shell command input) is that no error is
generated if the given file cannot be opened successfully.
.
.Mx
.It Ic spamclear
\*(OP Clears the
.Ql is-spam
flag of the given messages.
.
.Mx
.It Ic spamforget
\*(OP Pass the given messages to the
.Va spam-interface
so that it can un-train its Bayesian filter.
Unless otherwise noted the
.Ql is-spam
flag is inspected to decide what shall be forgotten,
.Dq ham
or
.Dq spam .
.
.Mx
.It Ic spamham
\*(OP Pass the given messages to the
.Va spam-interface
to inform it they are
.Dq ham .
This also clears the
.Ql is-spam
flag.
.
.Mx
.It Ic spamrate
\*(OP Pass the given messages to the
.Va spam-interface
for rating purposes, without modifying messages, but only setting the
.Ql is-spam
accordingly.
The rating and flag will be forgotten once the
.Ic folder
is left.
.Sx "Handling spam"
shows the complete picture.
.
.Mx
.It Ic spamset
\*(OP Sets the
.Ql is-spam
flag of the given messages.
.
.Mx
.It Ic spamspam
\*(OP Pass the given messages to the
.Va spam-interface
to inform it they are
.Dq spam .
This also sets the flag
.Ql is-spam .
.
.
.Mx
.It Ic tls
\*(OP\*(NQ TLS information and management command multiplexer to aid in
.Sx "Encrypted network communication"
with the given URL
.Pf ( Sx "On URL syntax and credential lookup" ) .
The port of the URL's
.Ql server:port
defaults to HTTPS (443); only protocols which establish TLS directly are
supported, not those which upgrade an insecure channel.
Subcommands support
.Cm vput
.Pf ( Sx "Command modifiers" ) .
The error result is the empty string, the error itself is stored in
.Va \&! .
For example, string length overflows are caught and set
.Va \&!
to
.Va ^ERR Ns -OVERFLOW .
The TLS configuration is honoured, for example
.Va tls-verify
and
.Va tls-config-pairs .
.
.Bd -literal -offset indent
vput tls result fingerprint pop3s://ex.am.ple
echo $?/$!/$^ERRNAME: $result
.Ed
.
.Bl -hang -width ".It Cm random"
.It Cm certchain
Show the complete verified peer certificate chain of the given URL.
Includes informational fields in conjunction with
.Va verbose .
.It Cm certificate
Show only the peer certificate, without any signers, of the given URL.
Includes informational fields in conjunction with
.Va verbose .
.It Cm fingerprint
Show the
.Va tls-fingerprint-digest Ns
ed fingerprint of the certificate of the given URL.
.Va tls-fingerprint
is actively ignored for the runtime of this command.
.El
.
.
.Mx
.It Ic Top
Like
.Ic top
but uses the
.Ic headerpick
.Ql type
slot for white- and blacklisting header fields.
.
.Mx
.It Ic top
(to)
.Ic type Ns
s out the first
.Va toplines
lines of each of the given messages.
Unless
.Ql top
selection has been established with
.Ic headerpick ,
only
.Ql From: ,
.Ql To: ,
.Ql Cc: ,
and
.Ql Subject:
are shown.
The message content display can be compressed via
.Va topsqueeze .
.
.Mx
.It Ic touch
(tou) Allowed only in a
.Mx -sx
.Sx "primary system mailbox" .
Touch the given message list, and mark messages therein as a subject to
.Mx -sx
.Sx "automatic message moving"
to the
.Mx -sx
.Sx "secondary mailbox"
.Ev MBOX ,
unless overriden by a set
.Va hold ;
overrides a former
.Ic hold
request.
.
.Mx
.It Ic Type
(T) Like
.Ic type
but do not filter header fields through
.Ic headerpick ,
and visualize all parts of MIME
.Ql multipart/alternative
messages.
.
.Mx
.It Ic type
(t) Show the given messages.
Whether and when
.Ev PAGER
is used for display instead of the
.Va screen
is controlled by
.Va crt .
.Pf ( Ic more
always uses
.Ev PAGER . )
Message headers are filtered as chosen by the
.Ql type
selection of
.Ic headerpick .
For MIME multipart messages all
.Ql text
message parts, all parts with a registered MIME type handler
.Pf ( Sx "HTML mail and MIME attachments" )
that produces
.Cd copiousoutput ,
and all
.Ql message
parts are shown, others are hidden except for their headers.
Messages are decrypted and converted to
.Va ttycharset
as necessary.
.Ic mimeview
can be used to display parts of other sort.
.
.It Ic unaccount
See
.Ic account .
.
.It Ic unalias
(una) See
.Ic alias .
.
.It Ic unanswered
See
.Ic answered .
.
.It Ic unbind
See
.Ic bind .
.
.It Ic uncollapse
See
.Ic collapse .
.
.It Ic uncolour
See
.Ic colour .
.
.It Ic undefine
See
.Ic define .
.
.It Ic undelete
See
.Ic delete .
.
.It Ic undraft
See
.Ic draft .
.
.It Ic unflag
See
.Ic flag .
.
.Mx
.It Ic unignore
Superseded by the multiplexer
.Ic headerpick .
.
.It Ic unmimetype
See
.Ic mimetype .
.
.It Ic unmlist
See
.Ic mlist .
.
.It Ic unmlsubscribe
See
.Ic mlsubscribe .
.
.Mx
.It Ic Unread
Same as
.Ic unread .
.
.Mx
.It Ic unread
Marks all given messages as not being read
.Pf ( Sx "Message states" ) .
.
.Mx
.It Ic unretain
Superseded by the multiplexer
.Ic headerpick .
.
.It Ic unset
\*(NQ(uns) See
.Ic set .
.
.It Ic unshortcut
See
.Ic shortcut .
.
.It Ic unsort
See
.Ic sort .
.
.Mx
.It Ic urlcodec
Apply
.Ar e[ncode] ,
.Ar d[ecode] ,
.Ar p[ath]enc[ode]
or
.Ar p[ath]dec[ode]
URL percent codec (RFC 3986) operations on the following raw-data.
The latter two are slightly modified to better adhere to pathnames: tilde
.Ql ~
is not allowed, and the initial character can neither be hyphen-minus
.Ql -
nor dot
.Ql .
(\*(ID The path-aware decoder is yet identical to the normal one.)
This is a character set agnostic operation which could decode bytes that
are invalid in the current
.Va ttycharset .
.Pp
Supports
.Cm vput
(see
.Sx "Command modifiers" ) ,
and manages the error number
.Va \&! .
If the operation fails
.Va \&!
is set to
.Va ^ERR Ns -CANCELED ,
and the unmodified input is the result (error number may change again
due to output or result storage errors).
\*(ID This command does not know about URLs beside what is documented.
.Pf ( Ic vexpr
offers a
.Cm makeprint
subcommand, shall the URL be displayed.)
.
.Mx
.It Ic varshow
\*(NQ Show only the given variables, or all
.Sx "INTERNAL VARIABLES" .
In the latter case
.Cm local
.Cm scope
settings are not, and
.Ic vpospar
and other positional parameters are never covered.
The output is subject to
.Va verbose .
.
.Mx
.It Ic verify
\*(OP Verifies
.Sx "Signed and encrypted messages with S/MIME" .
If a message is not a signed message, verification will fail for it.
Verified is the message presented certificate, that the sender is
mentioned in it, and that the message content is unchanged.
.
.Mx
.It Ic version
Show
.Va version
and
.Va features ,
optionally in a more
.Va verbose
form that includes build and running system environment informations.
Supports
.Cm vput
.Pf ( Sx "Command modifiers" ) .
.
.
.Mx
.It Ic vexpr
\*(OP\*(NQ Multiplexer which offers checked signed 64-bit numeric
calculations, as well as other, mostly string-based operations.
C-style byte string operations are available via
.Ic csop ,
and file operations via
.Ic fop .
The first argument defines number, type, and meaning of the
remaining arguments.
An empty number argument is treated as 0.
Supports
.Cm vput
.Pf ( Sx "Command modifiers" ) .
The result in case of errors is
.Ql -1
for usage errors and numeric operations, the empty string otherwise;
.Dq soft
errors, like when a search operation failed, will also set the
.Va \&!
error number to
.Va ^ERR Ns -NODATA .
Except when otherwise noted numeric arguments are parsed as signed 64-bit
numbers, and errors will be reported in the error number
.Va \&!
as the numeric error
.Va ^ERR Ns -RANGE .
.
.Pp
Numeric operations work on one or two signed 64-bit integers according to
.Mx -sx
.Sx "number syntax rules" ;
compared to arithmetic
.Sx "Shell-style expansions"
they offer more control.
Unsigned interpretation of a number can be enforced with an
.Ql u
prefix (case-insensitive), as in
.Ql u-110 ;
power-of-two bases (2,4,8,16,32,64) are unsigned by default, but regarding
overflow detection and error constants it still makes a difference.
To enforce signed interpretation (instead) prefix
.Ql s
(case-insensitive).
One integer is expected by assignment (equals sign
.Ql = ) ,
which does nothing but validity and overflow detection, unary not (tilde
.Ql ~ ) ,
which creates the bitwise complement, and unary plus and minus.
Two integers are used by addition (plus sign
.Ql + ) ,
subtraction (hyphen-minus
.Ql - ) ,
multiplication (asterisk
.Ql * ) ,
division (solidus
.Ql / )
and modulo (percent sign
.Ql % ) ,
as well as for the bitwise operators logical or (vertical bar
.Ql | ,
to be quoted) ,
bitwise and (ampersand
.Ql \&& ) ,
bitwise xor (circumflex
.Ql ^ ) ,
the bitwise signed left- and right shifts
.Pf ( Ql << ,
.Ql >> ) ,
as well as for the unsigned right shift
.Ql >>> .
.
.Pp
Another numeric operation is
.Cm pbase ,
which takes a number base in between 2 and 64, inclusive, and will act
on the second number given just the same as what equals sign
.Ql =
does, but the number result will be formatted in the base given, as
a signed 64-bit number unless unsigned interpretation of the input
number had been forced.
.
.Pp
Numeric operations support a saturated mode via the question mark
.Ql \&?
modifier suffix; the keyword
.Ql saturated
is optional,
.Ql +? ,
.Ql +?satu ,
and
.Ql +?saturated
are identical.
In saturated mode overflow errors and division and modulo by zero are no
longer reported via the return status, but the result will linger at the
minimum or maximum possible value, instead of overflowing (or trapping).
This is true also for the argument parse step.
For the bitwise shifts, the saturated maximum is 63.
Any caught overflow will be reported via the error number
.Va \&!
as
.Va ^ERR Ns -OVERFLOW .
.
.Bd -literal -offset indent
vput vexpr res -? +1 -9223372036854775808
echo $?/$!/$^ERRNAME:$res
\*(OU0/75/OVERFLOW:-9223372036854775808
.Ed
.
.Pp
Character set agnostic string functions have no notion of locale
settings and character sets.
.
.Bl -hang -width ".It Cm random"
.It Cm date-utc
Outputs the current date and time in UTC (Coordinated Universal
Time) with values named such that
.Ql vput vexpr x date-utc; eval set $x
creates accessible variables.
An optional argument denotes the UNIX seconds-since-the-epoch
to be used instead of the current time.
(The algorithm does not know about leap seconds and works until
65535-12-31T23:59:59.)
.It Cm date-stamp-utc
Outputs the current UTC time in RFC 3339 internet date/time format.
.It Cm epoch
The seconds and nanoseconds since the Unix epoch (1970-01-01T00:00:00)
named
.Ql epoch_sec
and
.Ql epoch_nsec
such that
.Ql vput vexpr x epoch; eval set $x
creates accessible variables.
May be given one to six optional arguments naming (in order) year,
month, day (of month), hour, minute and second to be used instead of the
current time.
(The algorithm works until 65535-12-31T23:59:59.)
.It Cm seconds
Like
.Cm epoch ,
but outputs only the seconds directly as a numeric value.
.It Cm random
Generates a random string of the given length, or of
.Dv \&\&PATH_MAX
bytes (a constant from
.Pa /usr/include )
if the value 0 is given; the random string will be base64url encoded
according to RFC 4648, and thus be usable as a (portable) pathname.
.El
.
.Pp
String operations work, sufficient support provided, according to the
active user's locale encoding and character set
.Pf ( Sx "Character sets" ) .
Where the question mark
.Ql \&?
modifier suffix is supported, a case-insensitive operation mode is
available; the keyword
.Ql case
is optional,
.Ql regex?
and
.Ql regex?case
are identical.
.
.Bl -hang -width ".It Cm regex"
.It Cm makeprint
(One-way) Converts the argument to something safely printable on the
terminal.
.
.It Cm regex
\*(OP A string operation that tries to match the first argument with
the regular expression
.Pf ( Xr re_format 7
or
.Xr regex 7 ,
dependent on host system) given as the second argument.
.Ql \&?
modifier suffix is supported.
With the optional third argument the match group accessors
.Va ^# , ^0 , ^1
are set (in
.Cm local Ns
-\:most scope) for successful matches, and the argument is interpreted
as if specified within dollar-single-quote
.Pf ( Sx "Shell-style argument quoting" ) :
.Bd -literal -offset indent
vput vexpr res regex bananarama \e
    (.*)NanA(.*) '\e${^1}au\e$^2'
echo $?/$!/$^ERRNAME:$res:
\*(OU1/61/NODATA::
vput vexpr res regex?case bananarama \e
    (.*)NanA(.*) '\e${^1}uauf\e$^2'
echo $?/$!/$^ERRNAME:$res:
\*(OU0/0/NONE:bauauframa:
.Ed
.El
.
.
.Mx
.It Ic vpospar
\*(NQ Manage the scope's positional parameters (see
.Va 1 , # , * , @
as well as
.Ic shift ) .
The global scope can be enforced with the modifier
.Cm global .
The argument
.Ql clear
erases the stack.
For
.Ql set
remaining arguments will be used to (re)create the stack,
if that excesses its size limit an
.Va ^ERR Ns -OVERFLOW
error will occur.
.Ql evalset
acts likewise, but only takes one argument to furtherly
.Cm eval Ns
uate in a special mode where number sign
.Ql #
is an ordinary character
.Pf ( Sx "Shell-style argument quoting" ) .
.
.Pp
If the first argument is
.Ql quote ,
a round-trip capable representation of the stack contents is created,
with each quoted parameter separated from each other with the first
character of
.Va ifs ,
and followed by the first character of
.Va if-ws ,
if that is not empty and not identical to the first.
If that results in no separation at all a
.Cm space
character is used.
This mode supports
.Cm vput
.Pf ( Sx "Command modifiers" ) .
The subcommands
.Ql set
and
.Ql quote
can be used (in conjunction with
.Cm eval )
to losslessly (re)create an argument stack from and to a single variable.
.
.Bd -literal -offset indent
vpospar set hey, "'you    ", world!
echo $#: <$1><$2><$3>
\*(OU3: <hey,><'you    ,><world!>

vput vpospar x quote

vpospar clear
echo $#: <$1><$2><$3>
\*(OU0: <><><>

eval vpospar set $x
echo $#: <$1><$2><$3>
\*(OU3: <hey,><'you    ,><world!>

set x=$'a b\en#c d\ene f\en'
set ifs=$'\en'; vpospar set $x; unset ifs
echo $#: <$1><$2><$3>
\*(OU1: <a b
\*(OU#c d
\*(OUe f
\*(OU><><>

set ifs=$'\en'; eval vpospar set $x; unset ifs
echo $#: <$1><$2><$3>
\*(OU1: <a b><><>

set ifs=$'\en'; vpospar evalset $x; unset ifs
echo $#: <$1><$2><$3>
\*(OU3: <a b><#c d><e f>
.Ed
.
.
.Mx
.It Ic visual
(v) Successively invoke the
.Ev VISUAL
display editor on the given messages.
Modified contents are discarded unless
.Va writebackedited
is set, and are not used unless the mailbox can be written to,
and the editor returns a successful exit status.
.Ic edit
can be used instead for a less display oriented editor.
.
.
.Mx
.It Ic write
(w) Writes out the message bodies of the given messages (or the
.Dq dot )
to the given file (or
.Pa /dev/null ) .
Decryption etc is performed.
Deletion or
.Mx -sx
.Sx "automatic message moving"
does not kick in.
Character set conversion to
.Va ttycharset
is performed when saving text data.
.
.Pp
In interactive mode pathnames for MIME parts are consecutively asked
for, an empty input equals
.Pa /dev/null ,
and the filename possibly given to
.Ic \&\&write
itself makes up a prefix; existing output files are appended to.
Shell pipe targets may be indicated via a leading vertical bar
.Ql | ;
Other user input undergoes the usual
.Sx "Filename transformations" ,
including shell pathname wildcard pattern expansions
.Pf ( Xr glob 7 )
and shell variable expansion.
.
.Pp
\*(ID In non-interactive mode the same applies, but suspicious parts of
pathnames of the remaining parts are URL percent encoded (as via
.Ic urlcodec )
to prevent injection of malicious character sequences, resulting in
a filename that will be written into the current directory.
Existing files will not be overwritten, instead the part number or
a dot are appended after a number sign
.Ql #
to the name until file creation succeeds (or fails due to other
reasons).
.
.
.Mx
.It Ic xcall
\*(NQ Tail-call optimized variant of
.Ic call :
the new
.Mx -sx
.Sx Macro
is executed in place of the current one, which will not regain control:
all resources of the current macro will be released first, except the
re-parented settings covered by
.Cm our
scoping.
If this command is not used from within a
.Ic call Ns
ed macro it will silently be (a more expensive variant of)
.Ic call ;
likewise the
.Cm our
modifier is supported but silently turned into
.Cm local .
.
.It Ic xit
(x) A synonym for
.Ic exit .
.
.Mx
.It Ic z
\*(NQ Message
.Ic headers
are shown in
.Va screen Ns
fuls.
Without arguments the next screen of messages is scrolled into view,
like with
.Ql + .
An argument of
.Ql -
scrolls to the previous,
.Ql ^
scrolls to the first, and
.Ql $
to the last screen.
A number argument prefixed by
.Ql +
or
.Ql \-
indicates a relative to the current position, a number without prefix an
absolute position.
.
.Mx
.It Ic Z
\*(NQ Similar to
.Ic z ,
but scrolls to the next or previous
.Va screen
that contains at least one
.Ql new
or
.Ic flag Ns
ged message.
.El
.\" }}}
.
.\" }}}
.
.
.\" .Sh COMMAND ESCAPES {{{
.Sh "COMMAND ESCAPES"
.
.Sx "Compose mode"
command escapes offer attachment management, header editing, invocation of
.Sx COMMANDS ,
and more.
Available when interactive, requested via
.Fl ~ ,
or in batch mode
.Pf ( Fl # )
they are only recognized in the leftmost column and consist of an
.Va escape
character (default tilde
.Ql ~ ) ,
optional
.Sx "Command modifiers" ,
and a command character.
Interspersed whitespace is ignored.
To write an
.Va escape
character in the leftmost column, double it.
Addition to the \*(oPal
.Ic history
is prevented by placing any number of whitespace after
.Va escape .
The \*(oPal key
.Ic bind Ns
ings support a
.Sx "Compose mode"
specific context.
Modifiers:
.
.
.Bl -bullet
.It
Hyphen-minus
.Ql -
acts like
.Cm ignerr
does for
.Sx COMMANDS ,
and overrides
.Va errexit .
.Bd -literal -offset indent
set errexit; reply .
~ - : bad
\*(OU\*(xX: bad: unknown command
~:bad
\*(OU\*(xX: bad: unknown command
\*(OU\*(xX: Failed to prepare composed message
$
.Ed
.
.It
Dollar
.Ql $
.Cm eval Ns
uates the remains of the line as often as it is used
.Pf ( Sx "Shell-style argument quoting" ) .
\*(ID For now the entire input line is evaluated as a whole; to avoid
that control operators like semicolon
.Cm \&;
are interpreted unintentionally, they must be quoted.
.Bd -literal -offset indent
set var='bla bla bla'; reply .
~:echo '$var'
\*(OU$var
~$:echo '$var'
\*(OUbla bla bla
.Ed
.El
.
.
.Pp
Unless otherwise documented escapes manage the error number
.Va \&!
and the exit/return status
.Va \&? ;
.Va errexit
may cause leaving compose mode and program exits.
.
.
.Bl -tag -width ".It Ic BaNg"
.Mx
.It Ic ~! Ar command
Execute the given
.Ev SHELL
.Ar command .
May expand each non-reverse solidus
.Ql \e
escaped exclamation mark
.Ql \&!
when
.Va bang
is set (see there); reverse solidus has no other special meaning.
.
.Mx
.It Ic ~.
.Sx "Compose mode"
is left, and the message is sent.
The hooks
.Va on-compose-splice-shell
and
.Va on-compose-splice ,
in order, are called when set, after which, in interactive mode,
.Va askatend
(leading to
.Va askcc , askbcc )
and
.Va askattach
will be checked as well as
.Va asksend ,
after which a set
.Va on-compose-leave
hook will be called,
.Va autocc
and
.Va autobcc
will be joined in if set, finally a given
.Va message-inject-tail
will be incorporated.
.
.Mx
.It Ic ~: Ar command Ns \0or Ic ~_ Ar command
Can be used to execute
.Sx COMMANDS
(not all are allowed in compose mode).
.
.Mx
.It Ic ~< Ar filename
Identical to
.Ic ~r .
.
.Mx
.It Ic ~<! Ar command
.Ar command
is executed using the
.Ev SHELL ,
and its standard output is inserted into the message.
.
.Mx
.It Ic ~?
\*(OP Write a summary of command escapes.
.
.Mx
.It Ic ~@ Op Ar filename...
Append to, or edit the list of attachments.
Does not manage error number
.Va \&!
and exit status
.Va \&?
.Pf ( Ic ~^
offers fine grained control).
The append mode expects a list of
.Ar filename
arguments as shell tokens
.Pf ( Sx "Shell-style argument quoting" ;
token-separating commas are also ignored), to be
interpreted as documented for the command line option
.Fl a ,
with the message number exception as below.
.Pp
Without
.Ar filename
arguments the attachment list is edited, entry by entry;
if a filename is left empty, that attachment is deleted from the list;
once the end of the list is reached either new attachments may be
entered or the session can be quit by committing an empty input.
In non-interactive as well as in batch mode
.Pf ( Fl # )
the list of attachments is effectively not edited but instead recreated;
again, an empty input ends list creation.
.Pp
For all modes, if a given filename solely consists of the number sign
.Ql #
followed by either a valid message number of the currently active
mailbox, or by a period
.Ql \&. ,
referring to the current message of the active mailbox, the so-called
.Dq dot ,
the given message is attached as a
.Ql message/rfc822
MIME message part.
The number sign must be quoted to avoid misinterpretation as a shell
comment character.
.
.Mx
.It Ic ~| Ar command
Filter the message text through a
.Ev SHELL
.Ar command ;
its standard output forms the new message text.
If no output or a non-0 exit status is generated,
the original message text is retained.
The command
.Xr fmt 1
is often used as a rejustifying filter
.Pf ( Ql ~| /usr/bin/fmt -tuw11 ) .
.Pp
.Ql ~||
instead filters the entire message including header fields, so that
.Ql ~|| echo Fcc: /tmp/test; cat
will prepend a file-carbon-copy message header.
Also see
.Ic ~e , ~v .
.
.
.Mx
.It Ic ~^ Ar cmd Op Ar subcmd Op Ar arg3 Op Ar arg4
Inspect and modify the message.
Note the arguments are (command line is) evaluated according to
.Sx "Shell-style argument quoting" :
the command
.Ic digmsg
shares the inspection and modification machinery.
Error number
.Va \&!
and exit status
.Va \&?
are not managed: errors are handled via the protocol,
and hard errors like I/O failures cannot be handled.
.
.Pp
The protocol consists of a command line followed by (a) response line(s).
The first field of the first response line represents a status code
which denotes success, whether result data is to be expected, and if,
the format of the result data.
Response data is quoted as necessary for consumption by
.Ic readsh ,
or
.Ic vpospar
and
.Cm eval ,
to name a few.
Responses must be fully consumed before further commands can be issued!
Status codes:
.
.
.Pp
.Bl -tag -compact -width ".It Ql 210"
.It Ql 210
Status ok; the remains of the line are the result.
.
.It Ql 211
Status ok; more status may optionally be appended.
None to multiple address lines follow, terminated by an empty line.
Address lines consist of two shell tokens, the plain address, for example
.Ql bob@exam.ple ,
followed by the unstripped address (see
.Va fullnames ) :
.Ql '(Lovely) Bob <bob@exam.ple>' .
Non-addresses are indicated via the first token: hyphen-minus
.Ql -
for files, vertical bar
.Ql |
for pipes, and number sign
.Ql #
for names which will undergo
.Ic alias
processing; the second token will be the value.
.
.It Ql 212
Status ok; more status may optionally be appended.
What follows are lines of one furtherly unspecified string token each,
terminated by an empty line.
.
.It Ql 500
Syntax error; invalid command.
.
.It Ql 501
Syntax error or otherwise invalid parameters or arguments.
.
.It Ql 505
Error: an argument fails verification.
For example an invalid address has been specified (also see
.Va expandaddr ) ,
or a modifying subcommand has been used on a read-only message,
or an attempt was made to modify virtual, auto-generated, read-only data.
.
.It Ql 506
Error: an otherwise valid argument is contextually invalid.
For example, a second address is added to a header which may consist of
a single address only.
.El
.
.
.Pp
The message remains unmodified upon error.
Most commands can fail with
.Ql 500
if required arguments are missing, or on otherwise false command usage.
(\*(ID The latter does not yet occur regularly, because as stated in
.Sx "Shell-style argument quoting"
our argument parser is not yet smart enough to work on subcommand base;
for example one might get excess argument error for a three argument
subcommand that receives four arguments, but not for a four argument
subcommand which receives six arguments: here excess will be joined.)
The following (case-insensitive) commands are supported:
.
.
.Bl -hang -width ".It Cm version"
.It Cm attachment
Manage message attachments.
The second argument specifies the subcommand, one of:
.
.Bl -hang -width ".It Cm remove"
.It Cm attribute
Uses the same search mechanism as described for
.Cm remove ,
and prints all attributes of the first found attachment via
.Ql 212
upon success, or
.Ql 501
if no such attachment can be found.
The none to multiple success result lines consist of a keyword and
a value token, terminated by an empty line.
.
.It Cm attribute-at
Uses the same search mechanism as described for
.Cm remove-at
and is otherwise identical to
.Cm attribute .
.
.It Cm attribute-set
Uses the same search mechanism as described for
.Cm remove ,
and sets the attribute given as the fourth to the value given as
the fifth token argument.
An empty value causes the given attribute to be removed,
or reset to a default if existence of the attribute is crucial.
Upon success
.Ql 210
with the index of the found attachment following is returned,
.Ql 505
for message attachments or if the given keyword is invalid, and
.Ql 501
if no such attachment can be found.
The following keywords may be used (case-insensitively):
.Pp
.Bl -hang -compact -width ".It Ql filename"
.It Ql filename
Sets the filename of the MIME part, that is, the name that is used for
display and when (suggesting a name for) saving (purposes).
.It Ql content-description
Associate some descriptive information to the attachment's content, used
in favour of the plain filename by some MUAs.
.It Ql content-id
May be used for uniquely identifying MIME entities in several contexts;
this expects a special reference address format as defined in RFC 2045
and generates a
.Ql 505
upon address content verification failure.
.It Ql content-type
Defines the media type/subtype of the part, which is managed
automatically, but can be overwritten.
.It Ql content-disposition
Automatically set to the string
.Ql attachment .
.El
.
.It Cm attribute-set-at
Uses the same search mechanism as described for
.Cm remove-at
and is otherwise identical to
.Cm attribute-set .
.
.It Cm insert
Add the attachment given as the third argument, specified exactly as
documented for the command line option
.Fl a ,
and supporting the message number extension as documented for
.Ic ~@ .
Reports
.Ql 210
upon success, with the index of the new attachment following,
.Ql 505
if the given file cannot be opened,
.Ql 506
if an on-the-fly performed character set conversion fails, otherwise
.Ql 501
is reported; this is also reported if character set conversion is
requested but not available.
.
.It Cm list
List all attachments via
.Ql 212 ,
or report
.Ql 501
if no attachments exist.
This command is the default command of
.Cm attachment
without second argument.
.
.It Cm remove
Remove the attachment given as the third argument, and report
.Ql 210
upon success or
.Ql 501
if no such attachment can be found.
If the given argument contains path components, an exact match of the
path used to create the attachment is taken immediately, but the plain
path basename will also be found by traversing all attachments if only
one match results; if multiple basenames match, a
.Ql 506
error occurs.
Message attachments are treated as absolute pathnames.
If no path component exists then all attachments will be searched for
.Ql filename=
parameter matches as well as for matches of the basename of the path
which has been used for attachment creation; multiple matches result in a
.Ql 506 .
.
.It Cm remove-at
Interprets the third argument as a number and removes the attachment at
that list position (counting from one!), reporting
.Ql 210
upon success or
.Ql 505
if the argument is not a number or
.Ql 501
if no such attachment exists.
.El
.
.
.It Cm header
Manage message headers.
Header name case is not normalized, so that case-insensitive comparison
should be used when matching names.
The second argument specifies the subcommand to apply, one of:
.
.
.Bl -hang -width ".It Cm remove"
.It Cm insert
Create a new or another instance of the header given in the third token,
with the content value as given in the fourth token.
Returns
.Ql 501
if the header name is invalid, or if content extraction fails to succeed,
.Ql 505
if any extracted address does not pass syntax and/or security checks, or
an attempt was made to modify virtual, read-only data, and
.Ql 506
to indicate prevention of excessing a single-instance header \(em note that
.Ql Subject:
can be appended to (a space separator will be added automatically first).
.Ql To: ,
.Ql Cc:
and
.Ql Bcc:
support the
.Ql ?single
modifier to enforce treatment as a single recipient, for example
.Ql header insert To?single: 'exa, <m@ple>' ;
the word
.Ql single
is optional.
.Pp
.Ql 210
is returned upon success, followed by the name of the header and the list
position of the newly inserted instance.
The list position is always 1 for single-instance header fields.
All free-form header fields are managed in a single list; also see
.Va customhdr .
.
.It Cm headerpick
Takes the name of a
.Ic headerpick
.Ar context
and filters accordingly, giving
.Ql 210
on success, and
.Ql 505
for read-only messages, and
.Ql 501
for an invalid
.Ar context .
.
.It Cm list
Without third argument a list of all headers is generated via
.Ql 210 ,
otherwise only the given one is listed, a non-existing one gives
.Ql 501 .
This is the default subcommand of
.Cm header .
.
.It Cm remove
Remove all instances of the header given as the third token, reporting
.Ql 210
upon success,
.Ql 501
if no such header can be found, and
.Ql 505
when trying to remove a virtual, auto-generated, or read-only header.
.
.It Cm remove-at
Remove from the header given as the third argument the instance at the
list position (counting from one!) given in the fourth token, reporting
.Ql 210
upon success or
.Ql 505
if the position is not a number, or is inaccessible, and
.Ql 501
if no such header instance exists.
.
.It Cm show
Show content of the header given third.
The content will be converted to
.Va ttycharset
(\*(ID and then be made printable according to
.Ev LC_ALL ) .
Dependent on the header type this may respond with
.Ql 211
or
.Ql 212 ;
any failure results in
.Ql 501 .
.El
.
.
.Pp
.Sx "Compose mode"
offers read-only access to optional, virtual, read-only headers:
.
.
.Pp
.Bl -tag -compact -width ".It Va BaNg"
.It Ql Mailx-Command:
The name of the command that generates the message, one of
.Ql forward ,
.Ql Lreply ,
.Ql mail ,
.Ql Reply ,
.Ql reply ,
.Ql resend .
This pseudo header always exists.
.
.It Ql Mailx-Edited-Sender:
.It Ql Mailx-Edited-Origin:
Different to the RFC 5322 originator fields of the otherwise identical
.Ql -Orig-
series below these might take into account
.Va reply-to-honour
and
.Va reply-to-swap-in .
This sender field will however be identical to
.Ql Mailx-Orig-Sender:
unless the edited (replaced) originator field is unambiguous.
.
.It Ql Mailx-Orig-Sender:
.It Ql Mailx-Orig-From:
.It Ql Mailx-Orig-To:
.It Ql Mailx-Orig-Cc:
.It Ql Mailx-Orig-Bcc:
The values of said headers of the original message which has been
addressed by any of
.Ic reply , forward , resend .
The sender field is filled in according to what is described for
.Va from .
.
.It Ql Mailx-Raw-To:
.It Ql Mailx-Raw-Cc:
.It Ql Mailx-Raw-Bcc:
Represent the frozen initial state of these headers before any
transformation
.Pf ( Ic alias ,
.Ic alternates ,
.Va recipients-in-cc
etc.) took place.
.El
.
.
.It Cm epoch
The message date as seconds since the UNIX epoch (1970-01-01T00:00:00) via
.Ql 210 .
Error for an invalid date is
.Ql 501 ,
for using this command in
.Sx "Compose mode"
.Ql 505 .
.Ic vexpr
can be used to convert times, for example:
.Bd -literal -offset indent
digmsg create 1
digmsg 1 epoch
readsh t1 t2
if $t1 -eq 210
  vput vexpr t1 date-utc $t2
end
ec t1: $t1
\*(OUt1: dutc_year=2023 [..]
digmsg remove 1
.Ed
.
.It Cm help , \&?
Show a command abstract via
.Ql 211 .
.
.It Cm version
Print the protocol version via
.Ql 210 .
.El
.
.
.Mx
.It Ic ~A
The same as
.Ql Ic ~i Ns \| Va Sign .
.
.Mx
.It Ic ~a
The same as
.Ql Ic ~i Ns \| Va sign .
.
.Mx
.It Ic ~b Ar name ...
Add blind carbon copy recipients.
.
.Mx
.It Ic ~c Ar name ...
Add carbon copy recipients.
.
.Mx
.It Ic ~d
Paste the contents of
.Ev DEAD .
.
.Mx
.It Ic ~e
Invoke
.Ev EDITOR
on the message draft, including headers if
.Va editheaders
is set, then return to compose mode.
.Ic ~v
instead uses a more display oriented editor, and
.Ic ~|
pipe-based editing.
.
.Mx
.It Ic ~F Op Ar messages
Read in
.Ar messages
or the
.Dq dot ,
including all message headers and MIME parts;
.Va forward-add-cc
as well as
.Va forward-inject-head
and
.Va forward-inject-tail
are honoured.
.
.Mx
.It Ic ~f Op Ar messages
Read in
.Ar messages
or the
.Dq dot .
Strips down the headers according to the
.Ql forward
.Pf ( Ql type
with
.Va posix )
selection of
.Ic headerpick ;
For MIME multipart messages, only the first displayable part is used;
.Va forward-add-cc
as well as
.Va forward-inject-head
and
.Va forward-inject-tail
are honoured.
.
.Mx
.It Ic ~H
In interactive mode, edit headers
.Ql From: ,
.Ql Reply-To:
and
.Ql Sender: .
The default values for these come from
.Va from , reply-to
and
.Va sender .
In non-interactive mode this sets
.Va ^ERR Ns -NOTTY .
.
.Mx
.It Ic ~h
In interactive mode, edit headers
.Ql To: ,
.Ql Cc: ,
.Ql Bcc:
and
.Ql Subject: .
In non-interactive mode this sets
.Va ^ERR Ns -NOTTY .
.
.Mx
.It Ic ~I Ar variable
Insert the value of
.Ar variable .
If empty or unset the message remains unaltered.
Any embedded character sequences
.Ql \et
horizontal tabulator and
.Ql \en
line feed are expanded in
.Va posix
mode; otherwise the expansion should occur at
.Ic set
time
.Pf ( Va v15-compat , Cm wysh ) .
.
.Mx
.It Ic ~i Ar variable
Like
.Ic ~I ,
but appends a newline character.
.
.Mx
.It Ic ~M Op Ar messages
Read in
.Ar messages
or the
.Dq dot ,
indented by
.Va indentprefix .
Honours
.Va forward-add-cc
as well as
.Va forward-inject-head
and
.Va forward-inject-tail .
.
.Mx
.It Ic ~m Op Ar messages
Read in
.Ar messages
or the
.Dq dot ,
indented by
.Va indentprefix .
Strips down the headers according to the
.Ql type
selection of
.Ic headerpick ;
For MIME multipart messages, only the first displayable part is used;
.Va forward-add-cc
as well as
.Va forward-inject-head
and
.Va forward-inject-tail
are honoured.
.
.Mx
.It Ic ~p
Display the message draft, prefaced by the message headers, and followed
by the attachment list, if any.
.
.Mx
.It Ic ~Q Op Ar messages
Read in
.Ar messages
or the
.Dq dot ,
using the algorithm of
.Va quote
(or a default if unset), honouring
.Va quote-add-cc .
.
.Mx
.It Ic ~q
Abort composing, copying the draft to
.Ev DEAD
if
.Va save
is set.
.
.Mx
.It Ic ~R Ar filename Op Ar HERE-delimiter
Identical to
.Ic ~r ,
but indent each line that has been read by
.Va indentprefix .
.
.Mx
.It Ic ~r Ar filename Op Ar HERE-delimiter
Read in
.Ar filename ,
object to
.Sx "Filename transformations"
excluding shell globs and variable expansions; if
.Ar filename
is the hyphen-minus
.Ql -
then standard input is used:
only then
.Ar HERE-delimiter
may be used to denote a marker that will stop reading if seen on a line
by itself (an earlier EOF is an error); the
.Ar HERE-delimiter
is a required argument in non-interactive mode.
A single-quoted delimiter will avoid
.Sx "Shell-style expansions"
of data read (\*(ID no expansion yet regardless).
.
.Mx
.It Ic ~s Ar string
Set the
.Ql Subject: .
Newline (NL) and carriage-return (CR) are normalized to space (SP).
.
.Mx
.It Ic ~t Ar name ...
Add direct recipients.
.
.Mx
.It Ic ~U Op Ar messages
Read in
.Ar messages
or the
.Dq dot ,
excluding all headers, indented by
.Va indentprefix .
Honours
.Va forward-add-cc
as well as
.Va forward-inject-head
and
.Va forward-inject-tail .
.
.Mx
.It Ic ~u Op Ar messages
Read in
.Ar messages
or the
.Dq dot ,
excluding all headers.
Honours
.Va forward-add-cc
as well as
.Va forward-inject-head
and
.Va forward-inject-tail .
.
.Mx
.It Ic ~v
Invoke
.Ev VISUAL
on the message draft, including headers if
.Va editheaders
is set, then return to compose mode.
.Ic ~e
instead uses a less display oriented editor, and
.Ic ~|
pipe-based editing.
.
.Mx
.It Ic ~w Ar filename
Write (append) the message draft onto the named file, subject to
.Sx "Filename transformations" .
.
.Mx
.It Ic ~x
Same as
.Ic ~q ,
except the message draft is never saved.
.El
.
.\" }}}
.
.
.\" .Sh INTERNAL VARIABLES {{{
.Sh "INTERNAL VARIABLES"
.
.\" intro {{{
Variables can be created or changed with
.Ic set ,
and erased with
.Ic unset .
.Sx "Built-in variables"
may have typed values and attributes,
custom variables with optional (string) values may be freely defined.
.Ic varshow
will inspect all built-in, or the given variables,
.Ic set
without arguments all currently existing ones; both can be more
.Va verbose .
Some built-in variables are synchronized from and with the program
.Sx ENVIRONMENT ,
others can be linked or created with
.Ic environ
to henceforth have said property; these have to honour
.Ev SHELL
.Mx -sx
.Sx "variable name rules" .
.
.Bd -literal -offset indent
set one=val\e 1 two="val 2" \e
    three='val "3"' four=$'val \e'4\e''; \e
  environ set FIVE=val\e 5; \e
  varshow one two three four FIVE; \e
  unset one two three four FIVE; \e
  varshow one two three four FIVE
.Ed
.
.Pp
.Sx "Shell-style argument quoting"
is necessary when assigning values;
.Sx "Built-in variables"
may be interpreted as colour names, command specifications, normal text,
be treated as numbers (decimal if so documented, otherwise
.Mx -sx
.Sx "number syntax rules"
apply), etc.
Boolean variables have no value, they are either
.Dq set
or
.Dq unset ,
but there exists a special
.Dq boolean string :
either a decimal integer (with
.Ql 0
being false and
.Ql 1
or any other value being true), or one of the (case-insensitive) strings
.Ql off ,
.Ql no ,
.Ql n
and
.Ql false
for a false boolean and
.Ql on ,
.Ql yes ,
.Ql y
and
.Ql true
for a true boolean.
.Mx -ix quadoption
A special kind of boolean string is the
.Dq quadoption
that is optionally prefixed with the (case-insensitive) term
.Ql ask- ,
as in
.Ql ask-yes :
in interactive mode the user will be prompted, otherwise the actual
boolean is used.
.
.Pp
Some built-in variables exist as so-called
.Dq chains
which extend the plain
.Ql variable
with
.Ql variable-HOST
and
.Ql variable-USER@HOST
variants.
Here
.Ql HOST
will be converted to all lowercase when looked up (but not when the
variable is set or unset!), \*(oPally IDNA converted, and indeed means
.Ql server:port
if a
.Ql port
had been specified in the contextual Uniform Resource Locator URL, see
.Sx "On URL syntax and credential lookup" .
Even though this mechanism is based on URLs no URL percent encoding
.Pf ( Ic urlcodec )
may be applied to neither of
.Ql USER
nor
.Ql HOST :
variable chains need to be specified using raw data;
the mentioned section contains examples.
Chains are explicitly documented, and because they are special users
should not create customs like
.Ql name-xyz .
.\" }}}
.
.\" .Ss "Initial settings" {{{
.Ss "Initial settings"
.
The standard \*(PO mandates these initial settings
(unsupported in brackets, deviations in parenthesis):
.Pf no Va allnet ,
.Pf [ Pf no Va append ] ,
.Va asksub ,
.Pf no Va askbcc ,
.Pf no Va askcc ,
.Pf no Va autoprint ,
.Pf no Va bang ,
.Pf no Va cmd ,
.Pf no Va crt ,
.Pf no Va debug ,
.Pf no Va dot ,
.Va escape Ns ='~'
(tilde),
.Pf no Va flipr ,
.Pf no Va folder ,
.Va header ,
.Pf (no) Va hold ,
.Pf no Va ignore ,
.Pf no Va ignoreeof ,
.Va indentprefix Ns =$'\et'
(tabulator),
.Pf (no) Va keep ,
.Pf (no) Va keepsave ,
.Pf no Va metoo ,
.Pf [ Pf no Va onehop ] ,
.Pf no Va outfolder ,
.Pf no Va page ,
.Va prompt Ns ='? ' ,
.Pf no Va quiet ,
.Pf no Va record ,
.Va save ,
.Pf no Va screen ,
.Pf (no) Va sendwait ,
.Pf no Va showto ,
.Pf no Va Sign ,
.Pf no Va sign ,
.Va toplines Ns =5 .
.
.Pp
Some initial and some default settings are built-in, some deviate,
some may be tweaked by
.Sx "Resource files" .
Displaying the former is accomplished via
.Ic set :
.Ql $ \*(xX -:/ -v -Xset -Xx .
This implementation sets
.Va sendwait
(with extended meaning), and does not support the
.Pf no Va append
(worked (correctly) only for MBOX mailboxes) and
.Pf no Va onehop
(use command line options or
.Va mta-arguments
to pass
.Va mta
options) variables.
The built-in defaults set, among others,
.Va hold ,
.Va keep
and
.Va keepsave ,
and the system-wide resource file as shipped establishes a default
.Ic headerpick
selection and more.
.\" }}}
.
.\" .Ss "Built-in variables" {{{
.Ss "Built-in variables"
.
.Bl -tag -width ".It Va BaNg"
.
.Mx
.It Va \&?
\*(RO The exit status of the last of
.Sx COMMANDS ,
or the
.Ic return
value of the last
.Ic call Ns
ed
.Mx -sx
.Sx Macro .
A non-0 value has a meaning in the state machine: a
.Ic set
.Va errexit
will cause a program exit, just like any error while loading
.Sx "Resource files"
in
.Va posix
mode.
.Cm ignerr ,
one of the
.Sx "Command modifiers" ,
instructs the state machine to ignore errors.
.
.Mx
.It Va \&!
\*(RO The
.Xr errno 3 ;
also available via
.Va ^ERR ,
the name and documentation via
.Va ^ERRNAME
and
.Va ^ERRDOC .
.Mx -sx
.Sx Macro Ns
s may signal an error number via
.Ic return .
\*(ID Error numbers are
.Dq real
only for commands which state that they manage
.Va \&! ,
for others the umbrella value
.Va ^ERR Ns -INVAL
will likely be used.
.
.
.Mx
.It Va ^
\*(RO A multiplexer for and of:
.
.Bl -tag -width ".It Va BaNg"
.Mx
.Mx
.Mx
.Mx
.Mx
.Mx
.It Va ^? , ^* , ^@ , ^# , ^0 , ^1 , ..
Access extended
.Ic return
values of the last
.Mx -sx
.Sx Macro
.Ic call Ns
ed (if
.Va \&\&^?
is true), regular expression match groups as created for example by
.Ic if
and
.Ic vexpr ,
and other dedicated documented result sets, for example of
.Ic fop
.Cm \&\&glob ,
in the
.Cm local Ns
-\:most
.Mx -sx
.Sx scope .
.Va \&\&^#
holds the number of accessible values
.Pf ( Va \&\&^1
etc).
For return values
.Va \&\&^0
stores the macro name, for regular expressions the entire match,
per-command documentation applies otherwise.
.Va \&\&^*
and
.Va \&\&^@
behave like
.Va *
and
.Va @ .
.Bd -literal -offset indent
define x {
  if abrakadabra =~ (.+)ka.*(b.+)a
    echo $^#: <$^0> <$^1> <$^2>
    return ^ says $^2
  end
}
call x; echo $^?, $^#, $^0 $^1 $^2
\*(OU3: <abrakadabra> <abra> <br>
\*(OU1, 3, x says br
.Ed
.
.Mx
.Mx
.Mx
.It Va ^ERR , ^ERRDOC , ^ERRNAME
The number, documentation, and name, respectively, of the current
.Xr errno 3 ;
the first mirrors
.Va \&! .
Each may be suffixed with a hyphen minus followed by a name or number,
in which case the expansion refers to the given error.
Errors directly map to (a subset of) the system error values,
with (high numbered) fallbacks for unsupported constants:
.Bd -literal -offset indent
define work {
  \eeval echo \e$1: \e$^ERR-$1: \e
    \e$^ERRNAME-$1: \e$^ERRDOC-$1
  \eif $1 -lt 16
    \eeval xcall work \e$(($1 + 1))
  \eend
}
\ecall work $^ERR-NONE
.Ed
.
.Mx
.Mx
.It Va ^ERRQUEUE-COUNT , ^ERRQUEUE-EXISTS
Number of messages in the \*(oPal queue of
.Ic errors ,
and a queue state indicator: empty or (translated)
.Dq ERROR ;
0 and the empty string unless
.Va features
includes
.Ql ,+errors, .
.El
.
.
.Mx
.It Va *
\*(RO Expands all positional parameters (see
.Va 1 ) ,
separated by the first character of
.Va ifs .
\*(ID The special semantics of the corresponding
.Ev SHELL
parameter are not yet supported.
.
.Mx
.It Va @
\*(RO Expands all positional parameters (see
.Va 1 ) ,
separated by a space character.
If placed in double quotation marks, each positional parameter is
properly quoted to expand to a single parameter again.
(For example, to recreate arguments when
.Ic call Ns
ing another
.Mx -sx
.Sx Macro . )
.
.Mx
.It Va #
\*(RO The number of positional parameters, see
.Va 1 .
.
.Mx
.It Va \&0
\*(RO At top-level the program's name,
.Dq compose mode
in
.Sx "Compose mode" .
In
.Ic call Ns
ed
.Mx -sx
.Sx Macro
.Mx -sx
.Sx scope
the calling macro's name, or the empty string for top-level,
but also inside a hook.
.Pf \*(OB\0 Ic vexpr
used to use it as
.Va ^0 .
.
.Mx
.It Va 1
\*(RO Positional parameter access; further positions are accessible with
.Ql 2 ,
.Ql 3
etc.; they can be
.Ic shift Ns
ed from the front, so former 2 becomes 1 etc.
Positional parameters mostly exist within
.Ic call Ns
ed
.Mx -sx
.Sx Macro Ns
s; they can be managed directly with
.Ic vpospar .
.Pf \*(OB\0 Ic vexpr
used to use it as
.Va ^1
etc.
.
.Mx
.It Va account
\*(RO Name of the active
.Ic account .
The command line option
.Fl A
sets this in advance to flag the later account switch.
.
.Mx
.It Va allnet
\*(BO If set address comparisons use only the local part (ignore domains).
.
.Mx
.It Va askatend
\*(BO Instead prompts (interactively) for
.Ql Cc:
and
.Ql Bcc:
lists when leaving
.Sx "Compose mode" .
.
.Mx
.It Va askattach
\*(BO Prompt (interactively) for files to attach before leaving
.Sx "Compose mode" ;
an empty line finalizes the list.
.
.Mx
.It Va askbcc
\*(BO Prompt (interactively) for blind carbon copy recipients (when leaving
.Sx "Compose mode"
with
.Va askatend
or
.Va bsdcompat ) .
.
.Mx
.It Va askcc
\*(BO Prompt (interactively) for carbon copy recipients (when leaving
.Sx "Compose mode"
with
.Va askatend
or
.Va bsdcompat ) .
.
.Mx
.It Va asksend
\*(BO Prompt (interactively) for send confirmation before leaving
.Sx "Compose mode"
after having shown a preliminary envelope summary.
.
.Mx
.It Va asksign
\*(BO\*(OP Prompt (interactively) for whether a message is to be signed
.Pf ( Sx "Signed and encrypted messages with S/MIME" ) ;
.Va smime-sign
is ignored when this is set.
.
.Mx
.It Va asksub
\*(BO Prompt (interactively) for a subject unless one already exists.
(For \*(PO compatibility
.Va \&\&ask
actively maps to this.)
.
.Mx
.It Va attrlist
Defines
.Sx "Message states"
dependent display characters for the
.Ql attribute
column of
.Va headline
as shown for
.Ic headers ,
in the following order (the default is
.Ql NUROSPMFAT+\-$~ ,
or
.Ql NU\ \ *HMFAT+\-$~
if
.Va bsdflags
is set):
.Pp
.Bl -tag -compact -width ".It Ql _%%_
.It Ql N
New.
.It Ql U
Unread but old.
.It Ql R
New but read.
.It Ql O
Read and old.
.It Ql S
Saved.
.It Ql P
Preserved.
.It Ql M
.Ev MBOX Ns
ed.
.It Ql F
Flagged.
.It Ql A
Answered.
.It Ql T
Draft.
.It Ql +
\*(ID A (collapsed) thread in threaded
.Ic sort
mode;
.It Ql -
\*(ID An uncollapsed thread in threaded
.Ic sort
mode; only used in conjunction with
.Fl L .
.It Ql $
Classified as spam.
.It Ql ~
classified as possible spam.
.El
.
.
.Mx
.It Va autobcc
A list of blind carbon copy recipients that shall be added to each
outgoing message.
.
.Mx
.It Va autocc
A list of carbon copy recipients that shall be added to each
outgoing message.
.
.Mx
.It Va autocollapse
\*(BO Automatically
.Ic collapse
threads in
.Ic sort
.Ql thread
mode.
.
.Mx
.It Va autoprint
\*(BO
.Ic type
the new
.Dq dot
after
.Ic delete
and
.Ic undelete ,
if any, as via
.Ic dp
or
.Ic dt .
.
.Mx
.It Va autosort
Enter the given
.Ic sort Ns
ed mode when opening a
.Ic folder ,
for example
.Ql set autosort=thread autocollapse .
.
.Mx
.It Va bang
\*(BO Enable special-case treatment of non-reverse-solidus
.Ql \e
escaped exclamation mark
.Ql \&!
characters in
.Ic \&!
.Sx COMMANDS
and
.Ic ~!
.Sx "Compose mode"
.Sx "COMMAND ESCAPES" .
After normal operation has started (see
.Fl X ) ,
and if not executing a
.Mx -sx
.Sx Macro ,
nor loading files via
.Ic source ,
but processing input lines (also via
.Fl Y ) ,
any such non-escaped exclamation mark will be replaced with the last
command executed (under the same circumstances) and stored in
.Va bang-data .
.
.Mx
.It Va bang-data
\*(RO Current
.Va bang
expansion.
.
.Mx
.It Va bind-timeout
\*(OB Predecessor of
.Va bind-inter-byte-timeout .
\*(ID Setting this automatically sets the successor.
.
.Mx
.It Va bind-inter-byte-timeout
\*(OP Often terminals generate multi-byte sequences for diverse keys,
yet these cannot be read as a unit.
(Such sequences can also be freely defined via
.Ic bind . )
This specifies a timeout in milliseconds that the
.Mx -sx
.Sx MLE
.Pf ( Sx "On terminal control and line editor" )
waits for more bytes to arrive unless it treats a sequence as completed.
The default is 200, the maximum is about 10000 (10 seconds).
The comments mention affected sequences in this example:
.Bd -literal -offset indent
bind base abc echo 0 # abc
bind base ab,c echo 1 # ab
bind base abc,d echo 2 # abc
bind base ac,d echo 3 # ac
bind base a,b,c echo 4
.Ed
.
.Mx
.It Va bind-inter-key-timeout
\*(OP Multi-key
.Ic bind
sequences (for example
.Ql a,b,c )
do not time out unless this is set like for (and (much) larger as)
.Va bind-inter-byte-timeout .
.
.Mx
.It Va bsdcompat
\*(BO Some cosmetical adjustments towards traditional BSD style;
has the same affect as setting
.Va askatend
and all other variables prefixed with
.Ql bsd ;
it also changes the behaviour of
.Va emptystart
(but which does not exist in BSD).
.
.Mx
.It Va bsdflags
\*(BO Shift
.Va attrlist
towards traditional BSD style.
.
.Mx
.It Va bsdheadline
\*(BO Shift
.Va headline
towards traditional BSD style.
.
.Mx
.It Va bsdmsgs
\*(BO Changes some informational messages towards traditional BSD style.
.
.Mx
.It Va bsdorder
\*(BO Causes the
.Ql Subject:
field to appear immediately after the
.Ql To:
field in message headers and with the
.Ic ~h
.Sx "COMMAND ESCAPES" .
.
.Mx
.Mx
.Mx
.Mx
.It Va build-cc , build-ld , build-os , build-rest
\*(RO The build environment: operating system (usually taken from
.Xr uname 1 ) ,
compiler, linker and a possible (configuration) rest.
Much of this information is shown in
.Ic version Ns
s
.Va verbose
output.
.
.Mx
.It Va charset-7bit
7-bit character set; defaults to US-ASCII, and should be US-ASCII
compatible (to comply to email standards); will appear as
.Ql charset=
in
.Ql Content-Type:
MIME header fields for 7-bit clean message data.
.
.Mx
.It Va charset-8bit
\*(OP 8-bit character set used as an implicit last member of
.Va sendcharsets
Defaults to UTF-8 if character set conversion is available (see
.Sx "Character sets" ) ,
to ISO-8859-1 otherwise (unless UTF-8 is always supported).
.
.Mx
.It Va charset-locale
\*(RO\*(OP Set to the character set of the user's locale; see
.Sx "Character sets" .
.
.Mx
.It Va charset-unknown-8bit
\*(OP RFC 1428 specifies conditions when internet mail gateways shall
.Dq upgrade
mail message content to a character set named
.Ql unknown-8bit :
because of its unclassified nature conversion to
.Va ttycharset
is impossible.
If set
.Ql unknown-8bit
is assumed to really be the given character set instead of
.Va charset-8bit .
Also taken into account when a
.Ql binary
MIME message part
.Pf ( Sx "The mime.types files" )
is forcefully treated as text.
.
.Mx
.It Va cmd
The default command for
.Ic pipe .
.
.Mx
.It Va colour-disable
\*(BO\*(OP Disable usage of colours.
Also see
.Sx "Coloured display" .
.
.Mx
.It Va colour-pager
\*(OB\*(BO\*(OP (Now an implied setting when
.Va colour-disable
is not set!)
.
.Mx
.Mx
.It Va contact-mail , contact-web
\*(RO Email and web contact addresses for bug reports, suggestions etc:
.Ql \&? Ns \| Cm eval Ns \| Ic mail Ns \| $contact-mail .
.
.Mx
.Mx
.Mx
.Mx
.It Va content-description-forwarded-message , \
    content-description-quote-attachment , \
    content-description-smime-message , \
    content-description-smime-signature
\*(OP(partially) Optional
.Ql Content-Description:
content (with default values).
.
.Mx
.It Va crt
Output line limit that enforces usage of
.Ev PAGER .
Inherent usage can be enforced via
.Ql 0 ,
if set without value the (current)
.Ev TERM Ns
inal
.Ev LINES
are used to compute the limit (see
.Va screen
and
.Xr stty 1 ) .
\*(ID As of today the message line count is based upon wire format and
.Va mime-encoding ,
therefore often unrelated to display lines.
(The software is old and historically the relation was a given thing.)
.
.Mx
.It Va customhdr
Comma-separated list of custom headers to be injected into newly
composed messages, each consisting of a name, a colon
.Ql \&:
and body content; commas in the latter need to be reverse solidus
.Ql \e
escaped.
Standard names other than
.Ql Comments:
and
.Ql Keywords:
cannot be overwritten.
In
.Sx "Compose mode"
.Ic ~^
offers a more flexible header management; also see
.Fl C .
.Pp
.Dl ? set customhdr='Hdr1: Body1-1\e, Body1-2,  Hdr2: Body2'
.
.Mx
.It Va datefield
Control appearance of the
.Va headline
format
.Ql %d
to display the message
.Ql Date: .
The value is a
.Xr strftime 3
format string
.Pf ( Ql %n
is unsupported, and causes display errors), default is
.Ql %Y-%m-%d %H:%M .
Also see
.Va datefield-markout-older .
If unset the local receive date is used unformatted.
.
.Mx
.It Va datefield-markout-older
Only used in conjunction with
.Va datefield
to create a visible distinction of messages dated more than one day in
the future, or older than six months.
If empty the month, day and year of
.Ql Date:
will be displayed, the default initial
.Xr strftime 3
format is
.Ql %Y-%m-%d .
.
.Mx
.It Va debug
\*(BO Enter noisy sandbox mode that disables message delivery and implies
.Pf no Va record
as well as
.Pf no Va save .
Also see
.Va verbose .
.
.Mx
.It Va disposition-notification-send
\*(BO\*(OP Emit a
.Ql Disposition-Notification-To:
header (RFC 3798) with the message.
This requires the
.Va from
variable to be set.
.\" TODO .It Va disposition-notification-send-HOST
.\"Overrides
.\".Va disposition-notification-send
.\" for SMTP accounts on a specific host.
.\" TODO .It Va disposition-notification-send-USER@HOST
.\"Overrides
.\".Va disposition-notification-send
.\"for a specific account.
.
.Mx
.It Va dot
\*(BO When set a period
.Ql \&.
on a (interactive or batch
.Fl # )
.Sx "Compose mode"
input line by itself is treated as end-of-message just like end-of-file
.Pf ( Ql control-D )
is.
It is implied in
.Va posix
mode when
.Va ignoreeof
is set.
.
.Mx
.It Va dotlock-disable
\*(BO\*(OP Disable usage of
.Mx -sx
.Sx "dotlock files"
for
.Ic folder .
.
.Mx
.It Va editalong
Directly start with implied
.Va editheaders
into
.Ev EDITOR
as via
.Ic ~e ,
or
.Ev VISUAL
as via
.Ic ~v ,
when entering interactive
.Sx "Compose mode" .
The latter is used only with the value
.Ql v .
.
.Mx
.It Va editheaders
\*(BO Include message headers when editing in
.Sx "Compose mode" .
.
.Mx
.It Va emptystart
\*(BO Unless set starting into receive mode on an empty or non-existing
.Ic folder
prints
.Dq \&No mail for user
(but for
.Va bsdcompat ) ,
and exits the program.
.
.Mx
.It Va errexit
\*(BO If set any command or
.Ic call Ns
ed
.Mx -sx
.Sx Macro
that exits non-0 causes a program exit unless prefixed with
.Cm ignerr
.Pf ( Sx "Command modifiers" ) .
Also affects
.Sx "COMMAND ESCAPES"
except for modifier notation.
For more on this see
.Va \&? .
.
.Mx
.It Va errors-limit
\*(OP Maximum number of entries in the queue ring (oldest fall off) of
.Ic errors .
.
.Mx
.It Va escape
The
.Sx "COMMAND ESCAPES"
escape character (first byte).
Default is tilde
.Ql ~ .
An empty value makes command escapes unreachable.
.
.
.Mx
.It Va expandaddr
Unless set only name and email address recipients are allowed
.Pf ( Sx "On sending mail, and non-interactive mode" ) ,
otherwise all possible recipient types.
May be set to a comma-separated case-insensitive list that is
interpreted left-to-right.
A member
.Ql restrict
means name-and-address (really
.Ql restrict,\:-all,\:+name,\:+addr ! ) ,
except in interactive mode or with
.Sx "COMMAND ESCAPES"
enabled via
.Fl ~
or
.Fl # ,
in which case all types are allowed.
.
.Pp
Recipient types may be added via a plus sign
.Ql + ,
and removed via hyphen-minus
.Ql -
prefix: all types via
.Ql all ,
.Ql fcc
whitelists
.Ql Fcc:
header targets regardless of other settings,
.Ql file
file recipients (includes
.Ql fcc ) ,
.Ql pipe
command pipelines,
.Ql name
user names still unexpanded after
.Ic alias
and
.Va mta-aliases
processing, and thus left for expansion by the
.Va mta
(invalid for the built-in SMTP one), and
.Ql addr
email addresses.
Unless hard errors are enforced via
.Ql fail
disallowed types are filtered out with warning.
Syntactically invalid addresses are silently filtered out, but
.Ql failinvaddr
(really
.Ql failinvaddr,\:+addr )
enforces errors.
.
.Pp
Name recipients addressing valid local users can be expanded to fully
qualified network addresses (also see
.Va hostname )
by including
.Ql nametoaddr .
.Ql domaincheck
.Pf (really\0\: Ql domaincheck,\:+addr )
compares address domain names against a whitelist and strips off
.Pf ( Ql fail
for hard errors) other recipients;
.Ql localhost
and the non-empty value of
.Va hostname
(otherwise real hostname) are always allowed, other come in via
.Va expandaddr-domaincheck .
Finally some address providers (for example
.Fl b , c
and all other command line recipients) will be evaluated as
if specified within dollar-single-quotes
.Pf ( Sx "Shell-style argument quoting" )
when
.Ql shquote
is included.
.
.
.Mx
.It Va expandaddr-domaincheck
Comma-separated list of whitelisted domain names for the
.Ql domaincheck
of
.Va expandaddr .
IDNA encoding is not automatically performed,
.Ic addrcodec
can be used to prepare names.
.
.Mx
.It Va expandargv
Unless set additional
.Va mta
arguments from the command line (specified after a separating
.Fl \&\&- )
result in a program error exit; a case-insensitive
.Ql fail
makes this explicit;
.Ql restrict
allows them only in interactive mode, or with
.Sx "COMMAND ESCAPES"
enabled via
.Fl ~
or
.Fl #
(like
.Va expandaddr ) .
The empty value unconditionally allows MTA arguments.
.
.Mx
.It Va features
\*(RO Optional feature string.
Available when preceded by plus sign
.Ql + ,
preceded by hyphen-minus
.Ql -
otherwise, each feature is surrounded by commas to ease substring matches.
.Ic version
prepares the information more human-friendly.
.
.Mx
.It Va flipr
\*(BO Flip the meaning of the lowercase
.Ic reply , respond , followup ,
which address all recipients, into their uppercase sender-only variants
.Ic Reply , Respond , Followup ,
and vice versa.
.
.Mx
.It Va folder
The default
.Ic folder
save path: when set filenames with leading plus sign
.Ql +
will have that replaced during
.Sx "Filename transformations" .
A subset of transformations may be used, non-absolute paths get prefixed by
.Ev HOME .
When evaluated first the
.Va folder-resolved
cache is
.Ic set .
Note standard imposed implications of
.Va outfolder .
.
.It Va folder-hook-FOLDER , folder-hook
\*(OB Predecessor of
.Va on-mailbox-event .
(With a different
.Mx -sx
.Sx scope ! )
.
.Mx
.It Va folder-resolved
\*(RO The fully resolved path of
.Va folder .
.
.Mx
.It Va followup-to
\*(BO Whether
.Ql Mail-Followup-To:
shall be generated when contacting
.Sx "Mailing lists"
.Pf ( Ic mlist , mlsubscribe ) .
The user
.Pf ( Va from , sender )
is placed if any list recipient is not a subscribed list.
.
.Mx
.It Va followup-to-add-cc
\*(BO Whether the user
.Pf ( Va from , sender )
shall be added to
.Ql Cc:
in addition to a placing in
.Ql Mail-Followup-To: .
.
.Mx
.It Va followup-to-honour
Whether
.Ql Mail-Followup-To:
is honoured when
.Ic reply Ns
ing or
.Ic Lreply Ns
ing.
This is a
.Mx -sx
.Sx quadoption ,
the default without value is
.Dq yes .
.
.Mx
.It Va forward-add-cc
\*(BO Whether senders of messages forwarded via the
.Sx "COMMAND ESCAPES"
.Ic ~F , ~f , ~m , ~U
and
.Ic ~u
shall be added to
.Ql Cc: .
.
.Mx
.It Va forward-as-attachment
\*(BO
.Ic forward Ns
ing messages places a (the first text part of a MIME) message copy
as inline text; if set the complete message is attached via MIME
.Ql message/rfc822 .
.
.Mx
.Mx
.It Va forward-inject-head , forward-inject-tail
When placing
.Ic forward Ns
ed messages (also via
.Sx "COMMAND ESCAPES"
.Ic ~F , ~f , ~M , ~m , ~U , ~u )
as inline text these are written before and after, respectively.
The former defaults to
.Ql -------- Original Message --------\en .
The same format directives as for
.Va quote-inject-head
are understood, folded according to
.Va quote-fold .
.
.
.Mx
.It Va from
Quoting RFC 5322:
.Dq the author(s) of the message, that is, the mailbox(es) of the \
  person(s) or system(s) responsible for the writing of the message.
If
.Ql From:
contains multiple addresses specifying
.Ql Sender:
.Pf ( Va sender )
is required according to that RFC.
.Ic alias Ns
es are expanded instantly with senders kept
.Pf ( Va metoo ) ;
Contextually these addresse(es) are
.Ic alternates .
.
.Pp
With a file-based
.Va mta
the
.Va \&\&from
or
.Va \&\&sender
user can still be used as the envelope sender address (the RFC 5321
reverse-path) via an empty
.Fl r
command line argument, or by setting
.Va r-option-implicit .
.
.Pp
If the box has not a valid name in the network either this or
.Va hostname
have to be set (a SMTP-based
.Va mta
adds onto this
.Va smtp-from ) ;
with either unique
.Ql Message-ID:
and MIME part
.Ql Content-ID:
headers are created (unless disallowed by
.Va message-id-disable
or
.Va stealthmua ) .
.
.
.Mx
.It Va fullnames
\*(BO Avoid skinning down email addresses (the stripping of names etc).
.
.Mx
.It Va header
\*(BO Show
.Ic headers
at startup.
Unless
.Va posix
is set extend this to changing
.Ic folder ,
.Ic sort
order etc.
(Also see
.Fl N . )
.
.
.Mx
.It Va headline
Format string to style and layout
.Ic headers .
Contains normal used as-is text and expandable conversions, which
consist of a percent sign
.Ql % ,
an optional field width (decimal; negative numbers, or only hyphen-minus
in the last field, indicate left-alignment), and a conversion specifier.
Names and addresses are subject to
.Va showname
and
.Va showto ,
and see
.Va headline-plain
and
.Va headline-bidi .
The default is
.Ql %>%a%m %-18f %-16d %4l/%-5o %i%-s
.Pf ( Va bsdcompat :
.Ql %>%a%m %-20f\ \ %16d %4l/%-5o %i%-S ) ;
conversions are:
.
.Pp
.Bl -tag -compact -width ".It Ql _%%_"
.It Ql %%
Double it to avoid expansion.
.It Ql %>
.Dq Dotmark :
a space;
.Ql >
for
.Dq dot
(current message).
.It Ql %<
.Dq Dotmark :
a space;
.Ql <
for
.Dq dot .
.It Ql %$
\*(OP Message spam score as classified by
.Ic spamrate
(or a replacement character).
.It Ql %a
.Sx "Message states"
indicator to be expanded via
.Va attrlist .
.It Ql %d
Formatted
.Ql Date:
header according to
.Va datefield
if set (default), otherwise the unformatted message receive date.
.It Ql %e
Indent level in threaded
.Ic sort
mode.
.It Ql %f
Message sender address.
.It Ql %i
Message thread tree structure.
(Field width unsupported; honours
.Va headline-plain . )
.It Ql %L
Mailing list status: is a recipient a
.Ql l
.Pf ( Ic mlist )
or
.Ql L
.Ic mlsubscribe Ns
d mailing list?
As last resort
.Ql P
announces presence of a RFC 2369
.Ql List-Post:
header, making a message a valuable target of
.Ic Lreply .
.It Ql %l
Number of message lines, if available.
.It Ql %m
Unique message number.
.It Ql %o
Number of message bytes, if available.
.It Ql %S
Message subject (if any) in double quotes.
.It Ql %s
Message subject (if any).
.It Ql %t
The position in sorted order.
.It Ql \&%U
The value 0 except in an IMAP
.Ic folder ,
there the UID of the message.
.El
.
.
.Mx
.It Va headline-bidi
Bidirectional text requires special treatment when displaying headers,
because numbers (in dates or for file sizes etc.) will not affect the
current text direction, in effect resulting in ugly line layouts when
arabic or other right-to-left text is to be displayed.
On the other hand only a minority of terminals is capable to correctly
handle direction changes, so that user interaction is necessary for
acceptable results.
Note that extended host system support is required nonetheless, for
example detection of the terminal character set is one precondition;
and this feature only works in an Unicode (that is UTF-8) locale.
.Pp
Setting this causes encapsulation of some text fields of
.Va headline
(and some other, like dynamic expansions in
.Va prompt )
with special Unicode control sequences.
Fine-tune terminal support level by assigning a value: no value
indicates the terminal can properly deal with Unicode version 6.3 (or
above), in which case text is embedded in the pair U+2068 (FIRST STRONG
ISOLATE) and U+2069 (POP DIRECTIONAL ISOLATE);
in addition no space on the line is reserved for these characters.
Weaker support is chosen via
.Ql 1
(Unicode 6.3, but reserve room of two spaces for the pair).
The values
.Ql 2
and
.Ql 3
select Unicode 1.1 support (U+200E, LEFT-TO-RIGHT MARK); the latter
again reserves room for two additional spaces.
.
.Mx
.It Va headline-plain
\*(BO On Unicode (UTF-8) aware terminals enhanced graphical symbols are
used by default for certain entries of
.Va headline .
If set only 7-bit US-ASCII symbols are instead used.
.
.Mx
.It Va history-file
\*(OP Location of a permanent
.Ic history
file for the
.Mx -sx
.Sx MLE
line editor
.Pf ( Sx "On terminal control and line editor" ) .
.Sx "Filename transformations"
are performed.
Also see
.Va history-size .
.
.Mx
.It Va history-gabby
\*(OP Add gabby entries to
.Mx -sx
.Sx MLE
.Ic history .
A comma-separated list of case-insensitive keywords may be given:
.Ql errors
adds erroneous commands,
.Ql fuzz
certain usage forms, for example message number or string arguments
instead of fixed, reproducable keywords and/or colon modifiers when
.Sx "Specifying messages"
(\*(ID more subcommand use cases will be covered), and
.Ql all
for anything (default).
Complete control is available via
.Va on-history-addition .
.
.Mx
.It Va history-gabby-persist
\*(BO\*(OP Added
.Va history-gabby
entries are not saved to persistent storage unless set.
The gabby state persists.
.
.Mx
.It Va history-size
\*(OP Impose a limit on
.Ic history
entries.
If 0 no further entries are added, and loading the
.Va history-file
upon startup is suppressed.
Value runtime changes are not reflected unless
.Ic history
is saved or (re)loaded.
.
.Mx
.It Va hold
\*(BO Control toggle for standardized
.Mx -sx
.Sx "automatic message moving" ,
and see
.Va keep , keepsave .
.
.Mx
.It Va hostname
Used instead of asking
.Xr uname 3
/
.Xr getaddrinfo 3
for local
.Ql From:
etc. addresses (context:
.Sx "On sending mail, and non-interactive mode" )
if non-empty.
If set (even empty) unique
.Ql Message-ID:
and MIME part
.Ql Content-ID:
headers are created (unless disallowed by
.Va message-id-disable
or
.Va stealthmua ) ;
also see
.Va from .
\*(OP If IDNA conversion is necessary but fails assignment is aborted
.Pf ( Va idna-disable ) .
One should produce some test messages with the desired combination of
.Va \&\&hostname ,
and/or
.Va from ,
.Va sender ,
.Va smtp-from .

.
.Mx
.It Va iconv-disable
\*(BO\*(OP Turn off conversion of
.Sx "Character sets" .
.
.Mx
.It Va idna-disable
\*(BO\*(OP Turn off IDNA (internationalized domain names for
applications) conversions.
.Va ttycharset
is assumed for domain names (the UTF-8 character set is required to
represent all non-converted IDNs), for context see
.Sx "Character sets" .
.Bd -literal -offset indent
addrcodec enc root@\(:apfel.example
\*(OUroot@xn--pfel-koa.example
.Ed
.
.Mx
.It Va ifs
Input field separators used (\*(ID everywhere) for splitting input data.
.Pp
.Bl -bullet -compact
.It
.Ic unset
(re)establishes the default value
.Ql \& \et\en .
.It
No field splitting occurs when empty.
.It
Whitespace characters of the value are assigned to
.Va ifs-ws .
.El
.Pp
.Bl -tag -compact
.It 1.
.Va \&\&ifs-ws
will be ignored at the front and back of input.
Diverging from \*(PO shells the whitespace default value is always
removed in addition.
.It 2.
Any occurrence of a member of
.Va \&\&ifs
causes field-splitting, thereafter adjacent
.Va \&\&ifs-ws
members are skipped.
.El
.
.Mx
.It Va ifs-ws
\*(RO Deduced from whitespace within
.Va ifs .
.
.Mx
.It Va ignore
\*(BO Ignore interrupt signals in
.Sx "Compose mode" ;
instead echo them as
.Ql @ ,
and discard the current line.
.
.Mx
.It Va ignoreeof
\*(BO Ignore end-of-file conditions
.Pf ( Ql control-D )
in
.Sx "Compose mode"
and in interactive input of
.Sx COMMANDS :
when set only
.Ic ~.
(or
.Va dot ,
even implied with
.Va posix ! ) ,
can leave the former, and only
.Ic exit
or
.Ic quit
can exit the session.
.
.Mx
.It Va inbox
The user's
.Mx -sx
.Sx "primary system mailbox" ,
overriding
.Ev MAIL
and the system-dependent default, and used to replace
.Ql %
when doing
.Sx "Filename transformations" ;
also see
.Ic folder .
The value supports a subset of transformations itself.
.
.Mx
.It Va indentprefix
String used by the
.Ic ~m , ~M
and
.Ic ~R
.Sx "COMMAND ESCAPES" ,
and by the
.Va quote
option for message indentation.
The \*(PO default is tabulator
.Ql \et .
Also see
.Va quote-chars .
.
.Mx
.It Va keep
\*(BO Do not remove an empty
.Mx -sx
.Sx "primary system mailbox"
.Pf ( Va posix
mode: any empty
.Ic folder ) .
(Re-) Creating files in a (world-writeable / sticky)
.Ev MAIL
.Va folder
could result in undesired file modes (relates
.Va umask ) .
\*(ID Applies only to local MBOX and maildir mailboxes, nothing else
will be removed, even if empty; note a
.Mx -sx
.Sx Maildir
.Ic remove
may be partial in case of errors.
.
.Mx
.It Va keepsave
\*(BO Preserve messages
.Ic save Ns
d from a
.Mx -sx
.Sx "primary system mailbox"
like
.Va inbox
into other
.Ic folder Ns
s for the
.Va hold
implied
.Mx -sx
.Sx "automatic message moving"
action.
.
.Mx
.It Va line-editor-config
\*(OP
.Mx -sx
.Sx MLE
configuration, a case-insensitive comma-separated list:
.Ql quote-rndtrip
.Pf ( Cd mle-quote-rndtrip
default),
.Ql srch-case
(case-insensitive
.Cd mle-hist-srch-bwd
and
.Cd mle-hist-srch-fwd
matches),
.Ql srch-any
(match any substring instead of exact entry);
\*(OPally
.Ql srch-regex
matches via regular expressions (mutual with
.Ql srch-any ) .
.Ql srch-pos0
moves the cursor to the
.Va prompt
when long
.Ic history
matches would move
.Dq off
.Va screen .
.
.Mx
.It Va line-editor-cpl-word-breaks
\*(OP List of bytes
.Cd mle-complete
uses to detect word boundaries, by default
.Ql :"'@=;|
(whitespace is automatically included; some shells use
.Ql \et\en"\e'`@$><=;|&{( ) .
\*(ID This mechanism is yet restricted.
.
.Mx
.It Va line-editor-disable
\*(BO Turn off line editing capabilities
.Pf ( Sx "On terminal control and line editor" ) .
.
.Mx
.It Va line-editor-no-defaults
\*(BO\*(OP Do not establish default key
.Ic bind Ns
ings.
.
.Mx
.It Va log-prefix
Error log message prefix string
.Pf ( Ql "\*(xX: " ) .
.
.Mx
.It Va mailbox-basename
\*(RO Last name component of current
.Ic folder .
.
.Mx
.It Va mailbox-display
\*(RO Name of current
.Ic folder ,
possibly abbreviated for display purposes
.Pf ( Va screen ) .
.
.Mx
.It Va mailbox-read-only
\*(RO\*(BO Whether current
.Ic folder
is read-only.
.
.Mx
.It Va mailbox-resolved
\*(RO Fully resolved path of current
.Ic folder .
Note: not reproducible (see
.Ev SOURCE_DATE_EPOCH ) .
.
.Mx
.It Va mailcap-disable
\*(BO\*(OP Turn off consideration of MIME type handlers from,
and implicit loading of
.Sx "The Mailcap files" .
.
.Mx
.It Va mailx-extra-rc
Additional startup file loaded last among the
.Sx "Resource files" .
A good place for non-portable, non-\*(PO
.Xr mailx 1
features.
.
.Mx
.It Va markanswered
\*(BO When set any message
.Ic reply
marks it
.Ic answered .
See
.Sx "Message states" .
.
.Mx
.It Va mbox-fcc-and-pcc
\*(BO File and pipe recipients
.Pf ( Va expandaddr )
receive a one-message MBOX file
.Pf ( Ic folder ,
.Va mbox-rfc4155 ) ,
already existing (MBOX) files are appended to, RFC 4155 compliantly.
If unset a plain RFC 5322 message is instead received,
and existing files are overwritten.
.
.Mx
.It Va mbox-rfc4155
\*(BO For compatibility with old software opening a MBOX
.Ic folder
uses tolerant \*(PO instead of the stricter RFC 4155 rules for message
boundary detection (so-called
.Ql From_
lines), unless this is set.
May be handy temporarily when opening complains about an invalid MBOX:
setting it and reopening the folder may be a saveable corrective
(\*(ID: no MIME re-encode yet):
.Bd -literal -offset indent
define mboxfix {
  local set mbox-rfc4155; File "${1}"; copy * "${2}"
}

call mboxfix /tmp/bad.mbox /tmp/good.mbox
.Ed
.
.Mx
.It Va memdebug
\*(BO Internal, development related, auto-enabled with
.Va debug .
.
.Mx
.It Va message-id-disable
\*(BO Suppress generation of
.Ql Message-ID:
and
.Ql Content-ID:
MIME (part) headers, leaving this up to the
.Va mta
(according to RFC 5321 a SMTP server is not required to do so).
.
.Mx
.Mx
.It Va message-inject-head , message-inject-tail
Strings to insert at the top and bottom of each generated message.
\*(OB The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood (instead expand via
.Sx "Shell-style argument quoting"
at
.Ic set
time).
Also see
.Va on-compose-leave .
.Bd -literal -offset indent
set Sign=$'\en  Tony\en  I am fixing things!'
set message-inject-tail=${Sign}
.Ed
.
.Mx
.It Va metoo
\*(BO Suppress deletion of the sender
.Pf ( Va from , sender , Ev LOGNAME ,
and contextually
.Ic alternates ;
compared according to
.Va allnet )
when performing
.Ic alias
expansion.
(Implied for blind carbon copy recipients
.Ql Bcc: . )
Also passes file-based
.Va mta Ns
s the option
.Ql -m
except with
.Va mta-no-default-arguments
(mostly undocumented, but no MTA is known that does not support it).
.
.Mx
.It Va mime-allow-text-controls
\*(BO\*(ID This is a
.Dq hack !
Upon message creation and
.Ql Content-Type:
plus
.Ql Content-Transfer-Encoding:
(see
.Va mime-encoding )
detection text files encoded in the UTF-16 and other
.Dq wide
character sets are identified as binary data.
(Wide means that each character is stored in a datatype that is larger
than a byte, for UTF-16 the number stands for the bits of the datatype;
possibly multiple such are needed to represent the character.
Byte-based multi-byte character sets, like UTF-8, are (also) capable to
store all characters of the world, but form byte sequences that are not
detected as binary data.)
If set, and if the data was unambiguously identified as text at first
glance, for example via
.Ql .txt
or
.Ql .html
file extensions, then (and only then) no binary data is presumed.
In the future (maybe v15) the first few bytes of a file may be looked
upon to check for B(yte)O(rder)M(ark) markers: correctly marked UTF-8
and UTF-16 files would then be automatically treated accordingly.
.
.Mx
.It Va mime-alternative-favour-rich
\*(BO If set
.Dq rich
MIME alternative parts (for example HTML) are preferred over plain text
versions when displaying messages, provided that a
.Cd copiousoutput
MIME handler exists
.Pf ( Sx "HTML mail and MIME attachments" ) .
.
.Mx
.It Va mime-counter-evidence
Normally the
.Ql Content-Type:
field is used to decide how to handle MIME parts.
Some MUAs, however, do not use
.Sx "The mime.types files"
(also see
.Sx "HTML mail and MIME attachments" )
or a similar mechanism to correctly classify content, but specify an
unspecific MIME type
.Pf ( Ql application/octet-stream )
even for plain text attachments.
If this variable is set then \*(Xx will try to re-classify such MIME
message parts, if possible, for example via a possibly existing
attachment filename.
A non-empty value may also be given, in which case a number is expected,
actually a carrier of bits, best specified as a binary value, like
.Ql mime-counter-evidence=0b1110 .
.Pp
.Bl -bullet -compact
.It
If bit two is set (counting from 1, decimal 2) then the detected
.Ic mimetype
will be carried along with the message and be used for deciding which
MIME handler is to be used, for example;
when displaying such a MIME part the part-info will indicate the
overridden content-type by showing a plus sign
.Ql + .
.It
If bit three is set (decimal 4) then the counter-evidence is always
produced and a positive result will be used as the MIME type, even
forcefully overriding the parts given MIME type.
.It
If bit four is set (decimal 8) as a last resort the actual content of
.Ql application/octet-stream
parts will be inspected, so that data which looks like plain text can be
treated as such.
This mode is even more relaxed when data is to be displayed to the user
or used as a message quote (data consumers which mangle data for display
purposes, which includes masking of control characters, for example).
.El
.
.
.Mx
.It Va mime-encoding
The MIME
.Ql Content-Transfer-Encoding
to use in outgoing text messages and message parts, where applicable
(7-bit clean text messages are without an encoding if possible):
.
.Pp
.Bl -tag -compact -width ".It Ql _%%_"
.It Ql 8bit
.Pf (Or\0 Ql 8b . )
8-bit transport effectively causes the raw data be passed through
unchanged, but may cause problems when transferring mail messages over
channels that are not ESMTP (RFC 1869) compliant.
Also, several input data constructs are not allowed by the
specifications and may cause a different transfer-encoding to be used.
By established rules and popular demand occurrences of
.Ql ^From_
(see
.Va mbox-rfc4155 )
will be MBOXO quoted (prefixed with greater-than sign
.Ql > )
instead of causing a non-destructive encoding like
.Ql quoted-printable
to be chosen, unless context (like message signing) requires otherwise.
.
.It Ql quoted-printable
.Pf (Or\0 Ql qp . )
Quoted-printable encoding is 7-bit clean and has the property that ASCII
characters are passed through unchanged, so that an english message can
be read as-is; it is also acceptable for other single-byte locales that
share many characters with ASCII, for example ISO-8859-1.
The encoding will cause a large overhead for messages in other character
sets: for example it will require up to twelve (12) bytes to encode
a single UTF-8 character of four (4) bytes.
It is the default encoding.
.
.It Ql base64
.Pf (Or\0 Ql b64 . )
This encoding is 7-bit clean and will always be used for binary data.
This encoding has a constant input:output ratio of 3:4, regardless of
the character set of the input data it will encode three bytes of input
to four bytes of output.
This transfer-encoding is not human readable without performing
a decoding step.
.El
.
.
.Mx
.It Va mime-force-sendout
\*(BO\*(OP Whenever it is not acceptable to fail sending out messages
because of non-convertible character content this variable may be set.
It will, as a last resort, classify the part content as
.Ql application/octet-stream .
Refer to the section
.Sx "Character sets"
for the complete picture of character set conversion, and
.Sx "HTML mail and MIME attachments"
for how to internally or externally handle part content.
.
.Mx
.It Va mimetypes-load-control
Can be used to control which of
.Sx "The mime.types files"
are loaded: if the letter
.Ql u
is part of the option value, then the user's personal
.Pa \*(vU
file will be loaded (if it exists); likewise the letter
.Ql s
controls loading of the system-wide
.Pa \*(vS ;
directives found in the user file take precedence, letter matching is
case-insensitive.
If this variable is not set \*(Xx will try to load both files.
Incorporation of the \*(Xx-built-in MIME types cannot be suppressed,
but they will be matched last (the order can be listed via
.Ic mimetype ) .
.Pp
More sources can be specified by using a different syntax: if the
value string contains an equals sign
.Ql =
then it is instead parsed as a comma-separated list of the described
letters plus
.Ql f=FILENAME
pairs; the given filenames will be expanded and loaded, and their
content may use the extended syntax that is described in the section
.Sx "The mime.types files" .
Directives found in such files always take precedence (are prepended to
the MIME type cache).
.
.
.Mx
.It Va mta
Select an alternate Message-Transfer-Agent by either specifying the full
pathname of an executable (a
.Ql file://
prefix may be given), or \*(oPally a SMTP aka SUBMISSION protocol URL:
.Pp
.Dl submissions://[user[:password]@]server[:port]
.Pp
The default has been chosen at compile time.
MTA data transfers are always performed in asynchronous child processes,
and without supervision unless either the
.Va sendwait
or the
.Va verbose
variable is set.
Also see
.Va mta-bcc-ok .
\*(OPally expansion of
.Xr aliases 5
can be performed by setting
.Va mta-aliases .
.
.Pp
For testing purposes there is the
.Ql test
pseudo-MTA, which dumps to standard output or optionally to a file,
and honours
.Va mbox-fcc-and-pcc :
.
.Bd -literal -offset indent
$ echo text | \*(xX -:/ -Smta=test -s ubject ex@am.ple
$ </dev/null \*(xX -:/ -Smta=test://./xy ex@am.ple
.Ed
.
.Pp
For a file-based MTA it may be necessary to set
.Va mta-argv0
in in order to choose the right target of a modern
.Xr mailwrapper 8
environment.
It will be passed command line arguments from several possible sources:
from the variable
.Va mta-arguments
if set, from the command line if given and the variable
.Va expandargv
allows their use.
Argument processing of the MTA will be terminated with a
.Fl \&\&-
separator.
.
.Pp
The otherwise occurring implicit usage of the following MTA command
line arguments can be disabled by setting the boolean variable
.Va mta-no-default-arguments
(which will also disable passing
.Fl \&\&-
to the MTA):
.Fl \&\&i
(for not treating a line with only a dot
.Ql \&.
character as the end of input),
.Fl \&\&m
(shall the variable
.Va metoo
be set) and
.Fl \&\&v
(if the
.Va verbose
variable is set); in conjunction with the
.Fl r
command line option or
.Va r-option-implicit
.Fl \&\&f
as well as possibly
.Fl \&\&F
will (not) be passed.
.
.Pp
\*(OPally \*(Xx can send mail over SMTP aka SUBMISSION network
connections to a single defined smart host by setting this variable to
a corresponding URL (see
.Sx "On URL syntax and credential lookup" ) .
Server interaction (TLS, authentication type, etc.) is configurable via
.Va smtp-config .
An overview on TLS and links to more information can be found under
.Sx "Encrypted network communication" .
Note that with some mail providers it may be necessary to set the
.Va smtp-from
variable in order to use a specific combination of
.Va from ,
.Va hostname
and
.Va mta .
Network communication socket timeouts are configurable via
.Va socket-connect-timeout .
All generated network traffic may be proxied over a SOCKS
.Va socks-proxy ,
it can be logged by setting
.Va verbose
twice.
The following SMTP variants may be used:
.
.Bl -bullet
.It
The plain SMTP protocol (RFC 5321) that normally lives on the
server port 25, which will \*(oPally be upgraded to a TLS encrypted
session unless disallowed by
.Va smtp-config .
Assign a value like
.Ql smtp://[user[:password]@]server[:port]
to choose this protocol.
.It
\*(OP The so-called SMTPS which is supposed to live on server port 465
and is automatically TLS secured.
Unfortunately it never became a standardized protocol and may thus not
be supported by your hosts network service database
\(en in fact the port number has already been reassigned to other
protocols!
.Pp
SMTPS is nonetheless a commonly offered protocol and thus can be
chosen by assigning a value like
.Ql smtps://[user[:password]@]server[:port] ;
due to the mentioned problems it is usually necessary to explicitly
specify the port as
.Ql :465 ,
however.
.It
The SUBMISSION protocol (RFC 6409) lives on server port 587 and
shares the semantics with SMTP from \*(Xx's point of view:
.Ql submission://[user[:password]@]server[:port] .
.It
\*(OP The SUBMISSIONS protocol (RFC 8314) that lives on server port 465
and is TLS secured by default.
It can be chosen by assigning a value like
.Ql submissions://[user[:password]@]server[:port] .
Due to the problems mentioned for SMTPS above and the fact that
SUBMISSIONS is new and a successor that lives on the same port as the
historical engineering mismanagement named SMTPS, it is usually
necessary to explicitly specify the port as
.Ql :465 .
.El
.
.
.Mx
.It Va mta-aliases
\*(OP If set to a path pointing to a text file in valid MTA (Postfix)
.Xr aliases 5
format, the file is loaded and cached (manageable with
.Ic mtaaliases ) ,
and henceforth plain
.Ql name
(see
.Va expandaddr )
message recipient names are recursively expanded as a last expansion
step, after the distribution lists which can be created with
.Ic alias .
Constraints on
.Xr \&\&aliases 5
content support: only local addresses (names) which are valid usernames
.Pf ( Ql [a-z_][a-z0-9_-]*[$]? )
are treated as expandable aliases, and \*(ID
.Ql :include:/file/name
directives are not supported.
By including
.Ql -name
in
.Va expandaddr
it can be asserted that only expanded names (mail addresses) are passed
through to the MTA.
.
.Mx
.It Va mta-arguments
Arguments to pass through to a file-based
.Va mta ,
parsed according to
.Sx "Shell-style argument quoting"
into an array of arguments which will be joined onto MTA options
from other sources, for example
.Ql \&? set mta-arguments='-t -X \&"/tmp/my log\&"' .
.
.Mx
.It Va mta-no-default-arguments
\*(BO Avoids passing standard command line options to a file-based
.Va mta
(see there).
.
.Mx
.It Va mta-no-recipient-arguments
\*(BO By default all recipient addresses will be passed as command line
options to a file-based
.Va mta .
Setting this variable disables this behaviour to aid those MTAs which
employ special treatment of such arguments.
Doing so can make it necessary to pass a
.Fl \&\&t
via
.Va mta-arguments ,
to testify the MTA that it should use the passed message as a template.
.
.Mx
.It Va mta-argv0
Many systems use a so-called
.Xr mailwrapper 8
environment to ensure compatibility with
.Xr sendmail 1 .
This works by inspecting the name that was used to invoke the mail
delivery system.
If this variable is set then the mailwrapper (the program that is
actually executed when calling the file-based
.Va mta )
will treat its contents as that name.
.
.Mx
.It Va mta-bcc-ok
\*(BO Only affects file-based
.Va mta Ns
s: in violation of RFC 5322 some do not remove
.Ql Bcc:
header lines from messages after having noted respective recipients for
addressing purposes automatically.
(Exim and Courier for example remove only with the command line option
.Fl \&\&t . )
Unless set corresponding recipients are only passed via command line
(this prepares a cleaned message copy).
.
.Mx Va netrc-lookup
.It Va netrc-lookup-USER@HOST , netrc-lookup-HOST , netrc-lookup
\*(BO\*(OP Used to control usage of the user's
.Pa \*(VN
file for lookup of account credentials, as documented in the section
.Sx "On URL syntax and credential lookup"
and for the command
.Ic netrc ;
the section
.Sx "The .netrc file"
documents the file format.
Also see
.Va netrc-pipe .
.
.Mx
.It Va netrc-pipe
\*(OP When
.Pa \*(VN
is loaded (see
.Ic netrc
and
.Va netrc-lookup )
then \*(Xx will read the output of a shell pipe instead of the user's
.Pa \*(VN
file if this variable is set (to the desired shell command).
This can be used to, for example, store
.Pa \*(VN
in encrypted form:
.Ql \&? set netrc-pipe='gpg -qd ~/.netrc.pgp' .
.
.Mx
.It Va newfolders
\*(OP If this variable has the value
.Ql maildir ,
newly created local mailboxes will be in
.Mx -sx
.Sx Maildir
instead of MBOX format.
.
.Mx
.It Va newmail
Checks for new mail in the current mailbox each time the prompt is shown.
\*(OP A
.Mx -sx
.Sx Maildir
mailbox must be re-scanned to determine if new mail has arrived.
If this variable is set to the special value
.Ql nopoll
then a Maildir mailbox will not be rescanned completely, but only
timestamp changes are detected.
.
.Mx
.It Va outfolder
\*(BO Causes a non-absolute pathname specified in
.Va record ,
as well as the sender-based pathnames of the
.Ic Copy ,
.Ic Save ,
.Ic Followup
and
.Ic followup
commands to be interpreted relative to the
.Va folder
directory rather than relative to the current directory.
.
.Mx Va on-account-cleanup
.It Va on-account-cleanup-ACCOUNT , on-account-cleanup
.Mx -sx
.Sx Macro
hook which will be called once an
.Ic account
is left, as the very last step before unrolling the per-account
.Mx -sx
.Sx scope .
This hook is run even in case of fatal errors, including those generated
by switching to the account as such, and it is advisable to perform only
absolutely necessary actions, like cleaning up
.Ic alternates ,
for example.
The specialized form is used in favour of the generic one if found.
.
.Mx
.It Va on-compose-cleanup
.Mx -sx
.Sx Macro
hook which will be called after the message has been sent (or not,
in case of failures), as the very last step before unrolling compose mode
.Mx -sx
.Sx scope .
This hook is run even in case of fatal errors, and it is advisable to
perform only absolutely necessary actions, like cleaning up
.Ic alternates ,
for example.
.Pp
For compose mode hooks that may affect the message content see
.Va on-compose-enter , on-compose-leave , on-compose-splice .
\*(ID This hook exists because
.Ic alias , alternates , commandalias , shortcut ,
to name a few, are not yet covered by
.Cm local
or
.Cm our
.Mx -sx
.Sx scope :
changes applied in compose mode will continue to be in effect thereafter.
.
.
.Mx
.Mx
.It Va on-compose-enter , on-compose-leave
.Mx -sx
.Sx Macro
hooks which will be called once compose mode is entered,
and after composing has been finished, respectively;
the exact order of the steps taken is documented for
.Ic ~. ,
one of the
.Sx "COMMAND ESCAPES" .
Context about the message being worked on can be queried via
.Ic digmsg .
.Va on-compose-cleanup
can be used to perform other necessary cleanup steps.
.
.Pp
Here is an example that injects a signature (also see
.Va Sign , sign
as well as
.Ic ~A , ~a )
via
.Va message-inject-tail ;
instead using
.Va on-compose-splice
to simply inject the file of desire via
.Ic ~<
or
.Ic ~<!
may be a better approach.
.
.Bd -literal -offset indent
define t_ocl {
  vput ! i cat ~/.mysig
  if $? -eq 0
     vput csop message-inject-tail trim-end $i
  end

  # Alternatively
  readctl create ~/.mysig
  if $? -eq 0
    readall i
    if $? -eq 0
      vput csop message-inject-tail trim-end $i
    end
    readctl remove ~/.mysig
  end
}
set on-compose-leave=t_ocl
.Ed
.
.
.Mx
.Mx
.It Va on-compose-splice , on-compose-splice-shell
These hooks run after compose mode is finished, but before
.Va on-compose-leave .
Both are executed in a subprocess, with their input and output connected
such that they can act like an interactive user: \*(Xx's output they
.Ic read ,
input for \*(Xx they can
.Ic echo .
Whereas the latter is a
.Ev SHELL
command, the former is a
.Mx -sx
.Sx Macro
that is evaluated in a restricted mode with only a small set of
commands available (the
.Va verbose
output of for example
.Ic list
indicates the
.Ql subprocess
capability).
.
.Pp
In the subprocess (a restricted set of)
.Sx "COMMAND ESCAPES"
will always be available.
For guaranteed reproducibilities' sake
.Va escape
and
.Va ifs
are set to their defaults.
The escape
.Ic ~^
has been especially designed for scriptability: the first line these
hooks will read on standard input is the escape's protocol version
.Pf ( Dq 0 0 2 ) ,
backward incompatible protocol changes have to be expected.
.
.Pp
Care must be taken to avoid deadlocks and other false control flow:
if subprocess and \*(Xx both wait for more input, or if one does not
expect more input, whereas the other waits for consumption of its output.
Hooks are not automatically synchronized: if a hook emits
.Ql ~x
to cause \*(Xx to exit compose mode, the subprocess will keep running
nonetheless until the macro is completely worked or
.Ic xit
is called explicitly.
They will however receive a termination signal if the parent enters
an error condition.
\*(ID Protection against and interaction with signals is not yet given;
it is likely that in the future these scripts will be placed in an
isolated session, which is signalled in its entirety as necessary.
.
.Bd -literal -offset indent
define ocs_signature {
  read proto_version
  echo '~< ~/.mysig' # '~<! fortune pathtofortunefile'
}
set on-compose-splice=ocs_signature

set on-compose-splice-shell=$'\e
  read proto_version;\e
  printf "hello $version!  Headers: ";\e
  echo \e'~^header list\e';\e
  read status result;\e
  echo "status=$status result=$result";\e
  '

define ocsm {
  read proto_version
  echo Splice protocol version is $proto_version
  echo '~^h l'; read hl; vput csop es subs "${hl}" 0 1
  if "$es" != 2
    echoerr 'Cannot read header list'; echo '~x'; xit
  endif
  if "$hl" !%?case ' cc'
    echo '~^h i cc "Diet is your <mirr.or>"'; read es;\e
      vput csop es substring "${es}" 0 1
    if "$es" != 2
      echoerr 'Cannot insert Cc: header'; echo '~x'
      # (no xit, macro finishes anyway)
    endif
  endif
}
set on-compose-splice=ocsm
.Ed
.
.
.Mx
.It Va on-history-addition
Executes with three arguments before a
.Mx -sx
.Sx MLE
.Ic history
entry is to be added (see
.Sx "On terminal control and line editor" ) :
the
.Ic bind
input context name, the
.Va history-gabby
type (or the empty string), finally the entry as one token.
If the hook
.Ic return Ns
s 0 the entry is added as-is, with 2 it is added as
.Va history-gabby ,
with 3 gabbyness is removed; any other value rejects the addition.
\*(ID A future version will return more than 3 arguments: the expanded
command name as the third, followed by individual tokens of the command
line, including the used command name as the first; that is, after
.Ql Ic shift Ns \| 4
the positional parameters will be accessable as
.Va * , # , 1
etc.
.Bd -literal -offset indent
se on-history-addition=oha
def oha {
  i "$2" == fuzz || "$2" == errors; retu 1; en
  i ${#} -eq 3
    i " $3" =% ' set ' || " $3" =% ' unset '; retu 3;en
    i " $3" =% ' chdir '; retu 2; en
  el
    ec v15
  en
  retu 1
}
.Ed
.
.Mx Va on-mailbox-event
.It Va on-mailbox-event-FOLDER , on-mailbox-event
.Mx -sx
.Sx Macro Ns
s invoked upon the
.Ic folder
events
.Dq open ,
.Dq enter ,
.Dq leave ,
and
.Dq close ,
and the
.Ic newmail
event
.Dq newmail
(the colon modifier
.Ql :N
addresses new mail when
.Sx "Specifying messages" ) ,
as indicated by the first argument.
.Va mailbox-basename , mailbox-display , mailbox-resolved
identify the mailbox.
Settings are in
.Mx -sx
.Sx scope
when the mailbox is current.
Not all
.Sx COMMANDS
are usable within hooks.
The specialization is matched against the fully expanded name, without
metacharacters; however, if
.Ql FOLDER
resides under
.Va folder
the usual
.Ql +
.Pf ( Sx "Filename transformations" )
is also tried: for example, if
.Va \&\&folder
is
.Dq mail
(therefore relative to
.Ev HOME )
then
.Pa /home/usr1/mail/sent
will be tried as
.Ql on-mailbox-event-/home/usr1/mail/sent
first, followed by
.Ql on-mailbox-event-+sent
(and lastly
.Ql on-mailbox-event ) .
.
.Mx
.It Va on-main-loop-tick
.Mx -sx
.Sx Macro
invoked
.Mx -sx
.Pf un- Sx scope Ns
d before the main event loop reads an input line.
.Sy Remarks:
the main event loop never ticks in \*(SM,
.Va on-compose-enter
can be used instead.
.
.Mx
.It Va on-program-exit
This hook will be called when the program exits, whether via
.Ic exit
or
.Ic quit ,
or because the send mode is done.
.Sy Note:
this runs late and so terminal settings etc. are already teared down.
.
.Mx
.It Va on-resend-cleanup
\*(ID Identical to
.Va on-compose-cleanup ,
but is only triggered by
.Ic resend .
.
.Mx
.It Va on-resend-enter
\*(ID Identical to
.Va on-compose-enter ,
but is only triggered by
.Ic resend ;
currently there is no
.Ic digmsg
support, for example.
.
.Mx
.It Va page
\*(BO If set, each message feed through the command given for
.Ic pipe
is followed by a formfeed character
.Ql \ef .
.
.Mx Va password
.It Va password-USER@HOST , password-HOST , password
Variable chain that sets a password, which is used in case none has
been given in the protocol and account-specific URL;
as a last resort \*(Xx will ask for a password on the user's terminal if
the authentication method requires a password.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.
.Mx
.It Va piperaw
\*(BO Send messages to the
.Ic pipe
command without performing MIME and character set conversions.
.
.Mx
.It Va pipe-EXTENSION
Identical to
.Va pipe-TYPE/SUBTYPE
except that
.Ql EXTENSION
(normalized to lowercase using character mappings of the ASCII charset)
denotes a file extension, for example
.Ql xhtml .
Handlers registered using this method take precedence.
.
.
.Mx
.It Va pipe-TYPE/SUBTYPE
Whenever a
.Ql TYPE/SUBTYPE
(case-insensitive, normalized to lowercase using character mappings of
the ASCII charset) MIME message part is displayed or quoted, its data is
filtered through the given value interpreted as a shell command.
Unless noted only
.Cd copiousoutput
parts (see
.Sx "The Mailcap files" )
are covered, other parts are solely considered by
.Ic mimeview .
.
.Pp
The value question mark
.Ql \&?
forces plain text interpretation of the part, for example
.Ql set pipe-application/xml=? .
.Pf ( Ic mimetype
type-markers achieve the same.)
\*(OPally MIME type handlers may be defined via
.Sx "The Mailcap files" .
It is indeed also a trigger character to indicate the following flags:
.
.Bd -literal -offset indent
set pipe-X/Y='?!++=? vim ${MAILX_FILENAME_TEMPORARY}'
.Ed
.
.Pp
.Bl -tag -compact -width ".It Ql __"
.It Ql \&*
The command's output is reintegratable:
.Cd copiousoutput .
This is implied when using a plain
.Ql \& .
.
.It Ql #
Only use this handler for display, not for quoting a message:
.Cd x-mailx-noquote .
.
.It Ql &
Run the command asynchronously, do not wait for the handler to exit:
.Cd x-mailx-async .
The standard output of the command will go to
.Pa /dev/null .
.
.It Ql \&!
The command must be run on an interactive terminal, the terminal will
temporarily be released for it to run:
.Cd needsterminal .
.
.It Ql +
Request creation of a zero-sized temporary file, the absolute pathname
of which will be made accessible via the environment variable
.Ev MAILX_FILENAME_TEMPORARY :
.Cd x-mailx-tmpfile .
If given twice the file will be unlinked automatically:
.Cd x-mailx-tmpfile-unlink ;
it is an error to use automatic deletion in conjunction with
.Cd x-mailx-async .
.
.It Ql =
by default part content is passed to the handler via standard input;
if set data is written into
.Ev MAILX_FILENAME_TEMPORARY
.Pf ( Cd x-mailx-tmpfile-fill )
instead, the creation of which is implied.
Automatic deletion still requires two plus signs
.Ql ++ !
.
.It Ql t
Plain text display type-marker (for type-markers:
.Sx "The mime.types files" ) .
Implies
.Cd copiousoutput .
.
.It Ql h
\*(OP HTML type-marker: display via built-in HTML-to-text filter.
Implies
.Cd copiousoutput .
.
.It Ql \&?
To avoid ambiguities a second question mark can be used to forcefully
terminate interpretation of the remaining characters as flags.
(Any character not in this list will have the same effect.)
.El
.
.Pp
Some information about the MIME part to be displayed is embedded into
the environment of the shell command:
.
.Pp
.Bl -tag -compact -width ".It Ev _AIL__ILENAME__ENERATED"
.Mx
.It Ev MAILX_CONTENT
The MIME content-type of the part, if known, the empty string otherwise.
.
.Mx
.It Ev MAILX_CONTENT_EVIDENCE
The detected MIME content-type if the carry-around-bit (2) is set in
.Va mime-counter-evidence ,
identical to
.Ev \&\&MAILX_CONTENT
otherwise.
.
.Mx
.It Ev MAILX_EXTERNAL_BODY_URL
MIME parts of type
.Ql message/external-body access-type=url
will store the access URL in this variable, it is empty otherwise.
URL targets should not be activated automatically, without supervision.
.
.Mx
.It Ev MAILX_FILENAME
The pathname, if any is set, the empty string otherwise.
.
.Mx
.It Ev MAILX_FILENAME_GENERATED
A random string.
.
.Mx
.It Ev MAILX_FILENAME_TEMPORARY
If temporary file creation was requested it will contain the absolute
pathname of the temporary file.
.El
.
.
.Mx Va pop3-auth
.It Va pop3-auth-USER@HOST , pop3-auth-HOST , pop3-auth
\*(OP Variable chain that sets the POP3 authentication method.
Supported are the default
.Ql plain ,
.Ql oauthbearer
(see
.Sx FAQ
entry
.Sx "But, how about XOAUTH2 / OAUTHBEARER?" ) ,
as well as
.Ql external
and
.Ql externanon
for TLS secured connections which pass a client certificate via
.Va tls-config-pairs .
There may be the \*(oPal method
.Ql gssapi .
.Ql externanon
does not need any user credentials,
.Ql external
and
.Ql gssapi
need a
.Va user ,
the remains also require a
.Va password .
Unless
.Va pop3-no-apop
is set the
.Ql plain
method will \*(oPally be replaced with APOP if possible (see there).
.
.Mx Va pop3-bulk-load
.It Va pop3-bulk-load-USER@HOST , pop3-bulk-load-HOST , pop3-bulk-load
\*(BO\*(OP When accessing a POP3 server \*(Xx loads the headers of
the messages, and only requests the message bodies on user request.
For the POP3 protocol this means that the message headers will be
downloaded twice.
If this variable is set then \*(Xx will download only complete messages
from the given POP3 server(s) instead.
.
.Mx Va pop3-keepalive
.It Va pop3-keepalive-USER@HOST , pop3-keepalive-HOST , pop3-keepalive
\*(OP POP3 servers close the connection after a period of inactivity;
the standard requires this to be at least 10 minutes,
but practical experience may vary.
Setting this variable to a numeric value greater than
.Ql 0
causes a
.Ql NOOP
command to be sent each value seconds if no other operation is performed.
.
.Mx Va pop3-no-apop
.It Va pop3-no-apop-USER@HOST , pop3-no-apop-HOST , pop3-no-apop
\*(BO\*(OP Unless this variable is set the MD5 based
.Ql APOP
authentication method will be used instead of a chosen
.Ql plain
.Va pop3-auth
when connecting to a POP3 server that advertises support.
The advantage of
.Ql APOP
is that only a single packet is sent for the user/password tuple.
(Originally also that the password is not sent in clear text over the
wire, but for one MD5 does not any longer offer sufficient security,
and then today transport is almost ever TLS secured.)
.
.Mx Va pop3-use-starttls
.It Va pop3-use-starttls-USER@HOST , pop3-use-starttls-HOST ,\
  pop3-use-starttls
\*(BO\*(OP Causes \*(Xx to issue a
.Ql STLS
command to make an unencrypted POP3 session TLS encrypted.
This functionality is not supported by all servers.
Directly using encrypted communication channels should be preferred.
.
.
.Mx
.It Va posix
\*(BO This flag enables \*(PO mode, which changes behaviour of \*(Xx
where that deviates from standardized behaviour.
It is automatically squared with the environment variable
.Ev POSIXLY_CORRECT ,
changing the one will adjust the other.
The following behaviour is covered and enforced by this mechanism:
.
.Pp
.Bl -bullet -compact
.It
In non-interactive mode, any error encountered while loading resource
files during program startup will cause a program exit, whereas in
interactive mode such errors will stop loading of the currently loaded
(stack of) file(s, i.e., recursively).
These exits can be circumvented on a per-command base by using
.Cm ignerr ,
one of the
.Sx "Command modifiers" ,
for each command which shall be allowed to fail.
.
.It
.Ic alternates
will replace the list of alternate addresses instead of appending to it.
.
.It
The variable inserting
.Sx "COMMAND ESCAPES"
.Ic ~A ,
.Ic ~a ,
.Ic ~I
and
.Ic ~i
will expand embedded character sequences
.Ql \et
horizontal tabulator and
.Ql \en
line feed.
\*(ID For compatibility reasons this step will always be performed.
.
.It
Reading in messages via
.Ic ~f
.Pf ( Sx "COMMAND ESCAPES" )
will use the
.Ql type
not the
.Ql forward
.Ic headerpick
selection.
.
.It
Upon changing the active
.Ic folder
no summary of
.Ic headers
will be displayed even if
.Va header
is set.
.
.It
Setting
.Va ignoreeof
implies the behaviour described by
.Va dot .
.
.It
The variable
.Va keep
is extended to cover any empty mailbox, not only empty
.Mx -sx
.Sx "primary system mailbox" Ns
es: they will be removed when they are left in empty state otherwise.
.
.It
The exit
.Va \&?
(and error
.Va \&! Ns )
status of each command replaces that of the former, the last becomes the
exit status of the program itself.
In \*(PO mode the program exit status will instead have bit 2 (value 4)
set unless all sent messages were successfully sent out to the
.Va mta ;
also see
.Va sendwait .
.El
.
.
.Mx
.It Va print-alternatives
\*(BO When a MIME message part of type
.Ql multipart/alternative
is displayed and it contains a subpart of type
.Ql text/plain ,
other parts are normally discarded.
Setting this variable causes all subparts to be displayed,
just as if the surrounding part was of type
.Ql multipart/mixed .
.
.Mx
.It Va prompt
The string used as a prompt in interactive mode.
Whenever the variable is evaluated the value is treated as if specified
within dollar-single-quotes (see
.Sx "Shell-style argument quoting" ) .
This (post-assignment, i.e., second) expansion can be used to embed
status information, for example
.Va \&? ,
.Va \&! ,
.Va account
or
.Va mailbox-display .
.Pp
In order to embed characters which should not be counted when
calculating the visual width of the resulting string, enclose the
characters of interest in a pair of reverse solidus escaped brackets:
.Ql \e[\eE[0m\e] ;
a slot for coloured prompts is also available with the \*(oPal command
.Ic colour .
Prompting may be prevented by setting this to the null string
(aka\|
.Ql set noprompt ) .
.
.Mx
.It Va prompt2
This string is used for secondary prompts, but is otherwise identical to
.Va prompt .
The default is
.Ql ..\0 .
.
.Mx
.It Va quiet
\*(BO Suppresses the printing of the version when first invoked.
.
.Mx
.It Va quote
If set messages processed by variants of
.Ic followup
and
.Ic reply
will start with the original message, lines of which prefixed by
.Va indentprefix ,
taking into account
.Va quote-chars
and
.Va quote-fold .
No headers will be quoted when set without value or for
.Ql noheading ,
for
.Ql headers
the
.Ql type
.Ic headerpick
selection will be included in the quote,
.Ql allbodies
embeds the (body) contents of all MIME parts, and
.Ql allheaders
also includes all headers.
The quoted message will be enclosed by the expansions of
.Va quote-inject-head
and
.Va quote-inject-tail .
Also see
.Va quote-add-cc ,
.Va quote-as-attachment
and
.Ic ~Q ,
one of the
.Sx "COMMAND ESCAPES" .
.
.Mx
.It Va quote-add-cc
\*(BO Whether senders of messages quoted via
.Ic ~Q
shall be made members of the carbon copies
.Ql Cc:
list.
.
.Mx
.It Va quote-as-attachment
\*(BO Add the original message in its entirety as a
.Ql message/rfc822
MIME attachment when replying to a message, announced as
.Va content-description-quote-attachment .
This works regardless of the setting of
.Va quote .
.
.Mx
.It Va quote-chars
Can be set to a string consisting of non-whitespace ASCII characters
which shall be treated as quotation leaders, the default being
.Ql >|}: .
.
.Mx
.It Va quote-fold
\*(OP Can be set in addition to
.Va indentprefix ,
and creates a more fancy quotation in that leading quotation characters
.Pf ( Va quote-chars )
are compressed and overlong lines are folded.
.Va \&\&quote-fold
can be set to either one, two or three (space separated) numeric values,
which are interpreted as the maximum (goal) and the minimum line length,
respectively, in a spirit rather equal to the
.Xr fmt 1
program, but line- instead of paragraph-based.
The third value is used as the maximum line length instead of the first
if no better break point can be found; it is ignored unless it is larger
than the minimum and smaller than the maximum.
If not set explicitly the minimum will reflect the goal algorithmically.
The goal cannot be smaller than the length of
.Va indentprefix
plus some additional pad; necessary adjustments take place silently.
.
.
.Mx
.Mx
.It Va quote-inject-head , quote-inject-tail
The strings to put before and after the text of a
.Va quote Ns
d message, if non-empty, and respectively.
The former defaults to
.Ql %f wrote:\en\en .
Special format directives will be expanded if possible, and if so
configured the output will be folded according to
.Va quote-fold .
Format specifiers in the given strings start with a percent sign
.Ql %
and expand values of the original message, unless noted otherwise.
Note that names and addresses are not subject to the setting of
.Va showto .
Valid format specifiers are:
.
.Pp
.Bl -tag -compact -width ".It Ql _%%_"
.It Ql %%
A plain percent sign.
.It Ql %a
The address(es) of the sender(s).
.It Ql %d
The date found in the
.Ql Date:
header of the message when
.Va datefield
is set (the default), otherwise the date when the message was received.
Formatting can be controlled by assigning a
.Xr strftime 3
format string to
.Va datefield
(and
.Va datefield-markout-older ) .
.It Ql %f
The full name(s) (name and address, as given) of the sender(s).
.It Ql %i
The
.Ql Message-ID: .
.It Ql %n
The real name(s) of the sender(s) if there is one and
.Va showname
allows usage, the address(es) otherwise.
.It Ql %r
The senders real name(s) if there is one, the address(es) otherwise.
.El
.
.
.Mx
.It Va r-option-implicit
\*(BO Setting this option evaluates the contents of
.Va from
(or, if that contains multiple addresses,
.Va sender )
and passes the results onto the used (file-based) MTA as described for the
.Fl r
option (empty argument case).
.
.Mx
.It Va recipients-in-cc
\*(BO When doing a
.Ic reply ,
the original
.Ql From:
and
.Ql To:
as well as recipients which possibly came in via
.Ql Reply-To:
and
.Ql Mail-Followup-To:
are by default merged into the new
.Ql To: .
If this variable is set a sensitive algorithm tries to place in
.Ql To:
only the sender of the message being replied to, others are placed in
.Ql Cc: .
.
.Mx
.It Va record
Unless this variable is defined, no copies of outgoing mail will be saved.
If defined it gives the pathname, subject to the usual
.Sx "Filename transformations" ,
of a mailbox where all new, replied-to or forwarded messages are saved:
when saving to this mailbox fails the message is not sent, but instead
.Va save Ns
d to
.Ev DEAD .
The standard defines that relative (fully expanded) paths are to be
interpreted relative to the current directory
.Pf ( Ic cwd ) ,
to force interpretation relative to
.Va folder
.Va outfolder
needs to be set in addition.
.
.Mx
.It Va record-files
\*(BO If this variable is set the meaning of
.Va record
will be extended to cover messages which target only file and pipe
recipients (see
.Va expandaddr ) .
These address types will not appear in recipient lists unless
.Va add-file-recipients
is also set.
.
.Mx
.It Va record-resent
\*(BO If this variable is set the meaning of
.Va record
will be extended to also cover the
.Ic resend
and
.Ic Resend
commands.
.
.Mx
.It Va reply-in-same-charset
\*(BO If this variable is set \*(Xx first tries to use the same
character set of the original message for replies.
If this fails, the mechanism described in
.Sx "Character sets"
is evaluated as usual.
.
.Mx
.It Va reply-strings
Can be set to a comma-separated list of (case-insensitive according to
ASCII rules) strings which shall be recognized in addition to the
built-in strings as
.Ql Subject:
reply message indicators \(en built-in are
.Ql Re: ,
which is mandated by RFC 5322, as well as the german
.Ql Aw: ,
.Ql Antw: ,
and the
.Ql Wg:
which often has been seen in the wild;
I.e., the separating colon has to be specified explicitly.
.
.Mx
.It Va reply-to
A list of addresses to put into
.Ql Reply-To:
headers;
.Ic alias Ns
es are expanded instantly with senders kept
.Pf ( Va metoo ) ;
all list members are
.Ic alternates .
.
.Mx
.It Va reply-to-honour
Controls whether a
.Ql Reply-To:
header is honoured when replying to a message via
.Ic reply
or
.Ic Lreply .
This is a
.Mx -sx
.Sx quadoption ;
if set without a value it defaults to
.Dq yes .
.
.Mx
.It Va reply-to-swap-in
Standards like DKIM and (in conjunction with) DMARC caused many
.Sx "Mailing lists"
to use sender address rewriting in the style of
.Ql Name via List <list@address> ,
where the original sender address often being placed in
.Ql Reply-To: .
If this is set and a
.Ql Reply-To:
exists, and consists of only one recipient (!), then that is used in
place of the pretended sender.
This works independently from
.Va reply-to-honour .
The optional value, a comma-separated list of strings, offers more
fine-grained control on when swapping shall be used; for now supported is
.Va mlist ,
here swapping occurs if the sender is a mailing-list as defined by
.Ic mlist .
.
.Mx
.It Va rfc822-body-from_
\*(BO This variable can be used to force displaying a so-called
.Ql From_
line for messages that are embedded into an envelope mail via the
.Ql message/rfc822
MIME mechanism, for more visual convenience, also see
.Va mbox-rfc4155 .
.
.Mx
.It Va save
\*(BO Enable saving of (partial) messages in
.Ev DEAD
upon interrupt or delivery error.
.
.Mx
.It Va screen
The number of lines that represents a
.Dq screenful
of lines, used in
.Ic headers
summary display,
.Ic from
.Ic search Ns
ing, message
.Ic top Ns
line display and scrolling via
.Ic z .
If this variable is not set a calculation based upon the detected
terminal window size and the baud rate is used: the faster the terminal,
the more will be shown.
Overall screen dimensions and pager usage is influenced by the
environment variables
.Ev COLUMNS
and
.Ev LINES
and the variable
.Va crt .
.
.Mx
.It Va searchheaders
\*(BO Expand message list specifiers in the form
.Ql /x:y
to all messages containing the substring
.Dq y
in the header field
.Ql x .
The string search is case insensitive.
.
.Mx
.It Va sendcharsets
\*(OP A comma-separated list of character set names that can be used in
outgoing internet mail.
The value of the variable
.Va charset-8bit
is automatically appended to this list of character sets.
If no character set conversion capabilities are compiled into \*(Xx then
the only supported charset is
.Va ttycharset
(or
.Va ttycharset-detect ) .
Also see
.Va sendcharsets-else-ttycharset
and refer to the section
.Sx "Character sets"
for the complete picture of character set conversion in \*(Xx.
.
.Mx
.It Va sendcharsets-else-ttycharset
\*(BO\*(OP If set, but
.Va sendcharsets
is not, it is acted as if
.Va sendcharsets
had been set to the value of
.Va ttycharset :
in effect this passes through message data in the character set of the
current locale encoding.
For example message text appears as ISO-8859-1 when sent from within
a ISO-8859-1 locale, and in UTF-8 when sent from within an UTF-8 locale.
Note the
.Va charset-8bit
fallback never comes into play as
.Va ttycharset
is implicitly assumed to be 8-bit: this might be a problem for scripts
which use the suggested
.Ql LC_ALL=C
setting, since then
.Va ttycharset
is US-ASCII, and should be actively overwritten.
A modern, better alternative is
.Va ttycharset-detect .
.
.Mx
.It Va sender
An address that is put into the
.Ql Sender:
field of outgoing messages, quoting the standard RFC 5322: the mailbox
of the agent responsible for the actual transmission of the message.
For example, if Mary sends a mail for Alice, then Alice should be in
.Ql From:
whereas Mary should be present in
.Ql Sender: .
According to the standard this variable
.Sy must
be set if
.Va from
contains multiple addresses.
\*(ID Expect automatic management of the
.Va from
and
.Va sender
relationship (requiring an address order in the former).
.Ic alias Ns
es are expanded instantly with senders kept;
Contextually this address is a member of
.Ic alternates .
Also see
.Fl r ,
.Va r-option-implicit .
.
.Mx
.It Va sendwait
Sending messages to the chosen
.Va mta
or to command-pipe recipients (see
.Sx "On sending mail, and non-interactive mode" )
will be performed asynchronously.
This means that only startup errors of the respective program will be
recognizable, but no delivery errors.
Also, no guarantees can be made as to when the respective program will
actually run, as well as to when they will have produced output.
.Pp
If this variable is set then child program exit is waited for, and its
exit status code is used to decide about success.
Remarks: in conflict with the \*(PO standard this variable is built-in
to be initially set.
Another difference is that it can have a value, which is interpreted as
a comma-separated list of case-insensitive strings naming specific
subsystems for which synchronousness shall be ensured (only).
Possible values are
.Ql mta
for
.Va mta
delivery, and
.Ql pcc
for command-pipe recipients.
.
.Mx
.It Va showlast
\*(BO This setting causes \*(Xx to start at the last message
instead of the first one when opening a mailbox, as well as with
.Ic from
and
.Ic headers .
.
.Mx
.It Va showname
\*(BO Causes \*(Xx to use the sender's real name instead of the plain
address in the header field summary and in message specifications.
.
.Mx
.It Va showto
\*(BO Causes the recipient of the message to be shown in the header
summary if the message was sent by the user.
.
.Mx
.It Va Sign
The value backing
.Ic ~A ,
one of the
.Sx "COMMAND ESCAPES" .
Also see
.Va message-inject-tail ,
.Va on-compose-leave
and
.Va on-compose-splice .
.
.Mx
.It Va sign
The value backing
.Ic ~a ,
one of the
.Sx "COMMAND ESCAPES" .
Also see
.Va message-inject-tail ,
.Va on-compose-leave
and
.Va on-compose-splice .
.
.Mx
.It Va skipemptybody
\*(BO If an outgoing message has an empty first or only message part, do
not send, but discard it, successfully (also see the command line option
.Fl E ) .
.
.Mx
.Mx
.It Va smime-ca-dir , smime-ca-file
\*(OP Specify the location of trusted CA certificates in PEM (Privacy
Enhanced Mail) for the purpose of verification of S/MIME signed messages.
.Va tls-ca-dir
documents the necessary preparation steps to use the former.
The set of CA certificates which are built into the TLS library can
be explicitly turned off by setting
.Va smime-ca-no-defaults ,
and further fine-tuning is possible via
.Va smime-ca-flags .
.
.Mx
.It Va smime-ca-flags
\*(OP Can be used to fine-tune behaviour of the X509 CA certificate
storage, and the certificate verification that is used.
The actual values and their meanings are documented for
.Va tls-ca-flags .
.
.Mx
.It Va smime-ca-no-defaults
\*(BO\*(OP Do not load the default CA locations that are built into the
used to TLS library to verify S/MIME signed messages.
.
.Mx Va smime-cipher
.It Va smime-cipher-USER@HOST , smime-cipher
\*(OP Specifies the cipher to use when generating S/MIME encrypted
messages (for the specified account).
RFC 5751 mandates a default of
.Ql aes128
(AES-128 CBC).
Possible values are (case-insensitive and) in decreasing cipher strength:
.Ql aes256
(AES-256 CBC),
.Ql aes192
(AES-192 CBC),
.Ql aes128
(AES-128 CBC),
.Ql des3
(DES EDE3 CBC, 168 bits; default if
.Ql aes128
is not available) and
.Ql des
(DES CBC, 56 bits).
.Pp
The actually available cipher algorithms depend on the cryptographic
library that \*(Xx uses.
\*(OP Support for more cipher algorithms may be available through
dynamic loading via
.Xr EVP_get_cipherbyname 3
(OpenSSL) if \*(Xx has been compiled to support this.
.
.Mx
.It Va smime-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying S/MIME messages.
.
.Mx
.It Va smime-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying S/MIME messages.
.
.Mx
.It Va smime-encrypt-USER@HOST
\*(OP If this variable is set, messages send to the given recipient are
encrypted before sending.
The value of the variable must be set to the name of a file that
contains a certificate in PEM format.
.Pp
If a message is sent to multiple recipients,
each of them for whom a corresponding variable is set will receive an
individually encrypted message;
other recipients will continue to receive the message in plain text
unless the
.Va smime-force-encryption
variable is set.
It is recommended to sign encrypted messages, i.e., to also set the
.Va smime-sign
variable.
.Va content-description-smime-message
will be inspected for messages which become encrypted.
.
.Mx
.It Va smime-force-encryption
\*(BO\*(OP Causes \*(Xx to refuse sending unencrypted messages.
.
.Mx
.It Va smime-sign
\*(BO\*(OP S/MIME sign outgoing messages with the user's
.Pf ( Va from )
private key and include the users certificate as a MIME attachment.
Signing a message enables a recipient to verify that the sender used
a valid certificate,
that the email addresses in the certificate match those in the message
header and that the message content has not been altered.
It does not change the message text,
and people will be able to read the message as usual.
.Va content-description-smime-signature
will be inspected.
Also see
.Va smime-sign-cert , smime-sign-include-certs
and
.Va smime-sign-digest .
.
.
.Mx Va smime-sign-cert
.It Va smime-sign-cert-USER@HOST , smime-sign-cert
\*(OP Points to a file in PEM format.
For the purpose of signing and decryption this file needs to contain the
user's private key followed by the certificate.
.
.Pp
For message signing
.Ql USER@HOST
is always derived from the value of
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
For the purpose of encryption the recipients public encryption key
(certificate) is expected; the command
.Ic certsave
can be used to save certificates of signed messages (the section
.Sx "Signed and encrypted messages with S/MIME"
gives some details).
This mode of operation is usually driven by the specialized form.
.
.Pp
When decrypting messages the account is derived from the recipient
fields
.Pf ( Ql To:
and
.Ql Cc: )
of the message, which are searched for addresses for which such
a variable is set.
\*(Xx always uses the first address that matches,
so if the same message is sent to more than one of the user addresses
using different encryption keys, decryption might fail.
.
.Pp
Password-encrypted keys may be used for signing and decryption.
Automated password lookup is possible via the
.Dq pseudo-hosts
.Ql USER@HOST.smime-cert-key
for the private key, and
.Ql USER@HOST.smime-cert-cert
for the certificate stored in the same file.
For example, the hypothetical address
.Ql bob@exam.ple
could be driven with a private key / certificate pair path defined in
.Va \&\&smime-sign-cert-bob@exam.ple ,
and the needed passwords would then be looked up as
.Ql bob@exam.ple.smime-cert-key
and
.Ql bob@exam.ple.smime-cert-cert .
When decrypting the value of
.Va from
will be tried as a fallback to provide the necessary
.Ql USER@HOST .
To include intermediate certificates, use
.Va smime-sign-include-certs .
The possible password sources are documented in
.Sx "On URL syntax and credential lookup" .
.
.
.Mx Va smime-sign-digest
.It Va smime-sign-digest-USER@HOST , smime-sign-digest
\*(OP Specifies the message digest to use when signing S/MIME messages.
Remember that for this use case
.Ql USER@HOST
refers to the variable
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
The available algorithms depend on the used cryptographic library, but
at least one usable built-in algorithm is ensured as a default.
If possible the standard RFC 5751 will be violated by using
.Ql SHA512
instead of the mandated
.Ql SHA1
due to security concerns.
This variable is ignored for very old (released before 2010)
cryptographic libraries which do not offer the necessary interface:
it will be logged if that happened.
.
.Pp
\*(Xx will try to add built-in support for the following message
digests, names are case-insensitive:
.Ql BLAKE2b512 ,
.Ql BLAKE2s256 ,
.Ql SHA3-512 ,
.Ql SHA3-384 ,
.Ql SHA3-256 ,
.Ql SHA3-224 ,
as well as the widely available
.Ql SHA512 ,
.Ql SHA384 ,
.Ql SHA256 ,
.Ql SHA224 ,
and the proposed insecure
.Ql SHA1 ,
finally
.Ql MD5 .
More digests may \*(oPally be available through dynamic loading via the
OpenSSL function
.Xr EVP_get_digestbyname 3 .
.
.
.Mx Va smime-sign-include-certs
.It Va smime-sign-include-certs-USER@HOST , smime-sign-include-certs
\*(OP If used, this is supposed to a consist of a comma-separated list
of files, each of which containing a single certificate in PEM format to
be included in the S/MIME message in addition to the
.Va smime-sign-cert
certificate.
This can be used to include intermediate certificates of the certificate
authority, in order to allow the recipient's S/MIME implementation to
perform a verification of the entire certificate chain, starting from
a local root certificate, over the intermediate certificates, down to the
.Va smime-sign-cert .
Even though top level certificates may also be included in the chain,
they will not be used for the verification on the recipient's side.
.
.Pp
For the purpose of the mechanisms involved here,
.Ql USER@HOST
refers to the content of the internal variable
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
The pseudo-host
.Ql USER@HOST.smime-include-certs
will be used for performing password lookups for these certificates,
shall they have been given one, therefore the lookup can be automated
via the mechanisms described in
.Sx "On URL syntax and credential lookup" .
.
.
.Mx Va smtp-auth
.It Va smtp-auth-USER@HOST , smtp-auth-HOST , smtp-auth
\*(OP\*(OB Use the authentication slots of
.Va smtp-config .
.
.
.Mx Va smtp-config
.It Va smtp-config-USER@HOST , smtp-config-HOST , smtp-config
\*(OP When a SMTP based
.Va mta
is contacted a list of supported SMTP service extensions will
(optionally) be announced by the server.
This comma-separated (case-insensitive) list configures which extensions
shall be used, and which of the available ones shall not.
Order matters, whitespace is ignored, an optional plus sign
.Ql +
prefix enables, a hyphen-minus
.Ql -
prefix disables usage of an extension, for example
.Ql -all , ehlo,+starttls,   gssapi .
.
.Pp
.Bl -tag -compact -width ".It Cd BaNg"
.It Cd all
This special word enables (default) or disables all extensions.
Disabling it also disables all the below authentication mechanisms.
.It Cd ehlo
Service Extensions (RFC 1869) added the notion of extensions to the SMTP
protocol; when disabled, all other extensions are also disabled (for
.Cd auth
only the master switch is toggled, not the individual mechanisms),
enabling any extension (re-)implies this.
.It Cd 8bitmime
8-bit MIME Transport (RFC 6152) enables usage of the
.Ql 8bit
.Va mime-encoding .
If disabled or not supported by the server, SMTP will not send a
.Ql 8bit
message, and optionally
.Va save
the text in
.Ev DEAD ;
as this happens late the message will also have been
.Va record Ns
ed.
.It Cd pipelining
Command Pipelining (RFC 2920) helps saving packet roundtrips by allowing
successive commands without waiting for respective server responses.
.It Cd starttls
Secure SMTP over TLS (Transport Layer Security, RFC 3207) allows
upgrading an unencrypted (SMTP not SMTPS) connection to use private,
authenticated communication.
To improve security and provide a safety measure against
man-in-the-middle attacks this is always performed \(em even if the
server does not announce it \(em unless explicitly turned off.
Directly using encrypted transport channels should be preferred, as
it saves network traffic.
.It Cd auth
Authentication (RFC 4954) allows account credentials to be passed.
This word disables all authentication mechanisms, but enables only those
which can be managed automatically without external help; for example
GSSAPI requires an externally granted ticket to exist, and is therefore
excluded by the default automatic selection, as is EXTERNAL etc.: these
mechanisms have to be enabled explicitly.
The default selection depends upon the (im- or explicit) presence of TLS.
.El
.
.Pp
If multiple
.Cd auth Ns
entication mechanisms are available, an automatic selection of the
.Dq best
method is performed, preferring the non-automatic mechanisms.
The used list can be fine-tuned, any non-empty list implies
.Cd auth .
For example,
.Ql smtp-config=-allmechs,\:gssapi,\:external,\:plain
will favour external over gssapi, and use plain as a last resort only.
Beware, in the following example
.Ql plain
would still be used as a last ressort, sending credentials in clear
(unless the transport is of an encrypted type):
.Ql smtp-config=-all,,\:gssapi,\:plain .
The following mechanisms are known:
.
.Pp
.Bl -tag -compact -width ".It Cd BaNg"
.It Cd allmechs
Special word which covers all authentication methods (where
.Dq all
means all for disabling, and all supported ones for enabling).
.It Cd cram-md5
\*(OP Challenge-Response authentication mechanism (CRAM; included in
RFC 2195), needs
.Va user
and
.Va password .
.It Cd external
\*(OP Included in the simple authentication and security layer (SASL;
RFC 4422).
Authentication happens through a TLS client certificate (see
.Va tls-config-pairs ,
.Cd Certificate )
on the transport layer, therefore not automatic.
Needs a
.Va user .
.It Cd externanon
\*(OP Likewise, but an empty user name is passed, as it is expected
that the server extracts the name from the certificate.
Not compliant with RFC 4422 / RFC 4954, but has been seen in the wild.
.It Cd gssapi
\*(OP The Kerberos V5 ("GSSAPI") mechanism (RFC 4752).
Needs an external ticket (to be granted by
.Xr kinit 1 ) ,
therefore not automatic.
Needs a
.Va user .
.It Cd login
The LOGIN mechanism
.Pf ( Pa draft-murchison-sasl-login-00.txt ) .
It requires three packet roundtrips, has been obsoleted by the IETF,
and should only be used as a last resort.
Needs
.Va user
and
.Va password .
.It Cd oauthbearer
A set of mechanisms for OAuth (RFC 7628).
One packet roundtrip.
Needs
.Va user
and
.Va password .
The password is a temporary bearer token, not the real password,
and therefore this mechanism is not automatic.
Also see the
.Sx FAQ
entry
.Sx "But, how about XOAUTH2 / OAUTHBEARER?"
.It Cd plain
The PLAIN mechanism (RFC 4616).
One packet roundtrip, needs
.Va user
and
.Va password .
.It Cd xoauth2
A popular slightly different variant of the later standardized
.Cd oauthbearer .
.El
.
.
.Mx Va smtp-from
.It Va smtp-from-USER@HOST , smtp-from-HOST , smtp-from
\*(OP Dedicated
.Ql USER@HOST
information for
.Ql MAIL FROM:<>
SMTP
.Va mta
commands;
.Ic alias Ns
es are expanded instantly with senders kept
.Pf ( Va metoo ) .
If unset
.Va from
is used, otherwise
.Va user
and
.Va hostname .
.
.Mx Va smtp-hostname
.It Va smtp-hostname-USER@HOST , smtp-hostname-HOST , smtp-hostname
\*(OP\*(OB Use the more powerful successor
.Va smtp-from .
.
.Mx Va smtp-use-starttls
.It Va smtp-use-starttls-USER@HOST , smtp-use-starttls-HOST ,\
  smtp-use-starttls
\*(BO\*(OP\*(OB Use
.Va smtp-config .
(Forcing TLS has become a default setting.)
.
.Mx
.It Va socket-connect-timeout
\*(OP A positive number that defines the timeout to wait for
establishing a socket connection before forcing
.Va ^ERR Ns -TIMEDOUT .
.
.Mx Va socks-proxy
.It Va socks-proxy-USER@HOST , socks-proxy-HOST , socks-proxy
\*(OP If set to the URL of a SOCKS5 server then all network activities
are proxied through it, except for the single DNS name lookup necessary
to resolve the proxy URL (unnecessary when given an already resolved IP
address).
It is automatically squared with the environment variable
.Ev SOCKS5_PROXY ,
changing the one will adjust the other.
This example creates a local SOCKS5 proxy on port 10000 that forwards to
the machine
.Ql HOST
(with identity
.Ql USER ) ,
and from which actual network traffic happens:
.Bd -literal -offset indent
$ ssh -D 10000 USER@HOST
$ \*(xX -Ssocks-proxy=[socks5://]localhost:10000
# or =localhost:10000; no local DNS: =127.0.0.1:10000
.Ed
.
.Mx
.It Va spam-interface
\*(OP In order to use any of the spam-related commands (like
.Ic spamrate )
the desired spam interface must be defined by setting this variable.
Refer to the manual section
.Sx "Handling spam"
for the complete picture of spam handling in \*(Xx.
All or none of the following interfaces may be available:
.
.Bl -tag -width ".It Ql _ilte_"
.It Ql spamc
Interaction with
.Xr spamc 1
from the
.Xr spamassassin 1
.Pf ( Lk http://spamassassin.apache.org SpamAssassin )
suite.
Different to the generic filter interface \*(Xx will automatically add
the correct arguments for a given command and has the necessary
knowledge to parse the program's output.
A default value for
.Va spamc-command
will have been compiled into the \*(Xx binary if
.Xr spamc 1
has been found in
.Ev PATH
during compilation.
Shall it be necessary to define a specific connection type (rather than
using a configuration file for that), the variable
.Va spamc-arguments
can be used as in for example
.Ql -d server.example.com -p 783 .
It is also possible to specify a per-user configuration via
.Va spamc-user .
Note that this interface does not inspect the
.Ql is-spam
flag of a message for the command
.Ic spamforget .
.
.It Ql filter
generic spam filter support via freely configurable hooks.
This interface is meant for programs like
.Xr bogofilter 1
and requires according behaviour in respect to the hooks' exit
status for at least the command
.Ic spamrate
.Pf ( Ql 0
meaning a message is spam,
.Ql 1
for non-spam,
.Ql 2
for unsure and any other return value indicating a hard error);
since the hooks can include shell code snippets diverting behaviour
can be intercepted as necessary.
The hooks are
.Va spamfilter-ham , spamfilter-noham , spamfilter-nospam , \
  spamfilter-rate
and
.Va spamfilter-spam ;
the manual section
.Sx "Handling spam"
contains examples for some programs.
The process environment of the hooks will have the variable
.Ev MAILX_FILENAME_GENERATED
set.
Note that spam score support for
.Ic spamrate
is not supported unless
.Va spamfilter-rate-scanscore
variable is set.
.El
.
.
.Mx
.It Va spam-maxsize
\*(OP Messages that exceed this size will not be passed through to the
configured
.Va spam-interface .
If unset or 0, the default of 420000 bytes is used.
.
.Mx
.It Va spamc-command
\*(OP The path to the
.Xr spamc 1
program for the
.Ql spamc
.Va spam-interface .
Note that the path is not expanded, but used
.Dq as is .
A fallback path will have been compiled into the \*(Xx binary if the
executable had been found during compilation.
.
.Mx
.It Va spamc-arguments
\*(OP Even though \*(Xx deals with most arguments for the
.Ql spamc
.Va spam-interface
automatically, it may at least sometimes be desirable to specify
connection-related ones via this variable, for example
.Ql -d server.example.com -p 783 .
.
.Mx
.It Va spamc-user
\*(OP Specify a username for per-user configuration files for the
.Ql spamc
.Va spam-interface .
If this is set to the empty string then \*(Xx will use the name of the
current
.Va user .
.
.Mx
.Mx
.Mx
.Mx
.Mx
.It Va spamfilter-ham , spamfilter-noham , \
  spamfilter-nospam , spamfilter-rate , spamfilter-spam
\*(OP Command and argument hooks for the
.Ql filter
.Va spam-interface .
The manual section
.Sx "Handling spam"
contains examples for some programs.
.
.Mx
.It Va spamfilter-rate-scanscore
\*(OP Spam scores are not supported for the
.Ql filter
.Va spam-interface
unless set.
If the \*(oPnal regular expression support is available then it will be
interpreted as a number, followed by semicolon
.Ql \&;
and an extended regular expression.
The first output line of the
.Va spamfilter-rate
hook is then evaluated accordingly: upon success the regex group given
by the number is interpreted as a floating point scan score.
For example
.Ql -S spamfilter-rate-scanscore="1;^(.+)$"
simply interprets the entire output line as one.
.
.Mx
.It Va stealthmua
If only set without an assigned value, then this setting inhibits the
generation of the
.Ql Message-ID: ,
.Ql Content-ID:
and
.Ql User-Agent:
header fields that include obvious references to \*(Xx.
There are two pitfalls associated with this:
First, the message id of outgoing messages is not known anymore.
Second, an expert may still use the remaining information in the header
to track down the originating mail user agent.
If set to the value
.Ql noagent ,
then the mentioned
.Ql Message-ID:
and
.Ql Content-ID:
suppression does not occur.
.
.Mx
.It Va system-mailrc
\*(RO The compiled-in path of
.Pa \*(UR ,
the system-wide of the
.Sx "Resource files" .
.
.
.Mx
.It Va termcap
(\*(OP) This specifies a comma-separated list of
.Lb libterminfo
and/or
.Lb libtermcap
capabilities (see
.Sx "On terminal control and line editor" ,
escape commas with reverse solidus
.Ql \e )
to be used to overwrite or define entries.
.Sy Note:
this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.
It will always be inspected, regardless of whether
.Va features
denotes termcap/terminfo library support via
.Ql ,+termcap, .
.
.Pp
String capabilities form
.Ql cap=value
pairs and are expected unless noted otherwise.
Numerics have to be notated as
.Ql cap#number
where the number is expected in normal decimal notation.
Finally, booleans do not have any value but indicate a true or false
state simply by being defined or not; this indeed means that \*(Xx
does not support undefining an existing boolean.
String capability values will undergo some expansions before use:
for one notations like
.Ql ^LETTER
stand for
.Ql control-LETTER ,
and for clarification purposes
.Ql \eE
can be used to specify
.Ql escape
(the control notation
.Ql ^[
could lead to misreadings when a left bracket follows, which it does for
the standard CSI sequence);
finally three letter octal sequences, as in
.Ql \e061 ,
are supported.
To specify that a terminal supports 256-colours, and to define sequences
that home the cursor and produce an audible bell, one might write:
.
.Bd -literal -offset indent
set termcap='Co#256,home=\eE[H,bel=^G'
.Ed
.
.Pp
The following terminal capabilities are or may be meaningful for the
operation of the built-in line editor or \*(Xx in general:
.
.Pp
.Bl -tag -compact -width ".It Cd yay"
.It Cd am
.Cd auto_right_margin :
boolean which indicates if the right margin needs special treatment; the
.Cd xenl
capability is related, for more see
.Ev COLUMNS .
This capability is only used when backed by library support.
.
.It Cd clear Ns \0or Cd cl
.Cd clear_screen :
clear the screen and home cursor.
(Will be simulated via
.Cd ho
plus
.Cd cd . )
.
.\" mx_HAVE_COLOUR
.It Cd colors Ns \0or Cd Co
.Cd max_colors :
numeric capability specifying the maximum number of colours.
Note that \*(Xx does not actually care about the terminal beside that,
but always emits ANSI / ISO 6429 escape sequences; also see
.Ic colour .
.
.It Cd cr
.Cd carriage_return :
move to the first column in the current row.
The default built-in fallback is
.Ql \er .
.
.It Cd cub1 Ns \0or Cd le
.Cd cursor_left :
move the cursor left one space (non-destructively).
The default built-in fallback is
.Ql \eb .
.
.It Cd cuf1 Ns \0or Cd nd
.Cd cursor_right :
move the cursor right one space (non-destructively).
The default built-in fallback is
.Ql \eE[C ,
which is used by most terminals.
Less often occur
.Ql \eEC
and
.Ql \eEOC .
.
.It Cd ed Ns \0or Cd cd
.Cd clr_eos :
clear the screen.
.
.\" mx_HAVE_MLE
.It Cd el Ns \0or Cd ce
.Cd clr_eol :
clear to the end of line.
(Will be simulated via
.Cd ch
plus repetitions of space characters.)
.
.It Cd home Ns \0or Cd ho
.Cd cursor_home :
home cursor.
.
.It Cd hpa Ns \0or Cd ch
.Cd column_address :
move the cursor (to the given column parameter) in the current row.
(Will be simulated via
.Cd cr
plus
.Cd nd . )
.
.\" mx_HAVE_TERMCAP
.It Cd rmcup Ns \0or Cd te Ns \0/ Cd smcup Ns \0or Cd ti
.Cd exit_ca_mode
and
.Cd enter_ca_mode ,
respectively: exit and enter the alternative screen ca-mode,
effectively turning \*(Xx into a fullscreen application.
This must be enabled explicitly by setting
.Va termcap-ca-mode .
.
.It Cd smkx Ns \0or Cd ks Ns \0/ Cd rmkx Ns \0or Cd ke
.Cd keypad_xmit
and
.Cd keypad_local ,
respectively: enable and disable the keypad.
This is always enabled if available, because it seems even keyboards
without keypads generate other key codes for, e.g., cursor keys in that
case, and only if enabled we see the codes that we are interested in.
.
.It Cd xenl Ns \0or Cd xn
.Cd eat_newline_glitch :
boolean which indicates whether a newline written in the last column of an
.Cd auto_right_margin
indicating terminal is ignored.
With it the full terminal width is available even on autowrap terminals.
This will be inspected even without
.Ql ,+termcap,
.Va features .
.El
.
.Pp
Many more capabilities which describe key-sequences are documented for
.Ic bind .
.
.
.Mx
.It Va termcap-ca-mode
\*(OP Allow usage of the
.Cd exit_ca_mode
and
.Cd enter_ca_mode
.Va termcap Ns
abilities in order to enter an alternative exclusive screen, the
so-called ca-mode; this usually requires special configuration of the
.Ev PAGER ,
also dependent on the value of
.Va crt .
If set to a non-empty value the alternative screen is cleared before it
is left, as via
.Cd mle-clear-screen .
.Sy Note:
this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.
.
.Mx
.It Va termcap-disable
\*(BO\*(OP Disable any interaction with a terminal control library.
If set only some generic fallback built-ins and possibly the content of
.Va termcap
describe the terminal.
.Sy Note:
this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.
.
.Mx Va tls-ca-file
.Mx Va tls-ca-dir
.It Va tls-ca-dir-USER@HOST , tls-ca-dir-HOST , tls-ca-dir ,\
  tls-ca-file-USER@HOST , tls-ca-file-HOST , tls-ca-file
\*(OP Directory and file, respectively, for pools of trusted CA
certificates in PEM (Privacy Enhanced Mail) format, for the purpose of
verification of TLS server certificates.
Concurrent use is possible, the file is loaded once needed first, the
directory lookup is performed anew as a last resort whenever necessary.
The CA certificate pool built into the TLS library can be disabled via
.Va tls-ca-no-defaults ,
further fine-tuning is possible via
.Va tls-ca-flags .
The directory search requires special filename conventions, see
.Xr SSL_CTX_load_verify_locations 3
and
.Xr verify 1
(or
.Xr c_rehash 1 ) .
.
.
.Mx Va tls-ca-flags
.It Va tls-ca-flags-USER@HOST , tls-ca-flags-HOST , tls-ca-flags
\*(OP Can be used to fine-tune behaviour of the X509 CA certificate
storage, and the certificate verification that is used (also see
.Va tls-verify ) .
The value is expected to consist of a comma-separated list of
configuration directives, with any intervening whitespace being ignored.
The directives directly map to flags that can be passed to
.Xr X509_STORE_set_flags 3 ,
which are usually defined in a file
.Pa openssl/x509_vfy.h ,
and the availability of which depends on the used TLS library
version: a directive without mapping is ignored (error log subject to
.Va debug ) .
Directives currently understood (case-insensitively) include:
.
.Pp
.Bl -tag -compact -width ".It Cd BaNg"
.It Cd no-alt-chains
If the initial chain is not trusted, do not attempt to build an
alternative chain.
Setting this flag will make OpenSSL certificate verification match that
of older OpenSSL versions, before automatic building and checking of
alternative chains has been implemented; also see
.Cd trusted-first .
.It Cd no-check-time
Do not check certificate/CRL validity against current time.
.It Cd partial-chain
By default partial, incomplete chains which cannot be verified up to the
chain top, a self-signed root certificate, will not verify.
With this flag set, a chain succeeds to verify if at least one signing
certificate of the chain is in any of the configured trusted stores of
CA certificates.
The OpenSSL manual page
.Xr SSL_CTX_load_verify_locations 3
gives some advise how to manage your own trusted store of CA certificates.
.It Cd strict
Disable workarounds for broken certificates.
.It Cd trusted-first
Try building a chain using issuers in the trusted store first to avoid
problems with server-sent legacy intermediate certificates.
Newer versions of OpenSSL support alternative chain checking and enable
it by default, resulting in the same behaviour; also see
.Cd no-alt-chains .
.El
.
.
.Mx Va tls-ca-no-defaults
.It Va tls-ca-no-defaults-USER@HOST , tls-ca-no-defaults-HOST ,\
  tls-ca-no-defaults
\*(BO\*(OP Do not load the default CA locations that are built into the
used to TLS library to verify TLS server certificates.
.
.Mx
.It Va tls-config-file
\*(OP If this variable is set
.Xr CONF_modules_load_file 3
(if announced via
.Ql ,+modules-load-file,
in
.Va tls-features )
is used to allow resource file based configuration of the TLS library.
This happens once the library is used first, which may also be early
during startup (logged with
.Va verbose ) !
If a non-empty value is given then the given file, after performing
.Sx "Filename transformations" ,
will be used instead of the TLS libraries global default, and it is an
error if the file cannot be loaded.
The application name will always be passed as
.Ql \*(xX .
Some TLS libraries support application-specific configuration via
resource files loaded like this, see
.Va tls-config-module .
.
.Mx Va tls-config-module
.It Va tls-config-module-USER@HOST , tls-config-module-HOST ,\
  tls-config-module
\*(OP If file based application-specific configuration via
.Va tls-config-file
is available, announced as
.Ql ,+ctx-config,
by
.Va tls-features ,
indicating availability of
.Xr SSL_CTX_config 3 ,
then, it becomes possible to use a central TLS configuration file
for all programs, including \*(xX, for example
.Bd -literal -offset indent
# Register a configuration section for \*(xX
\*(xX = mailx_master
# The top configuration section creates a relation
# in between dynamic SSL configuration and an actual
# program specific configuration section
[mailx_master]
ssl_conf = mailx_tls_config
# And that program specific configuration section now
# can map diverse tls-config-module names to sections,
# as in: tls-config-module=account_xy
[mailx_tls_config]
account_xy = mailx_account_xy
account_yz = mailx_account_yz
[mailx_account_xy]
MinProtocol = TLSv1.2
Curves=P-521
[mailx_account_yz]
CipherString = TLSv1.2:!aNULL:!eNULL:
MinProtocol = TLSv1.1
Options = Bugs
.Ed
.
.
.Mx Va tls-config-pairs
.It Va tls-config-pairs-USER@HOST , tls-config-pairs-HOST , tls-config-pairs
\*(OP The value of this variable chain will be interpreted as
a comma-separated list of directive/value pairs.
Directives and values need to be separated by equals signs
.Ql = ,
any whitespace surrounding pair members is removed.
Keys are (usually) case-insensitive.
Different to when placing these pairs in a
.Va tls-config-module
section of a
.Va tls-config-file ,
commas
.Ql \&,
need to be escaped with a reverse solidus
.Ql \e
when included in pairs
.Pf ( Ql Options=-Bugs\e,KTLS,Certificate=~/.cert ) ;
also different: if the equals sign
.Ql =
is preceded with an asterisk
.Ql *
.Sx "Filename transformations"
will be performed on the value; it is an error if these fail.
Unless proper support is announced by
.Va tls-features
.Pf ( Ql ,+conf-ctx, )
only the keys below are supported, otherwise the pairs will be used
directly as arguments to the function
.Xr SSL_CONF_cmd 3 .
.
.Pp
.Bl -tag -compact -width ".It Cd C_rtificate_"
.It Cd Certificate
Pathname of a TLS client certificate (chain) required by some servers.
Fallback support via
.Xr SSL_CTX_use_certificate_chain_file 3 .
.Sx "Filename transformations"
are performed.
.Cd PrivateKey
will be set to the same value if not initialized explicitly.
Some services support so-called
.Ql external
authentication if a TLS client certificate was successfully presented
during connection establishment
.Pf ( Dq connecting is authenticating ) .
.
.It Cd CipherString
A list of ciphers for TLS connections, see
.Xr ciphers 1 .
By default no list of ciphers is set, resulting in a
.Cd Protocol Ns - Ns
specific list of ciphers (the protocol standards define lists of
acceptable ciphers; possibly cramped by the used TLS library).
Fallback support via
.Xr SSL_CTX_set_cipher_list 3 .
.
.It Cd Ciphersuites
A list of ciphers used for TLSv1.3 connections, see
.Xr ciphers 1 .
These will be joined onto the list of ciphers from
.Cd CipherString .
Available if
.Va tls-features
announces
.Ql ,+ctx-set-ciphersuites, ,
as necessary via
.Xr SSL_CTX_set_ciphersuites 3 .
.
.It Cd Curves
A list of supported elliptic curves, if applicable.
By default no curves are set.
Fallback support via
.Xr SSL_CTX_set1_curves_list 3 ,
if available.
.
.It Cd MaxProtocol , MinProtocol
The maximum and minimum supported TLS versions, respectively.
Available if
.Va tls-features
announces
.Ql ,+ctx-set-maxmin-proto, ,
as necessary via
.Xr SSL_CTX_set_max_proto_version 3
and
.Xr SSL_CTX_set_min_proto_version 3 ;
these fallbacks use an internal parser which understands the strings
.Ql SSLv3 ,
.Ql TLSv1 ,
.Ql TLSv1.1 ,
.Ql TLSv1.2 ,
.Ql TLSv1.3 ,
and the special value
.Ql None ,
which disables the given limit.
.
.It Cd Options
Various flags to set.
Fallback via
.Xr SSL_CTX_set_options 3
and
.Xr SSL_CTX_clear_options 3 :
value is a (escaped!) comma-separated list; whitespace is ignored.
An option is cleared if the first character is hyphen-minus
.Ql - ;
understood options are
.Ql Bugs
and
.Ql KTLS
.Pf ( Va tls-features :
.Ql ,+option-ktls, ) .
.
.It Cd PrivateKey
Pathname of the private key in PEM format of a TLS client certificate.
If unset, the value of
.Cd Certificate
is used.
.Sx "Filename transformations"
are performed.
Fallback via
.Xr SSL_CTX_use_PrivateKey_file 3 .
.
.It Cd Protocol
The used TLS protocol.
If
.Va tls-features
announces
.Ql ,+conf-ctx,
or
.Ql ctx-set-maxmin-proto
then using
.Cd MaxProtocol
and
.Cd MinProtocol
is preferable.
Fallback is
.Xr SSL_CTX_set_options 3 ,
driven via an internal parser which understands the strings
.Ql SSLv3 ,
.Ql TLSv1 ,
.Ql TLSv1.1 ,
.Ql TLSv1.2 ,
.Ql TLSv1.3 ,
and the special value
.Ql ALL .
Multiple protocols may be given as a comma-separated list, any
whitespace is ignored, an optional plus sign
.Ql +
prefix enables, a hyphen-minus
.Ql -
prefix disables a protocol, so that
.Ql -ALL, TLSv1.2
enables only the TLSv1.2 protocol.
.El
.
.
.Mx
.Mx
.It Va tls-crl-dir , tls-crl-file
\*(OP Specify a directory / a file, respectively, that contains a CRL in
PEM format to use when verifying TLS server certificates.
.
.Mx
.It Va tls-features
\*(OP\*(RO This expands to a comma-separated list of the TLS library
identity and optional features.
To ease substring matching the string starts and ends with a comma.
Currently supported identities are
.Ql libressl
(LibreSSL) ,
.Ql libssl-0x30000
(OpenSSL v3.0.0 series),
.Ql libssl-0x10100
(OpenSSL v1.1.x series)
and
.Ql libssl-0x10000
(elder OpenSSL series, other clones).
Optional features are preceded with a plus sign
.Ql +
when available, and with a hyphen-minus
.Ql -
otherwise.
.Pp
Currently known features are
.Ql conf-ctx
.Pf ( Va tls-config-pairs ) ,
.Ql ctx-config
.Pf ( Va tls-config-module ) ,
.Ql ctx-set-ciphersuites
.Pf ( Cd Ciphersuites
slot of
.Va tls-config-pairs ) ,
.Ql ctx-set-maxmin-proto
.Pf ( Va tls-config-pairs ) ,
.Ql modules-load-file
.Pf ( Va tls-config-file ) ,
and
.Ql tls-rand-file
.Pf ( Va tls-rand-file ) .
.
.Mx Va tls-fingerprint
.It Va tls-fingerprint-USER@HOST , tls-fingerprint-HOST , tls-fingerprint
\*(OP It is possible to replace the verification of the connection
peer certificate against the entire local pool of CAs (for more see
.Sx "Encrypted network communication" )
with the comparison against a precalculated certificate message digest,
the so-called fingerprint, to be specified as the used
.Va tls-fingerprint-digest .
This fingerprint can for example be calculated with
.Ql Ic tls Ns \:\0\:fingerprint HOST .
.
.Mx Va tls-fingerprint-digest
.It Va tls-fingerprint-digest-USER@HOST , tls-fingerprint-digest-HOST , \
  tls-fingerprint-digest
\*(OP The message digest to be used when creating TLS certificate
fingerprints, the defaults, if available, in test order, being
.Ql BLAKE2s256 ,
.Ql SHA256 .
For the complete list of digest algorithms refer to
.Va smime-sign-digest .
.
.Mx
.It Va tls-rand-file
\*(OP If
.Va tls-features
announces
.Ql ,+tls-rand-file,
then this will be queried to find a file with random entropy data which
can be used to seed the P(seudo)R(andom)N(umber)G(enerator), see
.Xr RAND_load_file 3 .
The default pathname
.Pf ( Xr RAND_file_name 3 ,
normally
.Pa ~/.rnd )
will be used if this variable is not set or empty, or if the
.Sx "Filename transformations"
fail.
Shall seeding the PRNG have been successful,
.Xr RAND_write_file 3
will be called to update the entropy.
Remarks: libraries which do not announce this feature seed the PRNG by
other means.
.
.Mx Va tls-verify
.It Va tls-verify-USER@HOST , tls-verify-HOST , tls-verify
\*(OP Variable chain that sets the action to be performed if an error
occurs during TLS server certificate validation against the
specified or default trust stores
.Va tls-ca-dir ,
.Va tls-ca-file ,
or the TLS library built-in defaults (unless usage disallowed via
.Va tls-ca-no-defaults ) ,
and as fine-tuned via
.Va tls-ca-flags .
Valid (case-insensitive) values are
.Ql strict
(fail and close connection immediately),
.Ql ask
(ask whether to continue on standard input),
.Ql warn
(show a warning and continue),
.Ql ignore
(do not perform validation).
The default is
.Ql ask .
.Mx
.It Va toplines
If defined, gives the number of lines of a message to be displayed
with the command
.Ic top ;
if unset, the first five lines are printed, if set to 0 the variable
.Va screen
is inspected.
If the value is negative then its absolute value will be used for
unsigned right shifting (see
.Ic vexpr )
the
.Va screen
height.
.
.Mx
.It Va topsqueeze
\*(BO If set then the
.Ic top
command series will strip adjacent empty lines and quotations.
.
.Mx
.It Va ttycharset
The character set of the terminal \*(Xx operates on,
and the one and only supported character set that \*(Xx can use if no
character set conversion capabilities have been compiled into it,
in which case it defaults to ISO-8859-1.
Otherwise it defaults to UTF-8.
Sufficient locale support provided the default will be preferably
deduced from the locale environment if that is set (for example
.Ev LC_CTYPE ,
see there for more); runtime locale changes will be reflected by
.Va \&\&ttycharset
except during the program startup phase and if
.Fl S
had been used to freeze the given value.
Refer to the section
.Sx "Character sets"
for the complete picture about character sets.
.
.Mx
.It Va ttycharset-detect
By default any input text data is expected to be in
.Va ttycharset
.Pf ( Sx "Character sets" ) .
If set active UTF-8 classification is performed: nothing changes for
7-bit, but if 8-bit input is valid UTF-8 that character set is assumed;
if set with value non-UTF-8 8-bit input uses it instead.
.Bd -literal -offset indent
$ echo $'\eu263A' > uni.txt
$ echo $'Hey \eu263A' | \e
  LC_ALL=C \*(xX -:/ -Smta=test \e
    -S ttycharset-detect=LATIN1 \e
    -a uni.txt -s Kn$'\e366'del bob@exam.ple
.Ed
.
.Mx
.It Va typescript-mode
\*(BO A special multiplex variable that disables all variables and
settings which result in behaviour that interferes with running \*(Xx in
.Xr script 1 ;
it sets
.Va colour-disable ,
.Va line-editor-disable
and (before startup completed only)
.Va termcap-disable .
Unsetting it does not restore the former state of the covered settings.
.
.Mx
.It Va umask
For a safe-by-default policy the process file mode creation mask
.Xr umask 2
will be set to
.Ql 0077
on program startup after the resource files have been loaded,
and unless this variable is set.
By assigning this an empty value the active setting will not be changed,
otherwise the given value will be made the new file mode creation mask.
Child processes inherit the file mode creation mask of their parent.
.
.Mx Va user
.It Va user-HOST , user
Variable chain that sets a global fallback user name, used in case
none has been given in the protocol and account-specific URL.
This variable defaults to the name of the user who runs \*(Xx.
.
.Mx
.It Va v15-compat
Enable upward compatibility with \*(Xx version 15.0 in respect to which
configuration options are available and how they are handled.
If set to a non-empty value (the default) the command modifier
.Cm wysh
is implied and thus enforces
.Sx "Shell-style argument quoting"
over
.Sx "Old-style argument quoting"
for all commands which support both.
.
.Mx
.It Va verbose
Verbose mode enables logging of informational context messages.
Historically a \*(BO variable, this can either be set multiple times
(what the command line option
.Fl v
uses), or be assigned a numeric value in order to increase verbosity.
Assigning the value 0 disables verbosity and thus (almost) equals
.Ic unset .
The maximum number is 3.
Also see
.Va debug .
.
.Mx
.Mx
.Mx
.Mx
.Mx
.Mx
.It Va version , version-date , \
  version-hexnum , version-major , version-minor , version-update
\*(RO \*(Xx version information: the first variable is a string with
the complete version identification, the second the release date in ISO
8601 notation without time.
The third is a 32-bit hexadecimal number with the upper 8 bits storing
the major, followed by the minor and update version numbers which occupy
12 bits each.
The latter three variables contain only decimal digits: the major, minor
and update version numbers.
The output of the command
.Ic version
will include this information.
.
.Mx
.It Va writebackedited
If this variable is set messages modified using the
.Ic edit
or
.Ic visual
commands are written back to the current mailbox when it is quit;
it is only honoured for writable mailboxes in MBOX format, though.
Note that the editor will be pointed to the raw message content in that
case, i.e., neither MIME decoding nor decryption will have been
performed, and proper
.Va mbox-rfc4155
.Ql From_
quoting of newly added or edited content is also left as an exercise
to the user.
.El
.\" }}} (Variables)
.
.\" }}} (INTERNAL VARIABLES)
.
.
.\" .Sh ENVIRONMENT {{{
.Sh ENVIRONMENT
.
The term
.Dq environment variable
should be considered an indication that these variables are either
standardized as vivid parts of process environments, or are commonly
found in there.
There is a strict separation in between
.Sx "INTERNAL VARIABLES"
and the process environment that is inherited from the
.Ev SHELL
upon program startup (and passed along to subprocesses).
The separation can be resolved, meaning variables can transparently be
used like
.Sx "INTERNAL VARIABLES" :
when
.Ic set
or
.Ic unset
the process environment is updated automatically, for example;
this includes change
.Mx -sx
.Sx scope
coverage.
(Removal requires sufficient system support: available in BSD since
1987, standardized since Y2K.)
The list of resolved built-in variables follows, the command
.Ic environ
can be used to resolve other variables.
.Ic varshow ,
without arguments and in
.Va verbose
mode, lists the resolve state.
.
.Bl -tag -width ".It Ev BaNg"
.Mx
.It Ev COLUMNS
The user's preferred width in column positions for the terminal screen.
Queried and used once on program startup in interactive or batch
.Pf ( Fl \&# )
mode on a (pseudo-) terminal.
Actively managed
.Pf ( Ql SIGWINCH )
for child processes and the
.Mx -sx
.Sx MLE
.Pf ( Sx "On terminal control and line editor" )
in interactive mode thereafter.
Non-interactive mode always uses, and the fallback default is
a compile-time constant, by default 80 columns.
If in batch mode (on (pseudo-) terminal)
.Ev \&\&COLUMNS
and
.Ev LINES
are both set but not both are usable (empty, not a number, or 0) at
program startup, then the real terminal screen size will be (tried to
be) determined once.
(Normally the
.Ev SHELL
manages these variables, and unsets them for pipe specifications etc.)
.
.Mx
.It Ev DEAD
The name of the (mailbox)
.Ic folder
to use for saving aborted messages if
.Va save
is set; this defaults to
.Pa \*(VD .
If the variable
.Va debug
is set no output will be generated, otherwise the contents of the file
will be replaced.
Except shell globs
.Sx "Filename transformations"
(also see
.Ic folder )
will be performed.
.
.Mx
.It Ev EDITOR
Pathname of the text editor to use for the
.Ic edit
command and
.Ic ~e
.Pf (see\0 Sx "COMMAND ESCAPES" ) ;
.Ev VISUAL
is used for a more display oriented editor.
.
.Mx
.It Ev HOME
The user's home directory.
This variable is only used when it resides in the process environment.
The calling user's home directory will be used instead if this directory
does not exist, is not accessible or cannot be read;
it will always be used for the root user.
(No test for being writable is performed to allow usage by
non-privileged users within read-only jails, but dependent on settings
this directory is a default write target for, for example,
.Ev DEAD ,
.Ev MBOX
and more.)
.
.Mx
.Mx
.Mx
.It Ev LC_ALL , LC_CTYPE , LANG
\*(OP The (names in lookup order of the)
.Xr locale 7
(and / or see
.Xr setlocale 3 )
which indicates the used
.Sx "Character sets" .
Runtime changes trigger automatic updates of the entire locale system,
which includes updating
.Va ttycharset
(except during startup if the variable has been frozen via
.Fl S ) .
.
.Mx
.It Ev LINES
The user's preferred number of lines for the terminal screen.
The behaviour is as described for
.Ev COLUMNS ,
yet the compile-time constant used in non-interactive mode and as
a fallback defaults to 24 (lines).
.
.Mx
.It Ev LISTER
Pathname of the directory lister to use in the
.Ic folders
command when operating on local mailboxes.
Default is
.Xr ls 1
(path search through
.Ev SHELL ) .
.
.Mx
.It Ev LOGNAME
Upon startup \*(Xx will actively ensure that this variable refers to the
name of the user who runs \*(Xx, in order to be able to pass a verified
name to any newly created child process.
.
.Mx
.It Ev MAIL
Is used as the user's
.Mx -sx
.Sx "primary system mailbox"
unless
.Va inbox
is set.
If the environmental fallback is also not set, a built-in compile-time
default is used.
This is assumed to be an absolute pathname.
.
.Mx
.It Ev MAILCAPS
\*(OP Override the default path search of
.Sx "The Mailcap files" :
any existing file therein will be loaded in sequence, appending any
content to the list of MIME type handler directives.
The RFC 1524 standard imposed default value is assigned otherwise:
.Ql ~/.mailcap:\:/etc/mailcap:\:/usr/etc/mailcap:\:/usr/local/etc/mailcap .
(The default value is a compile-time \*(oP.)
.
.Mx
.It Ev MAILRC
Is used as a startup file instead of
.Pa \*(ur
if set.
In order to avoid side-effects from configuration files scripts should
either set this variable to
.Pa /dev/null
or the
.Fl \&:
command line option should be used.
.
.Mx
.It Ev MAILX_NO_SYSTEM_RC
If this variable is set then reading of
.Pa \*(UR
(aka\&
.Va system-mailrc )
at startup is inhibited, i.e., the same effect is achieved as if \*(Xx
had been started up with the option
.Fl \&:
(and according argument) or
.Fl n .
This variable is only used when it resides in the process environment.
.
.Mx
.It Ev MBOX
The name of the user's
.Mx -sx
.Sx "secondary mailbox"
file.
A logical subset of the special
.Sx "Filename transformations"
(also see
.Ic folder )
are supported.
The default is
.Pa \*(VM .
Traditionally this MBOX is used as the file to save messages from the
.Mx -sx
.Sx "primary system mailbox"
that have been read.
Also see
.Sx "Message states" .
.
.Mx
.It Ev NETRC
\*(OP This variable overrides the default location of the user's
.Pa \*(VN
file.
.
.Mx
.It Ev PAGER
Pathname of the paging program backing
.Ic more
and
.Va crt
induced pager usage.
The default paginator is
.Xr more 1
(path search through
.Ev SHELL ) .
.Pp
The content of this variable is inspected: if it contains
.Dq less
then a non-existing environment variable
.Ev LESS
is temporarily set to the portable
.Ql RIFE
(the latter two excessively), whereas for
.Dq lv
.Ev LV
will temporarily be set to
.Ql -c .
Also see
.Sx "Coloured display"
and
.Va colour-disable .
.
.Mx
.It Ev PATH
A colon-separated list of directories that is searched by the shell when
looking for commands, for example
.Ql /bin:/usr/bin:/usr/local/bin .
.
.Mx
.It Ev POSIXLY_CORRECT
This environment entry is automatically squared with
.Va posix .
.
.Mx
.It Ev SHELL
The \*(PO compatible
.Xr sh 1
to use for the commands
.Ic \&! ,
.Ic pipe ,
and
.Ic shell ,
the
.Sx "COMMAND ESCAPES"
.Ic ~!
and
.Ic ~| ,
and when starting subprocesses.
A compile-time default shell is used if this variable is not defined.
.Ql $SHELL -c -- 'echo du'
is required to print
.Ql du
(POSIX issue #1440).
.
.Mx
.It Ev SOCKS5_PROXY
This environment entry is automatically squared with
.Va socks-proxy .
.
.Mx
.It Ev SOURCE_DATE_EPOCH
Specifies a time in seconds since the Unix epoch (1970-01-01) to be
used in place of the current time.
If set upon program startup a reproducible operation mode
.Pf ( Lk https://reproducible-builds.org )
which uses deterministic random numbers, a special fixated pseudo
.Ev LOGNAME ,
.Va log-prefix
and a bit more is used.
This is meant for development and software packager testing purposes.
\*(ID Currently an invalid setting is only ignored, rather than causing
a program abortion.
.Pp
.Dl $ SOURCE_DATE_EPOCH=`date +%s` TZ=UTC \*(xX
.
.Mx
.It Ev TERM
\*(OP The terminal type for which output is to be prepared.
For extended colour and font control refer to
.Sx "Coloured display" ,
and for terminal management in general to
.Sx "On terminal control and line editor" .
.
.Mx
.It Ev TMPDIR
Except for the root user this variable defines the directory for
temporary files to be used instead of
.Pa \*(VT
(or the given compile-time constant) if set, existent, accessible as
well as read- and writable.
This variable is only used when it resides in the process environment,
but \*(Xx will ensure at startup that this environment variable is
updated to contain a usable temporary directory.
.
.Mx
.It Ev TZ
Defines the
.Xr timezone 3
for local standard time and
.Xr date 1 .
(System-dependent, often there is also a
.Pa /etc/localtime . )
.
.Mx
.It Ev USER
Identical to
.Ev LOGNAME
(see there), but this variable is not standardized, should therefore not
be used, and is only corrected if already set.
.
.Mx
.It Ev VISUAL
Pathname of the text editor to use for the
.Ic visual
command and
.Ic ~v
.Pf (see\0 Sx "COMMAND ESCAPES" ) ;
.Ev EDITOR
is used for a less display oriented editor.
.El
.
.\" }}}
.
.
.\" .Sh FILES {{{
.Sh FILES
.
.\" file list {{{
.Bl -tag -width ".It Pa BaNg"
.Mx
.Mx
.It Pa ~/.mailcap , /etc/mailcap
\*(OP Personal and system-wide MIME type handler definition files, see
.Sx "The Mailcap files" .
(The shown names are part of the RFC 1524 standard search path
.Ev MAILCAPS . )
.
.It Pa \*(ur , \*(UR
User-specific and system-wide files giving initial commands, the
.Sx "Resource files" .
(The used pathnames come from
.Va MAILRC
and
.Va system-mailrc ,
respectively.)
.
.Mx
.It Pa \*(VM
The default value for
.Ev MBOX .
.
.Mx
.Mx
.It Pa \*(vU , \*(vS
Personal and system-wide MIME types, see
.Sx "The mime.types files" .
.
.Mx
.It Pa \*(VN
\*(OP The default location of the user's
.Pa .netrc
file \(en the section
.Sx "The .netrc file"
documents the file format.
The used path can be set via
.Ev NETRC .
.
.Mx
.It Pa /dev/null
The data sink
.Xr null 4 .
.
.Mx
.It Pa ~/.rnd
\*(OP Possible location for persistent random entropy seed storage, see
.Va tls-rand-file .
.El
.\" }}}
.
.\" .Ss "Resource files" {{{
.Ss "Resource files"
.
Upon startup several resource files are read, in order:
.
.Bl -tag -width ".It Pa BaNg"
.Mx
.It Pa \*(UR
System-wide resource file
.Pf ( Va system-mailrc ) .
Reading of this file can be suppressed, either by using the
.Fl \&:
(and according argument) or
.Fl n
command line options, or by setting the
.Sx ENVIRONMENT
variable
.Ev MAILX_NO_SYSTEM_RC .
A(n unmodified) version of this is also compiled-in, accessible via
.Fl \&:
.Ql x .
.
.Mx
.It Pa \*(ur
File giving initial commands.
A different file can be chosen by setting the
.Sx ENVIRONMENT
variable
.Ev MAILRC .
Reading of this file can be suppressed with the
.Fl \&:
command line option.
.
.It Va mailx-extra-rc
Defines a startup file to be read after all other resource files.
It can be used to specify settings that are not understood by other
.Xr mailx 1
implementations, for example.
.El
.
.Pp
The content of these files is interpreted as for
.Sx COMMANDS ,
with the exception that
.Ic history
is never tracked.
Errors while loading these files are subject to the settings of
.Va errexit
and
.Va posix .
More files with syntactically equal content can be
.Ic source Ns ed .
The following, saved in a file, would be an examplary content:
.
.Bd -literal -offset indent
 # This line is a comment command.  And y\e
    es, it is really continued here.
set debug \e
    verbose=2
    set editheaders
.Ed
.\" }}}
.
.\" .Ss "The mime.types files" {{{
.Ss "The mime.types files"
.
As stated in
.Sx "HTML mail and MIME attachments"
MIME (Multipurpose Internet Mail Extensions) media types needs to be
registered in order to be able to classify message and attachment content.
One source for them are
.Pa mime.types
files, the loading of which can be controlled by setting the variable
.Va mimetypes-load-control .
Another is the command
.Ic mimetype ,
which also offers access to the MIME type cache.
.Pa mime.types
files have the following syntax:
.
.Bd -literal -offset indent
type/subtype extension [extension ...]
# For example: text/html html htm
.Ed
.
.Pp
where
.Ql type/subtype
denotes the MIME media type, as standardized in RFC 2046:
.Ql type
is used to declare the general type of data, while the
.Ql subtype
specifies a specific format for that type of data.
One or multiple filename
.Ql extension Ns
s, separated by whitespace, and specified without leading dot
.Ql \&. ,
can be bound to the media type format.
Comments may be introduced anywhere on a line with a number sign
.Ql # ,
causing the remaining line to be discarded.
.
.Pp
An extended (non-portable) syntax that prepends an optional
.Ql type-marker
to the above is offered by the command
.Ic mimetype ,
and is supported also in especially crafted files which can be loaded
via the alternative value syntax of
.Va mimetypes-load-control :
.
.Pp
.Dl [?type-marker ]type/subtype extension [extension ...]
.
.Pp
The following type-markers are supported; they are mutual exclusive
unless documented otherwise:
.
.Pp
.Bl -tag -compact -width ".It Ar _n_u"
.It Ar t
Treat this media type as plain text; the
.Ar t
is actually optional.
.It Ar h
Treat message parts with this content as HTML tagsoup.
If the \*(oPal HTML-tagsoup-to-text converter is not available treat
the content as plain text instead.
.It Ar H
Likewise
.Ar h ,
but instead of falling back to plain text require an explicit MIME
content handler.
.It Ar q
If no handler can be found a text message is displayed which says so.
This can be annoying, for example signatures serve a contextual purpose,
their content is of no use by itself.
This marker will avoid displaying the text message.
.It Ar *
The given MIME media type shall only be matched when looking for
handlers, but not when classifying content to create messages.
.Ar t
is no longer optional when this is used.
IANA MIME registry standards do not know about
.Dq extension chains :
.Ql tar.gz
is thus a
.Xr gzip 1
compressed file.
Because MIME media type handlers, like those defined in
.Sx "The Mailcap files" ,
match media types, non-standardized fictional types like
.Ql x-tar-gz
are used in the wild as MIME environments become configured.
The sane solution of recursively unpacking until no more MIME media type
unpacking is possible is not available.
This flag may be used alongside other type-markers, and is especially
useful in conjunction with
.Va mime-counter-evidence .
.El
.
.Pp
When classifying all registered MIME types are searched, and the longest
matching extension will be used.
A filename of only an
.Ql extension
will match, for example
.Pa README
is matched by
.Ql mimetype\0 ? text/unix-readme NEWS README ,
empty filenames are not matched, so for example
.Pa .x.tar
does not match
.Ql application/x-fun x.tar
but rather
.Ql application/x-tar tar .
.
.Pp
Further reading:
for sending messages:
.Ic mimetype ,
.Pf ( Va mime-allow-text-controls ) ,
.Va mimetypes-load-control .
For reading etc. messages:
.Sx "HTML mail and MIME attachments" ,
.Sx "The Mailcap files" ,
.Ic mimetype ,
.Va mime-counter-evidence ,
.Va mimetypes-load-control ,
.Va pipe-TYPE/SUBTYPE ,
.Va pipe-EXTENSION .
.\" }}}
.
.\" .Ss "The Mailcap files" {{{ review
.Ss "The Mailcap files"
.
\*(OP RFC 1524 defines a
.Dq User Agent Configuration Mechanism
to be used to inform mail user agent programs about the locally
installed facilities for handling various data formats, i.e., about
commands and how they can be used to display, edit et cetera MIME part
contents, as well as a default path search that includes multiple
possible locations of resource files, and the
.Ev MAILCAPS
environment variable to overwrite that.
Handlers found from doing the path search will be cached, the command
.Ic mailcap
operates on that cache, and the variable
.Va mailcap-disable
will suppress automatic loading, and usage of any mailcap handlers.
.Sx "HTML mail and MIME attachments"
gives a general overview of how MIME types are handled.
.
.Pp
.Dq Mailcap
files consist of a set of newline separated entries.
Comment lines start with a number sign
.Ql #
(in the first column!) and are ignored.
Empty lines are ignored.
All other lines are interpreted as mailcap entries.
An entry definition may be split over multiple lines by placing the
reverse solidus character
.Ql \e
last in all but the final line.
The standard does not specify how leading whitespace of successive lines
is to be treated, therefore they are retained.
.
.Pp
.Dq Mailcap
entries consist of a number of semicolon
.Ql \&;
separated fields.
The first two fields are mandatory and must occur in the specified
order, the remaining fields are optional and may appear in any order.
Leading and trailing whitespace of field content is ignored (removed).
The reverse solidus
.Ql \e
character can be used to escape any following character including
semicolon and itself in the content of the second field, and in value
parts of any optional key/value field.
.
.Pp
The first field defines the MIME
.Ql TYPE/SUBTYPE
the entry is about to handle (case-insensitively).
If the subtype is specified as an asterisk
.Ql *
the entry is meant to match all subtypes of the named type, e.g.,
.Ql audio/*
would match any audio type.
The second field is the
.Cd view
shell command used to display MIME parts of the given type.
.
.Pp
Data consuming shell commands will be fed message (MIME part) data on
standard input unless one or more instances of the (unquoted) string
.Ql %s
are used: these formats will be replaced with a temporary file(name)
that has been prefilled with the parts data.
Data producing shell commands are expected to generata data on their
standard output unless that format is used.
In all cases any given
.Ql %s
format is replaced with a properly shell quoted pathname.
When a command requests a temporary file via
.Ql %s
then that will be removed again, as if the
.Cd x-mailx-tmpfile
and
.Cd x-mailx-tmpfile-fill
flags had been set; unless the command requests
.Cd x-mailx-async
the
.Cd x-mailx-tmpfile-unlink
flag is also implied; see below for more.
.
.Pp
Optional fields define single-word flags (case-insensitive), or key
/ value pairs consisting of a case-insensitive keyword, an equals sign
.Ql = ,
and a shell command; whitespace surrounding the equals sign is removed.
Optional fields include the following:
.
.
.Bl -tag -width ".It Cd BaNg"
.It Cd compose
A program that can be used to compose a new body or body part in the
given format.
(Currently unused.)
.
.It Cd composetyped
Similar to the
.Cd compose
field, but is to be used when the composing program needs to specify the
.Ql Content-type:
header field to be applied to the composed data.
(Currently unused.)
.
.Mx
.It Cd copiousoutput
A flag field which indicates that the output of the
.Cd view
command is integrable into \*(Xxs normal visual display.
It is mutually exclusive with
.Cd needsterminal .
.
.It Cd description
A textual description that describes this type of data.
The text may optionally be enclosed within double quotation marks
.Ql \&" .
.
.It Cd edit
A program that can be used to edit a body or body part in the given
format.
(Currently unused.)
.
.It Cd nametemplate
This field specifies a filename format for the
.Ql %s
format used in the shell command fields, in which
.Ql %s
will be replaced by a random string.
(The filename is also stored in and passed to subprocesses via
.Ev MAILX_FILENAME_TEMPORARY . )
The standard says this is
.Dq only expected to be relevant in environments \
  where filename extensions are meaningful ,
and so this field is ignored unless the
.Ql %s
is a prefix, optionally followed by (ASCII) alphabetic and numeric
characters, the underscore and the period.
For example, to specify that a JPG file is to be passed to an image
viewer with a name ending in
.Ql .jpg ,
.Ql nametemplate=%s.jpg
can be used.
.
.Mx
.It Cd needsterminal
This flag field indicates that the given shell command must be run on
an interactive terminal.
\*(Xx will temporarily release the terminal to the given command in
interactive mode, in non-interactive mode this entry will be entirely
ignored; this flag implies
.Cd x-mailx-noquote .
.
.It Cd print
A program that can be used to print a message or body part in the given
format.
(Currently unused.)
.
.It Cd test
Specifies a program to be run to test some condition, for example, the
machine architecture, or the window system in use, to determine whether
or not this mailcap entry applies.
If the test fails, a subsequent mailcap entry should be sought; also see
.Cd x-mailx-test-once .
Standard I/O of the test program is redirected from and to
.Pa /dev/null ,
and the format
.Ql %s
is not supported (the data does not yet exist).
.
.It Cd textualnewlines
A flag field which indicates that this type of data is line-oriented and
that, if encoded in
.Ql base64 ,
all newlines should be converted to canonical form (CRLF) before
encoding, and will be in that form after decoding.
(Currently unused.)
.
.It Cd x11-bitmap
Names a file, in X11 bitmap (xbm) format, which points to an appropriate
icon to be used to visually denote the presence of this kind of data.
This field is not used by \*(Xx.
.
.Mx
.It Cd x-mailx-async
Extension flag field that denotes that the given
.Cd view
command shall be executed asynchronously, without blocking \*(Xx.
Cannot be used in conjunction with
.Cd needsterminal ;
the standard output of the command will go to
.Pa /dev/null .
.
.Mx
.It Cd x-mailx-noquote
An extension flag field that indicates that even a
.Cd copiousoutput
.Cd view
command shall not be used when
.Va quote Ns
ing messages, as it would by default.
.
.Mx
.It Cd x-mailx-test-once
Extension flag which denotes whether the given
.Cd test
command shall be evaluated once only with its exit status being cached.
This is handy if some global unchanging condition is to be queried, like
.Dq running under the X Window System .
.
.Mx
.It Cd x-mailx-tmpfile
Extension flag field that requests creation of a zero-sized temporary
file, the name of which is to be placed in the environment variable
.Ev MAILX_FILENAME_TEMPORARY .
It is an error to use this flag with commands that include a
.Ql %s
format (because that is implemented by means of this temporary file).
.
.Mx
.It Cd x-mailx-tmpfile-fill
Normally the MIME part content is passed to the handler via standard
input; if this flag is set then the data will instead be written into
the implied
.Cd x-mailx-tmpfile .
In order to cause deletion of the temporary file you will have to set
.Cd x-mailx-tmpfile-unlink
explicitly!
It is an error to use this flag with commands that include a
.Ql %s
format.
.
.Mx
.It Cd x-mailx-tmpfile-unlink
Extension flag field that requests that the temporary file shall be
deleted automatically when the command loop is entered again at latest.
It is an error to use this flag with commands that include a
.Ql %s
format, or in conjunction with
.Cd x-mailx-async .
.Cd x-mailx-tmpfile
is implied.
.
.Mx
.It Cd x-mailx-last-resort
An extension flag that indicates that this handler shall only be used
as a last resort, when no other source (see
.Sx "HTML mail and MIME attachments" )
provides a MIME handler.
.
.Mx
.It Cd x-mailx-ignore
An extension that enforces that this handler is not used at all.
.El
.
.
.Pp
The standard includes the possibility to define any number of additional
fields, prefixed by
.Ql x- .
Flag fields apply to the entire
.Dq Mailcap
entry \(em in some unusual cases, this may not be desirable, but
differentiation can be accomplished via separate entries, taking
advantage of the fact that subsequent entries are searched if an earlier
one does not provide enough information.
For example, if a
.Cd view
command needs to specify the
.Cd needsterminal
flag, but the
.Cd compose
command shall not, the following will help out the latter:
.
.Bd -literal -offset indent
application/postscript; ps-to-terminal %s; needsterminal
application/postscript; ps-to-terminal %s; compose=idraw %s
.Ed
.
.Pp
In value parts of command fields any occurrence of the format string
.Ql %t
will be replaced by the
.Ql TYPE/SUBTYPE
specification.
Any named parameter from a messages'
.Ql Content-type:
field may be embedded into the command line using the format
.Ql %{
followed by the parameter name and a closing brace
.Ql }
character.
The entire parameter should appear as a single command line argument,
regardless of embedded spaces, shell quoting will be performed by the
RFC 1524 processor, thus:
.
.Bd -literal -offset indent
# Message
Content-type:  multipart/mixed; boundary=42

# Mailcap file
multipart/*; /usr/local/bin/showmulti \e
  %t %{boundary}  ;  composetyped  = /usr/local/bin/makemulti

# Executed shell command
/usr/local/bin/showmulti multipart/mixed 42
.Ed
.
.Pp
Note that \*(Xx does not support handlers for multipart MIME parts as
shown in this example (as of today).
It does not support the additional formats
.Ql %n
and
.Ql %F .
An example file, also showing how to properly deal with the expansion of
.Ql %s ,
which includes any quotes that are necessary to make it a valid shell
argument by itself and thus will cause undesired behaviour when placed
in additional user-provided quotes:
.
.Bd -literal -offset indent
# Comment line
text/richtext; richtext %s; copiousoutput

text/x-perl; perl -cWT %s; nametemplate = %s.pl

# Exit EX_TEMPFAIL=75 on signal
application/pdf; \e
  infile=%s\e; \e
    trap "rm -f ${infile}" EXIT\e; \e
    trap "exit 75" INT QUIT TERM\e; \e
    mupdf "${infile}"; \e
  test = [ -n "${DISPLAY}" ]; \e
  nametemplate = %s.pdf; x-mailx-async
application/pdf; pdftotext -layout - -; copiousoutput

application/*; echo "This is \e\e"%t\e\e" but \e
    is 50 \e% Greek to me" \e; < %s head -c 512 | cat -vet; \e
  copiousoutput; x-mailx-noquote; x-mailx-last-resort
.Ed
.
.Pp
Further reading:
.Sx "HTML mail and MIME attachments" ,
.Sx "The mime.types files" ,
.Ic mimetype ,
.Ev MAILCAPS ,
.Va mime-counter-evidence ,
.Va pipe-TYPE/SUBTYPE ,
.Va pipe-EXTENSION .
.\" }}}
.
.\" .Ss "The .netrc file" {{{ review
.Ss "The .netrc file"
.
User credentials for machine accounts (see
.Sx "On URL syntax and credential lookup" )
can be placed in the
.Pa .netrc
file, which will be loaded and cached when requested by
.Va netrc-lookup .
The default location
.Pa \*(VN
may be overridden by the
.Ev NETRC
environment variable.
As long as syntax constraints are honoured the file source may be
replaced with the output of the shell command set in
.Va netrc-pipe ,
to load an encrypted file, for example.
The cache can be managed with the command
.Ic netrc .
.
.Pp
The file consists of space, tabulator or newline separated tokens.
This parser implements a superset of the original BSD syntax, but users
should nonetheless be aware of portability glitches, shall their
.Pa .netrc
be usable across multiple programs and platforms:
.
.Pp
.Bl -bullet -compact
.It
BSD only supports double quotation marks, for example
.Ql password """pass with spaces""" .
.It
BSD (only?) supports escaping of single characters via a reverse solidus
(a space could be escaped via
.Ql \e\0 ) ,
in- as well as outside of a quoted string.
This method is assumed to be present, and will actively be used to quote
double quotation marks
.Ql \&"
and reverse solidus
.Ql \e
characters inside the
.Cd login
and
.Cd password
tokens, for example for display purposes.
.It
BSD does not require a final quotation mark of the last user input token.
.It
The original BSD (Berknet) parser also supported a format which allowed
tokens to be separated with commas \(en whereas at least Hewlett-Packard
still seems to support this syntax, this parser does not!
.It
As a non-portable extension some widely-used programs support
shell-style comments: if an input line starts, after any amount of
whitespace, with a number sign
.Ql # ,
then the rest of the line is ignored.
.It
Whereas other programs may require that the
.Pa .netrc
file is accessible by only the user if it contains a
.Cd password
token for any other
.Cd login
than
.Dq anonymous ,
this parser will always require these strict permissions.
.El
.
.Pp
Of the following list of supported tokens this parser uses (and caches)
.Cd machine ,
.Cd login
and
.Cd password .
An existing
.Cd default
entry will not be used.
.
.Bl -tag -width ".It Cd BaNg"
.It Cd machine Ar name
The hostname of the entries' machine, lowercase-normalized before use.
Any further file content, until either end-of-file or the occurrence
of another
.Cd machine
or a
.Cd default
first-class token is bound (only related) to the machine
.Ar name .
.Pp
As an extension that should not be the cause of any worries this parser
supports a single wildcard prefix for
.Ar name :
.Bd -literal -offset indent
machine *.example.com login USER password PASS
machine pop3.example.com login USER password PASS
machine smtp.example.com login USER password PASS
.Ed
.Pp
which would match
.Ql xy.example.com
as well as
.Ql pop3.example.com ,
but neither
.Ql example.com
nor
.Ql local.smtp.example.com .
In the example neither
.Ql pop3.example.com
nor
.Ql smtp.example.com
will be matched by the wildcard, since the exact matches take
precedence (it is however faster to specify it the other way around).
.
.It Cd default
This is the same as
.Cd machine
except that it is a fallback entry that is used shall none of the
specified machines match; only one default token may be specified,
and it must be the last first-class token.
.
.It Cd login Ar name
The user name on the remote machine.
.
.It Cd password Ar string
The user's password on the remote machine.
.
.It Cd account Ar string
Supply an additional account password.
This is merely for FTP purposes.
.
.It Cd macdef Ar name
Define a macro.
A macro is defined with the specified
.Ar name ;
it is formed from all lines beginning with the next line and continuing
until a blank line is (consecutive newline characters are) encountered.
(Note that
.Cd macdef
entries cannot be utilized by multiple machines, too, but must be
defined following the
.Ic machine
they are intended to be used with.)
If a macro named
.Ar init
exists, it is automatically run as the last step of the login process.
This is merely for FTP purposes.
.El
.\" }}}
.
.\" }}}
.
.
.\" .Sh EXAMPLES {{{
.Sh EXAMPLES
.
.\" .Ss "S/MIME step by step" {{{
.Ss "S/MIME step by step"
.
\*(OP The first thing that is needed for
.Sx "Signed and encrypted messages with S/MIME"
is a personal certificate, and a private key.
The certificate contains public information, in particular a name and
email address(es), and the public key that can be used by others to
encrypt messages for the certificate holder (the owner of the private
key), and to
.Ic verify
signed messages generated with that certificate('s private key).
Whereas the certificate is included in each signed message, the private
key must be kept secret.
It is used to decrypt messages that were previously encrypted with the
public key, and to sign messages.
.
.Pp
For personal use it is recommended to get a S/MIME certificate from
one of the major CAs on the Internet.
Many CAs offer such certificates for free.
Usually offered is a combined certificate and private key in PKCS#12
format which \*(Xx does not accept directly.
To convert it to PEM format, the following shell command can be used;
Read on for how to use these PEM files.
.
.Bd -literal -offset indent
$ openssl pkcs12 -in cert.p12 -out certpem.pem -clcerts -nodes
$ # Alternatively
$ openssl pkcs12 -in cert.p12 -out cert.pem -clcerts -nokeys
$ openssl pkcs12 -in cert.p12 -out key.pem -nocerts -nodes
.Ed
.
.Pp
There is also
.Lk https://www.CAcert.org
which issues client and server certificates to members of their
community for free; their root certificate
.Pf ( Lk https://\:www.cacert.org/\:certs/\:root.crt )
is often not in the default set of trusted CA root certificates, though,
which means their root certificate has to be downloaded separately,
and needs to be part of the S/MIME certificate validation chain by
including it in
.Va smime-ca-dir
or as a vivid member of the
.Va smime-ca-file .
But let us take a step-by-step tour on how to setup S/MIME with
a certificate from CAcert.org despite this situation!
.
.Pp
First of all you will have to become a member of the CAcert.org
community, simply by registrating yourself via the web interface.
Once you are, create and verify all email addresses you want to be able
to create signed and encrypted messages for/with using the corresponding
entries of the web interface.
Now ready to create S/MIME certificates, so let us create a new
.Dq client certificate ,
ensure to include all email addresses that should be covered by the
certificate in the following web form, and also to use your name as the
.Dq common name .
.
.Pp
Create a private key and a certificate request on your local computer
(see the manual pages of the used commands for more in-depth
knowledge on what the used arguments etc. do):
.
.Pp
.Dl $ openssl req -nodes -newkey rsa:4096 -keyout key.pem -out creq.pem
.
.Pp
Afterwards copy-and-paste the content of
.Dq creq.pem
into the certificate-request (CSR) field of the web form on the
CAcert.org website (you may need to unfold some
.Dq advanced options
to see the corresponding text field).
This last step will ensure that your private key (which never left your
box) and the certificate belong together (through the public key that
will find its way into the certificate via the certificate-request).
You are now ready and can create your CAcert certified certificate.
Download and store or copy-and-paste it as
.Dq pub.crt .
.
.Pp
Yay.
In order to use your new S/MIME setup a combined private key/public key
(certificate) file has to be created:
.
.Pp
.Dl $ cat key.pem pub.crt > ME@HERE.com.paired
.
.Pp
This is the file \*(Xx will work with.
If you have created your private key with a passphrase then \*(Xx will
ask you for it whenever a message is signed or decrypted, unless this
operation has been automated as described in
.Sx "Signed and encrypted messages with S/MIME" .
Set the following variables to henceforth use S/MIME (setting
.Va smime-ca-file
is of interest for verification only):
.
.Bd -literal -offset indent
set smime-ca-file=ALL-TRUSTED-ROOT-CERTS-HERE \e
    smime-sign-cert=ME@HERE.com.paired \e
    smime-sign-digest=SHA512 \e
    smime-sign from=myname@my.host
.Ed
.
.\" }}}
.
.\" .Ss "Using CRLs with S/MIME or TLS" {{{
.Ss "Using CRLs with S/MIME or TLS"
.
\*(OP Certification authorities (CAs) issue certificate revocation
lists (CRLs) on a regular basis.
These lists contain the serial numbers of certificates that have been
declared invalid after they have been issued.
Such usually happens because the private key for the certificate has
been compromised,
because the owner of the certificate has left the organization that is
mentioned in the certificate, etc.
To seriously use S/MIME or TLS verification,
an up-to-date CRL is required for each trusted CA.
There is otherwise no method to distinguish between valid and
invalidated certificates.
\*(Xx currently offers no mechanism to fetch CRLs, nor to access them on
the Internet, so they have to be retrieved by some external mechanism.
.
.Pp
\*(Xx accepts CRLs in PEM format only;
CRLs in DER format must be converted, like, e.\|g.:
.
.Pp
.Dl $ openssl crl \-inform DER \-in crl.der \-out crl.pem
.
.Pp
To tell \*(Xx about the CRLs, a directory that contains all CRL files
(and no other files) must be created.
The
.Va smime-crl-dir
or
.Va tls-crl-dir
variables, respectively, must then be set to point to that directory.
After that, \*(Xx requires a CRL to be present for each CA that is used
to verify a certificate.
.\" }}}
.
.\" }}}
.
.
.\" .Sh "FAQ" {{{
.Sh "FAQ"
.
In general it is a good idea to turn on
.Va debug
.Pf ( Fl d )
and / or
.Va verbose
.Pf ( Fl v ,
twice) if something does not work well.
Very often a diagnostic message can be produced that leads to the
problems' solution.
.
.\" .Ss "\*(Xx shortly hangs on startup" {{{
.Ss "\*(Xx shortly hangs on startup"
.
This can have two reasons, one is the necessity to wait for a file lock
and cannot be helped, the other being that \*(Xx calls the function
.Xr uname 2
in order to query the nodename of the box (sometimes the real one is
needed instead of the one represented by the internal variable
.Va hostname ) .
One may have varying success by ensuring that the real hostname and
.Ql localhost
have entries in
.Pa /etc/hosts ,
or, more generally, that the name service is properly setup \(en
and does
.Xr hostname 1
return the expected value?
Does this local hostname have a domain suffix?
RFC 6762 standardized the link-local top-level domain
.Ql .local ,
try again after adding an (additional) entry with this extension.
.\" }}}
.
.\" .Ss "I cannot login to Google mail (via OAuth)" {{{
.Ss "I cannot login to Google mail \&(via OAuth\&)"
.
Since 2014 some free service providers classify programs as
.Dq less secure
unless they use a special authentication method (OAuth 2.0) which
was not standardized for non-HTTP protocol authentication token query
until August 2015 (RFC 7628).
.
.Pp
Different to Kerberos / GSSAPI, which is developed since the mid of the
1980s, where a user can easily create a local authentication ticket for
her- and himself with the locally installed
.Xr kinit 1
program, that protocol has no such local part but instead requires
a world-wide-web query to create or fetch a token; since there is no
local cache this query would have to be performed whenever \*(Xx is
invoked (in interactive sessions situation may differ).
.
.Pp
\*(Xx does not directly support OAuth.
It, however, supports XOAUTH2 / OAUTHBEARER, see
.Sx "But, how about XOAUTH2 / OAUTHBEARER?"
If that is not used it is necessary to declare \*(Xx a
.Dq less secure app
(on the providers account web page) in order to read and send mail.
However, it also seems possible to take the following steps instead:
.
.Pp
.Bl -enum -compact
.It
give the provider the number of a mobile phone,
.It
enable
.Dq 2-Step Verification ,
.It
create an application specific password (16 characters), and
.It
use that special password instead of the real Google account password in
\*(Xx (for more on that see the section
.Sx "On URL syntax and credential lookup" ) .
.El
.\" }}}
.
.\" .Ss "But, how about XOAUTH2 / OAUTHBEARER?" {{{ FIXME
.Ss "But, how about XOAUTH2 / OAUTHBEARER?"
.
Following up
.Sx "I cannot login to Google mail \&(via OAuth\&)"
one OAuth-based authentication method is available:
the OAuth 2.0 bearer token usage as standardized in RFC 6750 (according
SASL mechanism in RFC 7628), also known as XOAUTH2 and OAUTHBEARER,
allows fetching a temporary access token via the web that can locally be
used as a
.Va password .
The protocol is simple and extendable, token updates or even password
changes via a simple TLS secured server login would be possible in
theory, but today a web browser and an external support tool are
prerequisites for using this authentication method.
The token times out and must be refreshed periodically via web.
.
.Pp
Some hurdles must be taken before being able to use this method.
Using GMail as an example, an application (that is a name) must be
registered, for which credentials, a
.Dq client ID
and a
.Dq client secret ,
need to be created and saved locally (in a secure way).
These initial configuration steps can be performed at
.Lk https://console.developers.google.com/apis/credentials .
Thereafter a refresh token can be requested;
a python program to do this for GMail accounts is
.Lk https://github.com/google/\:gmail-oauth2-tools/\:raw/\:\
master/\:python/\:oauth2.py :
.
.Bd -literal -offset indent
$ python oauth2.py --user=EMAIL \e
  --client-id=THE-ID --client-secret=THE-SECRET \e
  --generate_oauth2_token
To authorize token, visit this url and follow the directions:
  https://accounts.google.com/o/oauth2/auth?client_id=...
  Enter verification code: ...
  Refresh Token: ...
  Access Token: ...
  Access Token Expiration Seconds: 3600
$ # Of which the last three are actual token responses.
$ # Thereafter access tokens can regularly be refreshed
$ # via the created refresh token (read on)
.Ed
.
.Pp
The generated refresh token must also be saved locally (securely).
The procedure as a whole can be read at
.Lk https://github.com/google/\:gmail-oauth2-tools/\:wiki/\:\
OAuth2DotPyRunThrough .
Since periodic timers are not yet supported, keeping an access token
up-to-date (from within \*(Xx) can only be performed via the hook
.Va on-main-loop-tick ,
or (for sending only)
.Va on-compose-enter
(for more on authentication see the section
.Sx "On URL syntax and credential lookup" ) :
.
.Bd -literal -offset indent
set on-main-loop-tick=o-m-l-t on-compose-enter=o-c-e
define o-m-l-t {
  xcall update_access_token
}
define o-c-e {
  xcall update_access_token
}

set access_token_=0
define update_access_token {
  local set i epoch_sec epoch_nsec
  vput vexpr i epoch
  eval set $i # set epoch_sec/_nsec of vexpr epoch
  vput vexpr i + $access_token_ 2100
  if $epoch_sec -ge $i
    vput ! password python oauth2.py --user=EMAIL \e
        --client-id=THE-ID --client-secret=THE-SECRET \e
        --refresh-token=THE-REFRESH-TOKEN |\e
      sed '1b PASS;d; :PASS s/^.\e{1,\e}:\e(.\e{1,\e}\e)$/\e1/'
    vput csop password trim "$password"
    if -n "$verbose"
      echo password is <$password>
    endif
    set access_token_=$epoch_sec
  endif
}
.Ed
.\" }}}
.
.\" .Ss "Not \(dqdefunctional\(dq, but the editor key does not work" {{{ review
.Ss "Not \(dqdefunctional\(dq, but the editor key does not work"
Maybe a sequence is shadowed; setting
.Va debug
or maximum
.Va verbose
causes a
.Ic bind
tree dump after (re-)build (upon startup or after modifying bindings).
.
.Pp
Or the terminal library (see
.Sx "On terminal control and line editor",
.Ic bind ,
.Va termcap )
reports different codes than
.Ev TERM
generates, causing
dysfunctional bindings because of mismatches.
(One common source of this is that the \(em possibly even
non-existing \(em keypad is not turned on, and the resulting layout
reports codes for the normal keyboard keys.)
The expected code sequences are shown by
.Ic bind
in
.Va verbose
mode, the
.Mx -sx
.Sx MLE
loggs the generated ones if
.Va debug
is set in conjunction with maximum
.Va verbose .
After detecting the correct codes these can be placed in
.Va termcap .
Here a hypothetic HOME key example (with redundancy removed):
.
.Bd -literal -offset indent
set verbose; bind*
\*(OU# 1B 5B=[ 31=1 3B=; 32=2 48=H
\*(OU  bind base :khome mle-go-home
set verbose=3 debug
\*(IN..pressing HOME key
\*(OU\*(xX: \ex1B/?
\*(OU\*(xX: \ex5B/[
\*(OU\*(xX: \ex48/H
\*(IX
set noverbose nodebug termcap='khome=\eE[H'; bind*
\*(OU# 1B 5B=[ 48=H
\*(OU  bind base :khome mle-go-home
.Ed
.\" }}}
.
.\" .Ss "Can \*(Xx git-send-email?" {{{
.Ss "Can \*(Xx git-send-email?"
.
Yes.
Put (at least parts of) the following in your
.Pa ~/.gitconfig :
.
.Bd -literal -offset indent
[sendemail]
#smtpserveroption = -Smta=test
smtpserver = /usr/bin/\*(xX
smtpserveroption = -t
#smtpserveroption = -Sexpandaddr
smtpserveroption = -Athe-account-you-need
# need!  (-t not yet MIME message aware)
assume8bitEncoding = UTF-8
transferEncoding = 8bit
#
suppresscc = all
suppressfrom = false
xmailer = false
#to = /tmp/OUT
confirm = always
chainreplyto = true
multiedit = false
thread = true
quiet = true
annotate = true
.Ed
.
.Pp
Newer
.Xr git 1
versions (v2.33.0) added the option
.Cm sendmailCmd .
Patches can also be send directly, for example:
.
.Bd -literal -offset indent
$ git format-patch -M --stdout HEAD^ |
  \*(xX -A the-account-you-need -t RECIPIENT
.Ed
.\" }}}
.
.\" .Ss "Howto handle stale dotlock files" {{{
.Ss "Howto handle stale dotlock files"
.
.Ic folder
sometimes fails to open MBOX mail databases because creation of
.Mx -sx
.Sx "dotlock files"
is impossible due to existing but unowned lock files.
\*(Xx does not offer an option to deal with those files, because it is
considered a site policy what counts as unowned, and what not.
The site policy is usually defined by administrator(s), and expressed in
the configuration of a locally installed MTA (for example
.Xr postfix 1 :
.Ql stale_lock_time=500s ) .
.
.Bd -literal -offset indent
$ </dev/null \*(xX -s 'MTA: be no frog, handle lock' $LOGNAME
.Ed
.
.Pp
By sending a mail to yourself the local MTA can use its normal queue
mechanism to try the delivery multiple times, finally decide a lock file
has become stale, and remove it.
.\" }}}
.
.\" }}}
.
.
.\" .Sh "IMAP CLIENT" {{{
.Sh "IMAP CLIENT"
.
\*(OPally there is IMAP client support available.
This part of the program is obsolete and will vanish in v15 with the
large MIME and I/O layer rewrite, because it uses old-style blocking I/O
and makes excessive use of signal based long code jumps.
Support can hopefully be readded later based on a new-style I/O, with
SysV signal handling.
In fact the IMAP support had already been removed from the codebase, but
was reinstantiated on user demand: in effect the IMAP code is at the
level of \*(Xx v14.8.16 (with
.Ic imapcodec
being the sole exception), and should be treated with some care.
.
.Pp
IMAP uses the
.Ql imap://
and
.Ql imaps://
protocol prefixes, and an IMAP-based
.Va folder
may be used.
IMAP URLs (paths) undergo inspections and possible transformations
before use (and the command
.Ic imapcodec
can be used to manually apply them to any given argument).
Hierarchy delimiters are normalized, a step which is configurable via the
.Va imap-delim
variable chain, but defaults to the first seen delimiter otherwise.
\*(Xx supports internationalised IMAP names, and en- and decodes the
names from and to the
.Va ttycharset
as necessary and possible.
If a mailbox name is expanded (see
.Sx "Filename transformations" )
to an IMAP mailbox, all names that begin with `+' then refer to IMAP
mailboxes below the
.Va folder
target box, while mailbox names prefixed by `@' refer to folders below
the hierarchy base, so the following will list all folders below the
current one when in an IMAP mailbox:
.Ql folders @ .
.
.Pp
Note: some IMAP servers do not accept the creation of mailboxes in
the hierarchy base, but require that they are created as subfolders of
`INBOX' \(en with such servers a mailbox name of the form
.Pp
.Dl imaps://me@imap.myisp.example/INBOX.
.Pp
should be used (the last character is the server's hierarchy
delimiter).
The following IMAP-specific commands exist:
.
.
.Bl -tag -width ".It Ic BaNg"
.Mx
.It Ic cache
Only applicable to cached IMAP mailboxes;
takes a message list and reads the specified messages into the IMAP
cache.
.
.Mx
.It Ic connect
If operating in disconnected mode on an IMAP mailbox,
switch to online mode and connect to the mail server while retaining
the mailbox status.
See the description of the
.Va disconnected
variable for more information.
.
.Mx
.It Ic disconnect
If operating in online mode on an IMAP mailbox,
switch to disconnected mode while retaining the mailbox status.
See the description of the
.Va disconnected
variable for more.
A list of messages may optionally be given as argument;
the respective messages are then read into the cache before the
connection is closed, thus
.Ql disco *
makes the entire mailbox available for disconnected use.
.
.Mx
.It Ic imap
Sends command strings directly to the current IMAP server.
\*(Xx operates always in IMAP `selected state' on the current mailbox;
commands that change this will produce undesirable results and should be
avoided.
Useful IMAP commands are:
.Bl -tag -offset indent -width ".Ic getquotearoot"
.It create
Takes the name of an IMAP mailbox as an argument and creates it.
.It getquotaroot
(RFC 2087) Takes the name of an IMAP mailbox as an argument
and prints the quotas that apply to the mailbox.
Not all IMAP servers support this command.
.It namespace
(RFC 2342) Takes no arguments and prints the Personal Namespaces,
the Other User's Namespaces and the Shared Namespaces.
Each namespace type is printed in parentheses;
if there are multiple namespaces of the same type,
inner parentheses separate them.
For each namespace a prefix and a hierarchy separator is listed.
Not all IMAP servers support this command.
.El
.
.Mx
.It Ic imapcodec
Perform IMAP path transformations.
Supports
.Cm vput
(see
.Sx "Command modifiers" ) ,
and manages the error number
.Va \&! .
The first argument specifies the operation:
.Ar e[ncode]
normalizes hierarchy delimiters (see
.Va imap-delim )
and converts the strings from the locale
.Va ttycharset
to the internationalized variant used by IMAP,
.Ar d[ecode]
performs the reverse operation.
Encoding will honour the (global) value of
.Va imap-delim .
.El
.
.
.Pp
The following IMAP-specific internal variables exist:
.
.
.Bl -tag -width ".It Va BaNg"
.Mx
.It Va disconnected
\*(BO When an IMAP mailbox is selected and this variable is set,
no connection to the server is initiated.
Instead, data is obtained from the local cache (see
.Va imap-cache Ns
).
Mailboxes that are not present in the cache
and messages that have not yet entirely been fetched from the server
are not available;
to fetch all messages in a mailbox at once,
the command
.No ` Ns Li copy * /dev/null Ns '
can be used while still in connected mode.
Changes that are made to IMAP mailboxes in disconnected mode are queued
and committed later when a connection to that server is made.
This procedure is not completely reliable since it cannot be guaranteed
that the IMAP unique identifiers (UIDs) on the server still match the
ones in the cache at that time.
Data is saved to
.Ev DEAD
when this problem occurs.
.
.It Va disconnected-USER@HOST
The specified account is handled as described for the
.Va disconnected
variable above,
but other accounts are not affected.
.
.Mx Va imap-auth
.It Va imap-auth-USER@HOST , imap-auth
Sets the IMAP authentication method.
Supported are the default
.Ql login
(called
.Ql plain
by some servers),
.Ql oauthbearer
(see
.Sx FAQ
entry
.Sx "But, how about XOAUTH2 / OAUTHBEARER?" ) ,
.Ql external
and
.Ql externanon
(for TLS secured connections which pass a client certificate via
.Va tls-config-pairs ) ,
as well as the \*(oPal
.Ql cram-md5
and
.Ql gssapi .
All methods need a
.Va user
and a
.Va password
except
.Ql gssapi
and
.Ql external ,
which only need the former.
.Ql externanon
only uses data from the client certificate.
.
.Mx
.It Va imap-cache
Enables caching of IMAP mailboxes.
The value of this variable must point to a directory that is either
existent or can be created by \*(Xx.
All contents of the cache can be deleted by \*(Xx at any time;
it is not safe to make assumptions about them.
.
.Mx Va imap-delim
.It Va imap-delim-USER@HOST , imap-delim-HOST , imap-delim
The hierarchy separator used by the IMAP server.
Whenever an IMAP path is specified it will undergo normalization.
One of the normalization steps is the squeezing and adjustment of
hierarchy separators.
If this variable is set, any occurrence of any character of the given
value that exists in the path will be replaced by the first member of
the value; an empty value will cause the default to be used, it is
.Ql /. .
If not set, we will reuse the first hierarchy separator character that
is discovered in a user-given mailbox name.
.
.Mx Va imap-keepalive
.It Va imap-keepalive-USER@HOST , imap-keepalive-HOST , imap-keepalive
IMAP servers may close the connection after a period of
inactivity; the standard requires this to be at least 30 minutes,
but practical experience may vary.
Setting this variable to a numeric `value' greater than 0 causes
a `NOOP' command to be sent each `value' seconds if no other operation
is performed.
.
.Mx
.It Va imap-list-depth
When retrieving the list of folders on an IMAP server, the
.Ic folders
command stops after it has reached a certain depth to avoid possible
infinite loops.
The value of this variable sets the maximum depth allowed.
The default is 2.
If the folder separator on the current IMAP server is a slash `/',
this variable has no effect and the
.Ic folders
command does not descend to subfolders.
.
.Mx Va imap-use-starttls
.It Va imap-use-starttls-USER@HOST , imap-use-starttls-HOST , imap-use-starttls
Causes \*(Xx to issue a `STARTTLS' command to make an unencrypted
IMAP session TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the IMAPS method.
Directly using encrypted communication channels should be preferred.
.El
.
.\" }}}
.
.
.\" .Sh "SEE ALSO" {{{
.Sh "SEE ALSO"
.
.Xr bogofilter 1 ,
.Xr gpg 1 ,
.Xr more 1 ,
.Xr newaliases 1 ,
.Xr openssl 1 ,
.Xr sendmail 1 ,
.Xr sh 1 ,
.Xr spamassassin 1 ,
.Xr iconv 3 ,
.Xr setlocale 3 ,
.Xr aliases 5 ,
.Xr termcap 5 ,
.Xr terminfo 5 ,
.Xr locale 7 ,
.Xr mailaddr 7 ,
.Xr re_format 7
.Pf (or\0 Xr regex 7 ) ,
.Xr mailwrapper 8 ,
.Xr sendmail 8
.
.\" }}}
.
.
.\" .Sh HISTORY {{{
.Sh HISTORY
.
M. Douglas McIlroy writes in his article
.Dq A Research UNIX Reader: Annotated Excerpts \
from the Programmer's Manual, 1971-1986
that a
.Xr mail 1
command already appeared in First Edition
.Ux
in 1971:
.
.Bd -ragged -offset indent
Electronic mail was there from the start.
Never satisfied with its exact behavior, everybody touched it at one
time or another: to assure the safety of simultaneous access, to improve
privacy, to survive crashes, to exploit uucp, to screen out foreign
freeloaders, or whatever.
Not until v7 did the interface change (Thompson).
Later, as mail became global in its reach, Dave Presotto took charge and
brought order to communications with a grab-bag of external networks
(v8).
.Ed
.
.Pp
.Bx
Mail, in large parts compatible with
.Ux
mail, was written in 1978 by Kurt Shoens and developed as part of the
.Bx
.Ux
distribution until 1995.
This manual page is derived from
.Dq The Mail Reference Manual
that Kurt Shoens wrote for Mail 1.3, included in 3BSD in 1980.
The common
.Ux
and
.Bx
denominator became standardized as
.Xr mailx 1
in the X/Open Portability Guide Issue 2 (January 1987).
After the rise of Open Source
.Bx
variants
Mail saw continuous development in the individual code forks,
noticeably by Christos Zoulas in
.Pf Net Bx .
Based upon this Nail, later Heirloom Mailx, was developed by Gunnar
Ritter in the years 2000 until 2008.
Since 2012 S-nail is maintained by Steffen Nurpmeso.
.
.Pp
Electronic mail exchange in general is a concept even older.
The earliest well documented electronic mail system was part of the
Compatible Time Sharing System (CTSS) at MIT, its MAIL command had been
proposed in a staff planning memo at the end of 1964 and was implemented
in mid-1965 when Tom Van Vleck and Noel Morris wrote the necessary code.
Similar communication programs were built for other timesharing systems.
One of the most ambitious and influential was Murray Turoff's EMISARI.
Created in 1971 for the United States Office of Emergency Preparedness,
EMISARI combined private electronic messages with a chat system, public
postings, voting, and a user directory.
.
.Pp
During the 1960s it was common to connect a large number of terminals to
a single, central computer.
Connecting two computers together was relatively unusual.
This began to change with the development of the ARPANET, the ancestor
of today's Internet.
In 1971 Ray Tomlinson adapted the SNDMSG program, originally developed
for the University of California at Berkeley timesharing system, to give
it the ability to transmit a message across the network into the mailbox
of a user on a different computer.
For the first time it was necessary to specify the recipient's computer
as well as an account name.
Tomlinson decided that the underused commercial at
.Ql @
would work to separate the two.
.
.Pp
Sending a message across the network was originally treated as a special
instance of transmitting a file, and so MAIL and MLFL commands were
introduced with RFC 385 as an extension to the file transfer protocol FTP
of RFC 354, both in 1972.
Until early 1973 many discussions and meetings around FTP occurred, and
whereas RFC 475 paved a way towards standardization of mail via FTP, the
final FTP RFC 542 took the opinion that mail shall become an auxiliary
protocol.
Still, for many years, ARPANET mail was sent via FTP.
.
.Pp
Because it was not always clear when or where a message had come from,
RFC 561 in 1973 aimed to formalize electronic mail headers, including
.Dq from ,
.Dq date ,
and
.Dq subject .
In 1975 RFC 680 described fields to help with the transmission of
messages to multiple users, including
.Dq to ,
.Dq cc ,
and
.Dq bcc .
In 1977 these features and others went from best practices to a binding
standard in RFC 733.
In September 1980, with RFC 772, the M(ail) T(ransfer) P(rotocol) was
introduced, which had
.Dq strong similarities to portions of the File Transfer Protocol .
RFC 821 in August 1982 then introduced the refined S(imple) M(ail)
T(ransfer) P(rotocol) in use, and usable, almost 42 years later.
Queen Elizabeth II of England became the first head of state to send
electronic mail on March 26 1976 while ceremonially opening a building
in the British Royal Signals and Radar Establishment (RSRE) in Malvern.
.\" }}}
.
.
.Sh AUTHORS
.
.An -nosplit
.An "Kurt Shoens" ,
.An "Edward Wang" ,
.An "Keith Bostic" ,
.An "Christos Zoulas" ,
.An "Gunnar Ritter" .
\*(Xx is developed by
.An "Steffen Nurpmeso" Aq s-mailx@lists.sdaoden.eu .
.
.
.\" .Sh CAVEATS {{{
.Sh CAVEATS
.
\*(ID Interrupting an operation via
.Dv \&\&SIGINT
aka
.Ql control-C
from anywhere else but a command prompt is very problematic and likely
to leave the program in an undefined state: many library functions
cannot deal with the
.Fn siglongjmp 3
that this software (still) performs; even though efforts have been taken
to address this, no sooner but in v15 it will have been worked out:
interruptions have not been disabled in order to allow forceful breakage
of hanging network connections, for example (all this is unrelated to
.Va ignore ) .
.
.Pp
The SMTP and POP3 protocol support of \*(Xx is very basic.
Also, if it fails to contact its upstream SMTP server, it will not make
further attempts to transfer the message at a later time (setting
.Va save
and
.Va sendwait
may be useful).
If this is a concern, it might be better to set up a local SMTP server
that is capable of message queuing.
.
.\" }}}
.
.
.Sh BUGS
.
When a network-based mailbox is open, directly changing to another
network-based mailbox of a different protocol (i.e., from POP3 to IMAP
or vice versa) will cause a
.Dq deadlock .
.
.Pp
After deleting some message of a POP3 mailbox the header summary falsely
claims that there are no messages to display, one needs to perform
a scroll or dot movement to restore proper state.
.
.Pp
Please report bugs to the
.Va contact-mail
address, for example from within \*(xX:
.\" v15-compat: drop eval as `mail' will expand variable?
.Ql \&? Ns \| Cm eval Ns \| Ic mail Ns \| $contact-mail .
Including the
.Va verbose
output of the command
.Ic version
may be helpful:
.
.Bd -literal -offset indent
set escape=! verbose; vput version xy; unset verbose;\e
  eval mail $contact-mail
Bug subject
!I xy
!.
.Ed
.
.Pp
Information on the web at
.Ql $ \*(xX -X 'echo Ns \| $ Ns Va contact-web Ns ; x' .
.
.\" s-ts-mode
